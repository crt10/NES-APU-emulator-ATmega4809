
AVRASM ver. 2.2.8  C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm Wed Jan 13 22:18:30 2021

C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(9): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m4809def.inc'
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): Including file 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm'
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(9): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m4809def.inc'
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): Including file 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm'
                                 
                                 
                                 ; NES_APU_2a03.asm
                                 ;
                                 ; Created: 11/29/2020 1:44:10 AM
                                 ; Author : Tennyson Cheng
                                 ;
                                 
                                 .list
                                 
                                 .dseg
002800                           pulse1_param: .byte 1 //$4000 DDlc.vvvv = Duty cycle, Length counter halt/Loop flag, Constant volume flag, Volume
002801                           pulse1_sweep_param: .byte 1 //$4001 EPPP.NSSS = Enable, Period, Negate, Shift
                                 //NOTE: In order to account for multiplier, we use 16 instead of 11 bits for the timer
002802                           pulse1_timerL: .byte 1 //$4002 LLLL.LLLL = Low 8 bits for timer
002803                           pulse1_timerH: .byte 1 //$4002 HHHH.HHHH = High 8 bits for timer
002804                           pulse1_length: .byte 1 //$4002 000l.llll = Length counter load
002805                           pulse1_fractional_volume: .byte 1 //used with the Axy effect to calculate volume. represents the VVVV bits in $4000, but with fractional data in bits 0 to 3.
002806                           pulse1_output_volume: .byte 1 //this is the final output volume of pulse 1
002807                           pulse1_note: .byte 1 //the current note index in the note table
                                 
002808                           song_frames: .byte 2
00280a                           song_frame_offset: .byte 2
00280c                           song_size: .byte 2
00280e                           song_speed: .byte 1
00280f                           song_fx_Bxx: .byte 1
002810                           song_fx_Cxx: .byte 1
002811                           song_fx_Dxx: .byte 1
                                 
                                 
002812                           pulse1_pattern: .byte 2
002814                           pulse1_pattern_delay: .byte 2
002816                           pulse1_pattern_offset: .byte 2
                                 
002818                           pulse1_volume_macro: .byte 2
00281a                           pulse1_volume_macro_offset: .byte 1
00281b                           pulse1_volume_macro_loop: .byte 1
00281c                           pulse1_volume_macro_release: .byte 1
                                 
00281d                           pulse1_arpeggio_macro: .byte 2
00281f                           pulse1_arpeggio_macro_offset: .byte 1
002820                           pulse1_arpeggio_macro_loop: .byte 1
002821                           pulse1_arpeggio_macro_release: .byte 1
002822                           pulse1_arpeggio_macro_mode: .byte 1
                                 
002823                           pulse1_total_pitch_offset: .byte 1 //used to reference the overall change in pitch for the pitch macro
002824                           pulse1_pitch_macro: .byte 2
002826                           pulse1_pitch_macro_offset: .byte 1
002827                           pulse1_pitch_macro_loop: .byte 1
002828                           pulse1_pitch_macro_release: .byte 1
                                 
002829                           pulse1_total_hi_pitch_offset: .byte 1 //used to reference the overall change in pitch for the hi pitch macro
00282a                           pulse1_hi_pitch_macro: .byte 2
00282c                           pulse1_hi_pitch_macro_offset: .byte 1
00282d                           pulse1_hi_pitch_macro_loop: .byte 1
00282e                           pulse1_hi_pitch_macro_release: .byte 1
                                 
00282f                           pulse1_duty_macro: .byte 2
002831                           pulse1_duty_macro_offset: .byte 1
002832                           pulse1_duty_macro_loop: .byte 1
002833                           pulse1_duty_macro_release: .byte 1
                                 
002834                           pulse1_fx_0xy_sequence: .byte 2 //arpeggio sequence in the order of 00:xy. xy are from the parameters in 0xy
002836                           pulse1_fx_1xx: .byte 2 //refers to the rate in which to subtract the pitch from by the 1xx
002838                           pulse1_fx_1xx_total: .byte 2 //the total pitch offset for 1xx
00283a                           pulse1_fx_2xx: .byte 2 //refers to the rate in which to add to the pitch by the 2xx
00283c                           pulse1_fx_2xx_total: .byte 2 //the total pitch offset for 2xx
00283e                           pulse1_fx_3xx_start: .byte 2 //the starting note period
002840                           pulse1_fx_3xx_target: .byte 2 //target note period
002842                           pulse1_fx_3xx_speed: .byte 2 //the amount to offset by to get to the target
002844                           pulse1_fx_3xx_total_offset: .byte 2
002846                           pulse1_fx_4xy_speed: .byte 1
002847                           pulse1_fx_4xy_depth: .byte 1
002848                           pulse1_fx_4xy_phase: .byte 1
002849                           pulse1_fx_7xy_speed: .byte 1
00284a                           pulse1_fx_7xy_depth: .byte 1
00284b                           pulse1_fx_7xy_phase: .byte 1
00284c                           pulse1_fx_7xy_value: .byte 1 //value to offset the volume
00284d                           pulse1_fx_Axy: .byte 1 //refers to the decay/addition in volume set by the Axy effect NOTE: this value is a signed fractional byte, with the decimal between bits 3 and 4.
00284e                           pulse1_fx_Gxx_pre: .byte 1 //holds the # of NES frames to wait before executing the current row
00284f                           pulse1_fx_Gxx_post: .byte 1 //holds the # of NES frames to add to the delay before going to the next famitracker row NOTE: Gxx is limited to delay up till the end of the row it was called on
002850                           pulse1_fx_Pxx: .byte 1 //refers to the fine pitch offset set by the Pxx effect
002851                           pulse1_fx_Qxy_target: .byte 2 //target note period
002853                           pulse1_fx_Qxy_speed: .byte 2 //the amount to offset by to get to the target
002855                           pulse1_fx_Qxy_total_offset: .byte 2 //NOTE: due to the way the sound driver is setup, we need to keep track of the total pitch offset
002857                           pulse1_fx_Rxy_target: .byte 2 //target note period
002859                           pulse1_fx_Rxy_speed: .byte 2 //the amount to offset by to get to the target
00285b                           pulse1_fx_Rxy_total_offset: .byte 2
00285d                           pulse1_fx_Sxx_pre: .byte 1 //NOTE: Gxx and Sxx can not both be in effect at the same time. Sxx has priority.
00285e                           pulse1_fx_Sxx_post: .byte 1
                                 
00285f                           pulse2_pattern_delay: .byte 1
002860                           triangle_pattern_delay: .byte 1
002861                           noise_pattern_delay: .byte 1
002862                           dcpm_pattern_delay: .byte 1
                                 
                                 .cseg
                                 
                                 //NOTE: zero is defined in order to use the cp instruction without the need to load 0x00 into a register beforehand
                                 .def zero = r2
                                 .def channel_flags = r25 //[pulse1.pulse2] RSlc.0000 = Reload, Start, Length halt/Loop, Constant volume
                                 .def pulse1_sequence = r13
                                 .def pulse1_length_counter = r14
                                 .def pulse1_sweep = r15 //NSSS.EPPP = Negate sweep flag, Shift, Enable sweep flag, Period divider
                                 .def pulse1_volume_divider = r16 //0000.PPPP = Period divider
                                 .def pulse1_volume_decay = r17 //0000.dddd = Decay
                                 
                                 reset:
000000 940c 11d3                 	jmp init
                                 
                                 .org TCA0_OVF_vect
00000e 940c 132d                 	jmp sound_driver
                                 
                                 .org TCA0_CMP0_vect
000012 940c 1313                 	jmp sequence_0_2
                                 
                                 .org TCA0_CMP1_vect
000014 940c 131d                 	jmp sequence_1_3
                                 
                                 .org TCA0_CMP2_vect
000016 940c 1313                 	jmp sequence_0_2
                                 
                                 .org TCB0_INT_vect
000018 940c 1a00                 	jmp pulse1_sequence_routine
                                 
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(66): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(67): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(68): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(69): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(70): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(71): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(72): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(73): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(74): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(75): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(76): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(77): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(78): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(79): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(80): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(81): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(83): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(84): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(86): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(87): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(88): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(90): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(91): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(92): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(94): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(95): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(96): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(97): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(100): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(101): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(102): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(105): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(107): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(108): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(109): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(116): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(117): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(118): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(123): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(126): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(128): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(129): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(130): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(131): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(132): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(133): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(134): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(135): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(136): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(139): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(140): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(141): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(145): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(146): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(147): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(148): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(150): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(151): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(152): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(153): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(155): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(156): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(157): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(158): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(159): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(160): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(163): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(164): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(165): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(276): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(277): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(278): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(280): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(285): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(286): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(287): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(288): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(289): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(290): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(291): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(292): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(293): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(295): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(299): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(300): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(301): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(302): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(304): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(305): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(307): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(311): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(315): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(316): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(317): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(318): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(320): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(321): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(322): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(325): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(326): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(329): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(330): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(332): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(339): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(340): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(128): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
                                 .list
                                 
                                 init:
                                 	//MAIN CLOCK
0011d3 edb8                      	ldi r27, CPU_CCP_IOREG_gc //protected write
0011d4 93b0 0034                 	sts CPU_CCP, r27
0011d6 e0b0                      	ldi r27, 0 << CLKCTRL_PEN_bp //disable prescaler for 20 MHz on main clock
0011d7 93b0 0061                 	sts CLKCTRL_MCLKCTRLB, r27
                                 
                                 /*	//TEST FOR C4, 1 SECOND, 50% DD
                                 	ldi r26, 0x97
                                 	ldi r27, 0x12
                                 	ldi r26, 0x15
                                 	ldi r27, 0x09
                                 	sts pulse1_timerL, r26
                                 	sts pulse1_timerH, r27
                                 	ldi r27, 0b10111111
                                 	sts pulse1_param, r27
                                 	ldi r27, 0x01
                                 	sts pulse1_length, r27
                                 	//TEST FOR SWEEP UP
                                 	ldi r27, 0b11111111
                                 	sts pulse1_sweep_param, r27*/
                                 
                                 	//ZERO
0011d9 2422                      	clr zero
                                 
                                 	//MEMORY
0011da e3b0                      	ldi r27, 0b00110000
0011db 93b0 2800                 	sts pulse1_param, r27
0011dd e8b0                      	ldi r27, 0b10000000
0011de 93b0 2801                 	sts pulse1_sweep_param, r27
0011e0 efbf                      	ldi r27, 0xFF
0011e1 93b0 2802                 	sts pulse1_timerL, r27
0011e3 93b0 2803                 	sts pulse1_timerH, r27
0011e5 93b0 2804                 	sts pulse1_length, r27
                                 
0011e7 e0b2                      	ldi r27, 0x02
0011e8 93b0 280a                 	sts song_frame_offset, r27
0011ea 9220 280b                 	sts song_frame_offset+1, zero
0011ec eee2                      	ldi ZL, LOW(song0_frames << 1)
0011ed e0f1                      	ldi ZH, HIGH(song0_frames << 1)
0011ee 93e0 2808                 	sts song_frames, ZL
0011f0 93f0 2809                 	sts song_frames+1, ZH
0011f2 91c5                      	lpm r28, Z+ //load the song size
0011f3 91d5                      	lpm r29, Z+
0011f4 93c0 280c                 	sts song_size, r28
0011f6 93d0 280d                 	sts song_size+1, r29
0011f8 9220 280e                 	sts song_speed, zero
                                 
                                 	//CHANNEL 0 TEST
0011fa 91a5                      	lpm r26, Z+
0011fb 91b4                      	lpm r27, Z
0011fc 0faa                      	lsl r26
0011fd 1fbb                      	rol r27
0011fe 93a0 2812                 	sts pulse1_pattern, r26
001200 93b0 2813                 	sts pulse1_pattern+1, r27
001202 e0b0                      	ldi r27, 0x00
001203 9220 2814                 	sts pulse1_pattern_delay, zero
001205 9220 2815                 	sts pulse1_pattern_delay+1, zero
001207 9220 2816                 	sts pulse1_pattern_offset, zero
001209 9220 2817                 	sts pulse1_pattern_offset+1, zero
                                 
                                 	//channel 0 instrument macros
00120b efbf                      	ldi r27, 0xFF
00120c 9220 281a                 	sts pulse1_volume_macro_offset, zero
00120e 93b0 281b                 	sts pulse1_volume_macro_loop, r27
001210 93b0 281c                 	sts pulse1_volume_macro_release, r27
001212 9220 281f                 	sts pulse1_arpeggio_macro_offset, zero
001214 93b0 2820                 	sts pulse1_arpeggio_macro_loop, r27
001216 93b0 2821                 	sts pulse1_arpeggio_macro_release, r27
001218 93b0 2822                 	sts pulse1_arpeggio_macro_mode, r27
00121a 9220 2826                 	sts pulse1_pitch_macro_offset, zero
00121c 93b0 2827                 	sts pulse1_pitch_macro_loop, r27
00121e 93b0 2828                 	sts pulse1_pitch_macro_release, r27
001220 9220 282c                 	sts pulse1_hi_pitch_macro_offset, zero
001222 93b0 282d                 	sts pulse1_hi_pitch_macro_loop, r27
001224 93b0 282e                 	sts pulse1_hi_pitch_macro_release, r27
001226 9220 2831                 	sts pulse1_duty_macro_offset, zero
001228 93b0 2832                 	sts pulse1_duty_macro_loop, r27
00122a 93b0 2833                 	sts pulse1_duty_macro_release, r27
                                 
00122c 9220 2818                 	sts pulse1_volume_macro, zero
00122e 9220 2819                 	sts pulse1_volume_macro+1, zero
001230 9220 281d                 	sts pulse1_arpeggio_macro, zero
001232 9220 281e                 	sts pulse1_arpeggio_macro+1, zero
001234 9220 2823                 	sts pulse1_total_pitch_offset, zero
001236 9220 2824                 	sts pulse1_pitch_macro, zero
001238 9220 2825                 	sts pulse1_pitch_macro+1, zero
00123a 9220 2829                 	sts pulse1_total_hi_pitch_offset, zero
00123c 9220 282a                 	sts pulse1_hi_pitch_macro, zero
00123e 9220 282b                 	sts pulse1_hi_pitch_macro+1, zero
001240 9220 282f                 	sts pulse1_duty_macro, zero
001242 9220 2830                 	sts pulse1_duty_macro+1, zero
                                 
001244 9220 285f                 	sts pulse2_pattern_delay, zero
001246 9220 2860                 	sts triangle_pattern_delay, zero
001248 9220 2861                 	sts noise_pattern_delay, zero
00124a 9220 2862                 	sts dcpm_pattern_delay, zero
                                 
                                 	//PINS
00124c efbf                      	ldi r27, 0xFF //set all pins in VPORTD to output
00124d b9b0                      	out VPORTA_DIR, r27
                                 
                                 	//ENVELOPE
00124e e00f                      	ldi pulse1_volume_divider, 0x0F
00124f 9110 2800                 	lds pulse1_volume_decay, pulse1_param
001251 701f                      	andi pulse1_volume_decay, 0x0F //mask for VVVV bits
001252 9190 2800                 	lds channel_flags, pulse1_param
001254 7390                      	andi channel_flags, 0b00110000
001255 6490                      	sbr channel_flags, 0b01000000 //set start flag
001256 9220 2806                 	sts pulse1_output_volume, zero
001258 93b0 2805                 	sts pulse1_fractional_volume, r27 //initialize fractional volume to max value
                                 	
                                 	//LENGTH
00125a 91d0 2804                 	lds r29, pulse1_length
00125c d7f0                      	rcall length_converter
00125d 2eed                      	mov pulse1_length_counter, r29
                                 
                                 	//SEQUENCE
00125e 91d0 2800                 	lds r29, pulse1_param //load param for sequence table
001260 e0d1                      	ldi r29, 0b00000001 //12.5% is the default duty cycle sequence
001261 2edd                      	mov pulse1_sequence, r29
                                 
                                 	//SWEEP
001262 90f0 2801                 	lds pulse1_sweep, pulse1_sweep_param
001264 94f2                      	swap pulse1_sweep //swap data from high byte and low byte
001265 6890                      	sbr channel_flags, 0b10000000 //set reload flag
                                 
                                 	//FX
001266 efdf                      	ldi r29, 0xFF
001267 93d0 280f                 	sts song_fx_Bxx, r29
001269 9220 2810                 	sts song_fx_Cxx, zero
00126b 9220 2811                 	sts song_fx_Dxx, zero
00126d 9220 2834                 	sts pulse1_fx_0xy_sequence, zero
00126f 9220 2835                 	sts pulse1_fx_0xy_sequence+1, zero
001271 9220 2836                 	sts pulse1_fx_1xx, zero
001273 9220 2837                 	sts pulse1_fx_1xx+1, zero
001275 9220 2838                 	sts pulse1_fx_1xx_total, zero
001277 9220 2839                 	sts pulse1_fx_1xx_total+1, zero
001279 9220 283a                 	sts pulse1_fx_2xx, zero
00127b 9220 283b                 	sts pulse1_fx_2xx+1, zero
00127d 9220 283c                 	sts pulse1_fx_2xx_total, zero
00127f 9220 283d                 	sts pulse1_fx_2xx_total+1, zero
001281 9220 283e                 	sts pulse1_fx_3xx_start, zero
001283 9220 283f                 	sts pulse1_fx_3xx_start+1, zero
001285 9220 2840                 	sts pulse1_fx_3xx_target, zero
001287 9220 2841                 	sts pulse1_fx_3xx_target+1, zero
001289 9220 2842                 	sts pulse1_fx_3xx_speed, zero
00128b 9220 2843                 	sts pulse1_fx_3xx_speed+1, zero
00128d 9220 2844                 	sts pulse1_fx_3xx_total_offset, zero
00128f 9220 2845                 	sts pulse1_fx_3xx_total_offset+1, zero
001291 9220 2846                 	sts pulse1_fx_4xy_speed, zero
001293 9220 2847                 	sts pulse1_fx_4xy_depth, zero
001295 9220 2848                 	sts pulse1_fx_4xy_phase, zero
001297 9220 2849                 	sts pulse1_fx_7xy_speed, zero
001299 9220 284a                 	sts pulse1_fx_7xy_depth, zero
00129b 9220 284b                 	sts pulse1_fx_7xy_phase, zero
00129d 9220 284c                 	sts pulse1_fx_7xy_value, zero
00129f 9220 284d                 	sts pulse1_fx_Axy, zero
0012a1 9220 284e                 	sts pulse1_fx_Gxx_pre, zero
0012a3 9220 284f                 	sts pulse1_fx_Gxx_post, zero
0012a5 9220 2850                 	sts pulse1_fx_Pxx, zero
0012a7 9220 2851                 	sts pulse1_fx_Qxy_target, zero
0012a9 9220 2852                 	sts pulse1_fx_Qxy_target+1, zero
0012ab 9220 2853                 	sts pulse1_fx_Qxy_speed, zero
0012ad 9220 2854                 	sts pulse1_fx_Qxy_speed+1, zero
0012af 9220 2855                 	sts pulse1_fx_Qxy_total_offset, zero
0012b1 9220 2856                 	sts pulse1_fx_Qxy_total_offset+1, zero
0012b3 9220 2857                 	sts pulse1_fx_Rxy_target, zero
0012b5 9220 2858                 	sts pulse1_fx_Rxy_target+1, zero
0012b7 9220 2859                 	sts pulse1_fx_Rxy_speed, zero
0012b9 9220 285a                 	sts pulse1_fx_Rxy_speed+1, zero
0012bb 9220 285b                 	sts pulse1_fx_Rxy_total_offset, zero
0012bd 9220 285c                 	sts pulse1_fx_Rxy_total_offset+1, zero
0012bf 9220 285d                 	sts pulse1_fx_Sxx_pre, zero
0012c1 9220 285e                 	sts pulse1_fx_Sxx_post, zero
                                 
                                 	//TIMERS
                                 	//Frame Counter
                                 	//NOTE:The frame counter will be defaulted to NTSC mode (60 Hz, 120 Hz, 240 Hz)
                                 	//Each interrupt will be setup to interrupt every 240 Hz clock
                                 	//CMP0 = sequence 0, CMP1 = sequence 1, CMP2 = sequence 2, OVF = sequence 3/sound driver
                                 	//Sequence 3 will clock the sound driver every 60Hz, in which new audio data is read and written to the registers
                                 	//Timer period Calculation: (0.00416666666 * 20000000/64)-1 = 1301.08333125 = 0x0515
                                 	//The ATmega4809 is cofigured to run at 20000000 Hz
                                 	//0.00416666666 seconds is the period for 240 Hz
                                 	//The /64 comes from the prescaler divider used
0012c3 e7b0                      	ldi r27, TCA_SINGLE_CMP0EN_bm | TCA_SINGLE_CMP1EN_bm | TCA_SINGLE_CMP2EN_bm | TCA_SINGLE_WGMODE_NORMAL_gc //interrupt mode
0012c4 93b0 0a01                 	sts TCA0_SINGLE_CTRLB, r27
0012c6 e7b1                      	ldi r27, TCA_SINGLE_CMP0_bm | TCA_SINGLE_CMP1_bm | TCA_SINGLE_CMP2_bm | TCA_SINGLE_OVF_bm //enable overflow and compare interrupts
0012c7 93b0 0a0a                 	sts TCA0_SINGLE_INTCTRL, r27
0012c9 e1b5                      	ldi r27, 0x15 //set the period for CMP0
0012ca 93b0 0a28                 	sts TCA0_SINGLE_CMP0, r27
0012cc e0b5                      	ldi r27, 0x05
0012cd 93b0 0a29                 	sts TCA0_SINGLE_CMP0 + 1, r27
0012cf e2bb                      	ldi r27, 0x2B //set the period for CMP1
0012d0 93b0 0a2a                 	sts TCA0_SINGLE_CMP1, r27
0012d2 e0ba                      	ldi r27, 0x0A
0012d3 93b0 0a2b                 	sts TCA0_SINGLE_CMP1 + 1, r27
0012d5 e4b1                      	ldi r27, 0x41 //set the period for CMP2
0012d6 93b0 0a2c                 	sts TCA0_SINGLE_CMP2, r27
0012d8 e0bf                      	ldi r27, 0x0F
0012d9 93b0 0a2d                 	sts TCA0_SINGLE_CMP2 + 1, r27
0012db e5b7                      	ldi r27, 0x57 //set the period for OVF
0012dc 93b0 0a26                 	sts TCA0_SINGLE_PER, r27
0012de e1b4                      	ldi r27, 0x14
0012df 93b0 0a27                 	sts TCA0_SINGLE_PER + 1, r27
0012e1 e0bb                      	ldi r27, TCA_SINGLE_CLKSEL_DIV64_gc | TCA_SINGLE_ENABLE_bm //use prescale divider of 64 and enable timer
0012e2 93b0 0a00                 	sts TCA0_SINGLE_CTRLA, r27
                                 
                                 	//NOTE: Channel Timers are clocked (20/2)/(0.8948865) = 11.1746014718 times faster than the NES APU
                                 	//Because of this, we multiply all the NES timer values by 11.1746014718 beforehand
                                 	//Since we rotate the sequence when the timer goes from t-(t-1) to 0, instead of 0 to t like the NES, we add 1 to the NES timers before multiplying
                                 	//The ATmega4809 is configured to run at 20 MHz
                                 	//The /2 comes from the prescaler divider used
                                 	//0.8948865 MHz is the speed of the NTSC NES APU
                                 	//NOTE: This means that any offset to the pitch for the NES timers would be multiplied by 11.1746014718 aswell.
                                 	//Pulse 1
0012e4 e0b0                      	ldi r27, TCB_CNTMODE_INT_gc //interrupt mode
0012e5 93b0 0a81                 	sts TCB0_CTRLB, r27
0012e7 e0b1                      	ldi r27, TCB_CAPT_bm //enable interrupts
0012e8 93b0 0a85                 	sts TCB0_INTCTRL, r27
0012ea 91b0 2802                 	lds r27, pulse1_timerL //load the LOW bits for timer
0012ec 93b0 0a8c                 	sts TCB0_CCMPL, r27
0012ee 91b0 2803                 	lds r27, pulse1_timerH //load the HIGH bits for timer
0012f0 93b0 0a8d                 	sts TCB0_CCMPH, r27
0012f2 e0b3                      	ldi r27, TCB_CLKSEL_CLKDIV2_gc | TCB_ENABLE_bm //use prescaler divider of 2 and enable timer
0012f3 93b0 0a80                 	sts TCB0_CTRLA, r27
0012f5 9478                      	sei //global interrupt enable
                                 
                                 pulse1:
0012f6 fed0                      	sbrs pulse1_sequence, 0 //if the sequence output is zero, return
0012f7 c015                      	rjmp pulse1_off
                                 
0012f8 14e2                      	cp pulse1_length_counter, zero //if length is zero, return
0012f9 f099                      	breq pulse1_off
                                 
                                 	//NOTE: We will just mute the pulse when the current period is < $0008
                                 	//This is done in order to account for the sweep unit muting the channel when the period is < $0008,
                                 	//Due to the 11.1746014718 timer multiplier being applied to the timer periods, $0008 becomes $0059
0012fa 91c0 0a8c                 	lds r28, TCB0_CCMPL
0012fc e5d9                      	ldi r29, 0x059
0012fd 17cd                      	cp r28, r29
0012fe 91c0 0a8d                 	lds r28, TCB0_CCMPH
001300 e0d0                      	ldi r29, 0x00
001301 07cd                      	cpc r28, r29
001302 f050                      	brlo pulse1_off
                                 
                                 	//NOTE: Since it'd be too taxing to calculate a target period for every APU clock in the sweep unit,
                                 	//we will be muting the channel if it's period ever reaches $07FF, aka the target period was == $07FF
                                 	//Doing this does not account for the real NES "feature" of muting the pulse even if the sweep unit was disabled.
                                 	//Due to the 11.1746014718 timer multiplier being applied to the timer periods, $07FF becomes $5965
001303 91c0 0a8c                 	lds r28, TCB0_CCMPL
001305 e6d6                      	ldi r29, 0x66
001306 17cd                      	cp r28, r29
001307 91c0 0a8d                 	lds r28, TCB0_CCMPH
001309 e5d9                      	ldi r29, 0x59
00130a 07cd                      	cpc r28, r29
00130b f408                      	brsh pulse1_off
00130c c002                      	rjmp pulse1_on //if the HIGH period == $59 && LOW period < $65, pulse on
                                 
                                 pulse1_off:
00130d b821                      	out VPORTA_OUT, zero
00130e cfe7                      	rjmp pulse1
                                 
                                 pulse1_on:
00130f 91d0 2806                 	lds r29, pulse1_output_volume
                                 /*	cpse r29, zero
                                 	rjmp pulse1_off //if VVVV bits are 0, then there is no volume (channel off)*/
                                 
001311 b9d1                      	out VPORTA_OUT, r29
001312 cfe3                      	rjmp pulse1
                                 
                                 //FRAME COUNTER/AUDIO SAMPLE ISR
                                 sequence_0_2:
001313 b7bf                      	in r27, CPU_SREG
001314 93bf                      	push r27
001315 94f8                      	cli
                                 
                                 	//ENVELOPE
001316 d71e                      	rcall pulse1_envelope_routine
                                 
001317 e5b0                      	ldi r27, TCA_SINGLE_CMP0_bm | TCA_SINGLE_CMP2_bm //clear OVF flag
001318 93b0 0a0b                 	sts TCA0_SINGLE_INTFLAGS, r27
00131a 91bf                      	pop r27
00131b bfbf                      	out CPU_SREG, r27
00131c 9518                      	reti
                                 
                                 sequence_1_3:
00131d b7bf                      	in r27, CPU_SREG
00131e 93bf                      	push r27
00131f 94f8                      	cli
                                 
                                 	//ENVELOPE
001320 d714                      	rcall pulse1_envelope_routine
                                 
                                 	//SWEEP
001321 fcf3                      	sbrc pulse1_sweep, 3 //check if the sweep enable bit is cleared
001322 d6e8                      	rcall pulse1_sweep_routine
                                 
                                 	//LENGTH
                                 	//NOTE: The length routine is relatively simple, so we will not be using clocks to rjmp and ret to a seperate lable
001323 fd95                      	sbrc channel_flags, 5 //check if the length counter halt bit is cleared
001324 c002                      	rjmp sequence_1_3_exit
001325 10e2                      	cpse pulse1_length_counter, zero //if length counter is already 0, don't decrement
001326 94ea                      	dec pulse1_length_counter
                                 
                                 sequence_1_3_exit:
001327 e2b1                      	ldi r27, TCA_SINGLE_CMP1_bm | TCA_SINGLE_OVF_bm //clear OVF flag
001328 93b0 0a0b                 	sts TCA0_SINGLE_INTFLAGS, r27
00132a 91bf                      	pop r27
00132b bfbf                      	out CPU_SREG, r27
00132c 9518                      	reti
                                 
                                 sound_driver:
00132d b7bf                      	in r27, CPU_SREG
00132e 93bf                      	push r27
00132f 94f8                      	cli
001330 93cf                      	push r28
001331 93df                      	push r29
                                 
                                 	//SOUND DRIVER
001332 91a0 280f                 	lds r26, song_fx_Bxx
001334 3faf                      	cpi r26, 0xFF //0xFF means that the flag is disabled
001335 f4a9                      	brne sound_driver_fx_Bxx_routine
001336 91a0 2810                 	lds r26, song_fx_Cxx
001338 11a2                      	cpse r26, zero
001339 c03b                      	rjmp sound_driver_fx_Cxx_routine
00133a 91a0 2811                 	lds r26, song_fx_Dxx
00133c 11a2                      	cpse r26, zero
00133d c046                      	rjmp sound_driver_fx_Dxx_routine
                                 
00133e 91a0 280a                 	lds r26, song_frame_offset
001340 91b0 280b                 	lds r27, song_frame_offset+1
001342 91c0 280c                 	lds r28, song_size
001344 91d0 280d                 	lds r29, song_size+1
001346 17ac                      	cp r26, r28
001347 07bd                      	cpc r27, r29
001348 f408                      	brsh sound_driver_fx_song_loop
001349 c061                      	rjmp sound_driver_channel0
                                 
                                 
                                 sound_driver_fx_song_loop:
00134a e0a0                      	ldi r26, 0x00
                                 sound_driver_fx_Bxx_routine:
00134b 91e0 2808                 	lds ZL, song_frames
00134d 91f0 2809                 	lds ZH, song_frames+1
00134f 27cc                      	clr r28 //initialize r29:r28 to 0
001350 27dd                      	clr r29
001351 95a3                      	inc r26 //increment xx parameter by 1
                                 sound_driver_fx_Bxx_routine_loop:
001352 95aa                      	dec r26
001353 f011                      	breq sound_driver_fx_Bxx_routine_loop_exit //once r26 == 0, r29:r28 will hold Bxx*(5*2).
001354 962a                      	adiw r29:r28, 10 //increment the offset by 10 because 5 channels, and each address takes 2 bytes (5*2 = 10)
001355 cffc                      	rjmp sound_driver_fx_Bxx_routine_loop
                                 
                                 sound_driver_fx_Bxx_routine_loop_exit:
001356 9622                      	adiw r29:r28, 2 //add 2 to skip the first 2 bytes (first 2 bytes is the song size)
001357 93c0 280a                 	sts song_frame_offset, r28
001359 93d0 280b                 	sts song_frame_offset+1, r29
00135b 0fec                      	add ZL, r28
00135c 1ffd                      	adc ZH, r29
                                 
00135d 91a5                      	lpm r26, Z+ //load the address of the frame(pattern)
00135e 91b4                      	lpm r27, Z
00135f 0faa                      	lsl r26
001360 1fbb                      	rol r27
001361 93a0 2812                 	sts pulse1_pattern, r26
001363 93b0 2813                 	sts pulse1_pattern+1, r27
                                 
001365 9220 2816                 	sts pulse1_pattern_offset, zero //restart the pattern offset back to 0 because we are reading from a new pattern now
001367 9220 2817                 	sts pulse1_pattern_offset+1, zero
001369 9220 2814                 	sts pulse1_pattern_delay, zero //reset the delay to 0 as well
00136b 9220 2815                 	sts pulse1_pattern_delay+1, zero
                                 
00136d efaf                      	ldi r26, 0xFF
00136e 93a0 280f                 	sts song_fx_Bxx, r26 //reset all song effects
001370 9220 2810                 	sts song_fx_Cxx, zero
001372 9220 2811                 	sts song_fx_Dxx, zero
001374 c036                      	rjmp sound_driver_channel0
                                 
                                 sound_driver_fx_Cxx_routine:
001375 91df                      	pop r29
001376 91cf                      	pop r28
001377 91bf                      	pop r27
001378 bfbf                      	out CPU_SREG, r27
001379 94f8                      	cli //disable global interrupts
                                 		
00137a efaf                      	ldi r26, 0xFF
00137b 93a0 280f                 	sts song_fx_Bxx, r26 //reset all song effects
00137d 9220 2810                 	sts song_fx_Cxx, zero
00137f 9220 2811                 	sts song_fx_Dxx, zero
                                 
001381 9220 2806                 	sts pulse1_output_volume, zero //mute all channels
001383 9518                      	reti
                                 
                                 sound_driver_fx_Dxx_routine:
001384 91e0 2808                 	lds ZL, song_frames
001386 91f0 2809                 	lds ZH, song_frames+1
001388 91a0 280a                 	lds r26, song_frame_offset //we must offset to the appropriate channel
00138a 91b0 280b                 	lds r27, song_frame_offset+1
00138c 961a                      	adiw r27:r26, 10 //increment the frame offset by (5*2 = 10) since there are 5 channel patterns per frame. We *2 because we are getting byte values from the table
00138d 93a0 280a                 	sts song_frame_offset, r26
00138f 93b0 280b                 	sts song_frame_offset+1, r27
001391 0fea                      	add ZL, r26
001392 1ffb                      	adc ZH, r27
                                 
001393 91a5                      	lpm r26, Z+ //load the address of the next pattern
001394 91b4                      	lpm r27, Z
001395 0faa                      	lsl r26
001396 1fbb                      	rol r27
001397 93a0 2812                 	sts pulse1_pattern, r26
001399 93b0 2813                 	sts pulse1_pattern+1, r27
                                 
00139b 9220 2816                 	sts pulse1_pattern_offset, zero //restart the pattern offset back to 0 because we are reading from a new pattern now
00139d 9220 2817                 	sts pulse1_pattern_offset+1, zero
00139f 9220 2814                 	sts pulse1_pattern_delay, zero //reset the delay to 0 as well
0013a1 9220 2815                 	sts pulse1_pattern_delay+1, zero
                                 
0013a3 efaf                      	ldi r26, 0xFF
0013a4 93a0 280f                 	sts song_fx_Bxx, r26 //reset all song effects
0013a6 9220 2810                 	sts song_fx_Cxx, zero
0013a8 9220 2811                 	sts song_fx_Dxx, zero
0013aa c000                      	rjmp sound_driver_channel0
                                 
                                 
                                 
                                 sound_driver_channel0:
0013ab 91a0 2814                 	lds r26, pulse1_pattern_delay
0013ad 91b0 2815                 	lds r27, pulse1_pattern_delay+1
0013af 9610                      	adiw r27:r26, 0
0013b0 f009                      	breq sound_driver_channel0_main //if the pattern delay is 0, proceed with sound driver procedures
0013b1 c2fd                      	rjmp sound_driver_channel0_decrement_frame_delay //if the pattern delay is not 0, decrement the delay
                                 
                                 sound_driver_channel0_main:
0013b2 91e0 2812                 	lds ZL, pulse1_pattern //current pattern for pulse 1
0013b4 91f0 2813                 	lds ZH, pulse1_pattern+1
0013b6 91a0 2816                 	lds r26, pulse1_pattern_offset //current offset in the pattern for pulse 1
0013b8 91b0 2817                 	lds r27, pulse1_pattern_offset+1
0013ba 0fea                      	add ZL, r26 //offset the current pattern pointer to point to new byte data
0013bb 1ffb                      	adc ZH, r27
0013bc 91b4                      	lpm r27, Z //load the byte data from the current pattern
                                 
                                 sound_driver_channel0_check_if_note: //check if data is a note (0x00 - 0x56)
0013bd 35b7                      	cpi r27, 0x57
0013be f408                      	brsh sound_driver_channel0_check_if_volume
0013bf c164                      	rjmp sound_driver_channel0_note
                                 sound_driver_channel0_check_if_volume: //check if data is volume (0x57-0x66)
0013c0 36b7                      	cpi r27, 0x67
0013c1 f408                      	brsh sound_driver_channel0_check_if_delay
0013c2 c19c                      	rjmp sound_driver_channel0_volume
                                 sound_driver_channel0_check_if_delay: //check if data is a delay (0x67 - 0xE2)
0013c3 3eb3                      	cpi r27, 0xE3
0013c4 f408                      	brsh sound_driver_channel0_check_if_instrument
0013c5 c1a3                      	rjmp sound_driver_channel0_delay
                                 sound_driver_channel0_check_if_instrument: //check for instrument flag (0xE3)
0013c6 f409                      	brne sound_driver_channel0_check_if_release
0013c7 c1a6                      	rjmp sound_driver_channel0_instrument_change 
                                 sound_driver_channel0_check_if_release: //check for note release flag (0xE4)
0013c8 3eb4                      	cpi r27, 0xE4
0013c9 f409                      	brne sound_driver_channel0_check_if_end
0013ca c24d                      	rjmp sound_driver_channel0_release
                                 sound_driver_channel0_check_if_end:
0013cb 3fbf                      	cpi r27, 0xFF
0013cc f409                      	brne sound_driver_channel0_check_if_fx
0013cd c26f                      	rjmp sound_driver_channel0_next_pattern
                                 
                                 
                                 
                                 sound_driver_channel0_check_if_fx: //fx flags (0xE5 - 0xFE)
0013ce 9631                      	adiw Z, 1 //point Z to the byte next to the flag
0013cf 91a4                      	lpm r26, Z //load the fx data into r26
0013d0 d292                      	rcall sound_driver_channel0_increment_offset_twice
                                 
0013d1 5eb5                      	subi r27, 0xE5 //prepare offset to perform table lookup
0013d2 ede6                      	ldi ZL, LOW(fx << 1) //load in note table
0013d3 e3f4                      	ldi ZH, HIGH(fx << 1)
0013d4 0fbb                      	lsl r27 //double the offset for the table because we are getting byte data
0013d5 0feb                      	add ZL, r27 //add offset
0013d6 1df2                      	adc ZH, zero
0013d7 91c5                      	lpm r28, Z+ //load address bytes
0013d8 91d4                      	lpm r29, Z
0013d9 2fec                      	mov ZL, r28 //move address bytes back into Z for an indirect jump
0013da 2ffd                      	mov ZH, r29
0013db 9409                      	ijmp
                                 
                                 
                                 //ARPEGGIO
                                 sound_driver_channel0_fx_0xy:
0013dc 93a0 2834                 	sts pulse1_fx_0xy_sequence, r26
0013de 9220 2835                 	sts pulse1_fx_0xy_sequence+1, zero
0013e0 cfd1                      	rjmp sound_driver_channel0_main
                                 
                                 //PITCH SLIDE UP
                                 sound_driver_channel0_fx_1xx:
0013e1 9220 283a                 	sts pulse1_fx_2xx, zero //turn off any 2xx pitch slide down
0013e3 9220 283b                 	sts pulse1_fx_2xx+1, zero
0013e5 9220 2834                 	sts pulse1_fx_0xy_sequence, zero //disable any 0xy effect
0013e7 9220 2835                 	sts pulse1_fx_0xy_sequence+1, zero
0013e9 936f                      	push r22 //only registers r16 - r23 can be used with mulsu
0013ea 937f                      	push r23
0013eb 2f6a                      	mov r22, r26 //store the rate into r22
0013ec eb72                      	ldi r23, 0b10110010 //store r23 with 11.125 note: this is the closest approximation to the 11.1746014718 multiplier we can get with 8 bits
0013ed 9f67                      	mul r22, r23
0013ee 917f                      	pop r23
0013ef 916f                      	pop r22
                                 
0013f0 9416                      	lsr r1 //shift out the fractional bits
0013f1 9407                      	ror r0
0013f2 9416                      	lsr r1
0013f3 9407                      	ror r0
0013f4 9416                      	lsr r1
0013f5 9407                      	ror r0
0013f6 9416                      	lsr r1
0013f7 9407                      	ror r0
0013f8 9200 2836                 	sts pulse1_fx_1xx, r0
0013fa 9210 2837                 	sts pulse1_fx_1xx+1, r1
0013fc cfb5                      	rjmp sound_driver_channel0_main
                                 
                                 //PITCH SLIDE DOWN
                                 sound_driver_channel0_fx_2xx:
0013fd 9220 2836                 	sts pulse1_fx_1xx, zero //turn off any 1xx pitch slide down
0013ff 9220 2837                 	sts pulse1_fx_1xx+1, zero
001401 9220 2834                 	sts pulse1_fx_0xy_sequence, zero //disable any 0xy effect
001403 9220 2835                 	sts pulse1_fx_0xy_sequence+1, zero
001405 936f                      	push r22 //only registers r16 - r23 can be used with mulsu
001406 937f                      	push r23
001407 2f6a                      	mov r22, r26 //store the rate into r22
001408 eb72                      	ldi r23, 0b10110010 //store r23 with 11.125 note: this is the closest approximation to the 11.1746014718 multiplier we can get with 8 bits
001409 9f67                      	mul r22, r23
00140a 917f                      	pop r23
00140b 916f                      	pop r22
                                 
00140c 9416                      	lsr r1 //shift out the fractional bits
00140d 9407                      	ror r0
00140e 9416                      	lsr r1
00140f 9407                      	ror r0
001410 9416                      	lsr r1
001411 9407                      	ror r0
001412 9416                      	lsr r1
001413 9407                      	ror r0
001414 9200 283a                 	sts pulse1_fx_2xx, r0
001416 9210 283b                 	sts pulse1_fx_2xx+1, r1
001418 cf99                      	rjmp sound_driver_channel0_main
                                 
                                 //AUTOMATIC PORTAMENTO
                                 sound_driver_channel0_fx_3xx:
001419 936f                      	push r22 //only registers r16 - r23 can be used with mulsu
00141a 937f                      	push r23
00141b 2f6a                      	mov r22, r26 //store the rate into r22
00141c eb72                      	ldi r23, 0b10110010 //store r23 with 11.125 note: this is the closest approximation to the 11.1746014718 multiplier we can get with 8 bits
00141d 9f67                      	mul r22, r23
00141e 917f                      	pop r23
00141f 916f                      	pop r22
                                 
001420 9416                      	lsr r1 //shift out the fractional bits
001421 9407                      	ror r0
001422 9416                      	lsr r1
001423 9407                      	ror r0
001424 9416                      	lsr r1
001425 9407                      	ror r0
001426 9416                      	lsr r1
001427 9407                      	ror r0
001428 9200 2842                 	sts pulse1_fx_3xx_speed, r0
00142a 9210 2843                 	sts pulse1_fx_3xx_speed+1, r1
                                 
00142c 11a2                      	cpse r26, zero //check if the effect was enabled or disabled
00142d c001                      	rjmp sound_driver_channel0_fx_3xx_enabled
00142e cf83                      	rjmp sound_driver_channel0_main
                                 
                                 sound_driver_channel0_fx_3xx_enabled:
00142f 91a0 0a8c                 	lds r26, TCB0_CCMPL //if the 3xx effect is enabled, we need to store the current timer period
001431 91b0 0a8d                 	lds r27, TCB0_CCMPH
001433 93a0 283e                 	sts pulse1_fx_3xx_start, r26
001435 93b0 283f                 	sts pulse1_fx_3xx_start+1, r27
                                 
001437 9220 2844                 	sts pulse1_fx_3xx_total_offset, zero
001439 9220 2845                 	sts pulse1_fx_3xx_total_offset+1, zero
00143b cf76                      	rjmp sound_driver_channel0_main
                                 
                                 //VIBRATO
                                 sound_driver_channel0_fx_4xy:
00143c 2fba                      	mov r27, r26
00143d 7fa0                      	andi r26, 0xF0 //mask r26 for x, the speed param
00143e 95a2                      	swap r26
00143f 70bf                      	andi r27, 0x0F //mask r27 for y, the depth param
001440 93a0 2846                 	sts pulse1_fx_4xy_speed, r26
001442 93b0 2847                 	sts pulse1_fx_4xy_depth, r27
001444 9220 2848                 	sts pulse1_fx_4xy_phase, zero //reset the phase to 0
001446 cf6b                      	rjmp sound_driver_channel0_main
                                 
                                 //TREMELO
                                 sound_driver_channel0_fx_7xy:
001447 2fba                      	mov r27, r26
001448 7fa0                      	andi r26, 0xF0 //mask r26 for x, the speed param
001449 95a2                      	swap r26
00144a 70bf                      	andi r27, 0x0F //mask r27 for y, the depth param
00144b 93a0 2849                 	sts pulse1_fx_7xy_speed, r26
00144d 93b0 284a                 	sts pulse1_fx_7xy_depth, r27
00144f 9220 284b                 	sts pulse1_fx_7xy_phase, zero //reset the phase to 0
001451 9220 284c                 	sts pulse1_fx_7xy_value, zero //reset the tremelo value
001453 cf5e                      	rjmp sound_driver_channel0_main
                                 
                                 //VOLUME SLIDE
                                 sound_driver_channel0_fx_Axy:
001454 93a0 284d                 	sts pulse1_fx_Axy, r26
001456 cf5b                      	rjmp sound_driver_channel0_main
                                 
                                 //FRAME JUMP
                                 sound_driver_channel0_fx_Bxx:
001457 93a0 280f                 	sts song_fx_Bxx, r26 //NOTE: a Bxx value of FF won't be detected since FF is used to indicate that the flag is disabled
001459 cf58                      	rjmp sound_driver_channel0_main
                                 
                                 //HALT
                                 sound_driver_channel0_fx_Cxx:
00145a 93b0 2810                 	sts song_fx_Cxx, r27 //NOTE: the value stored doesn't mean anything. we only need to check that it is non-zero
00145c cf55                      	rjmp sound_driver_channel0_main
                                 
                                 //FRAME SKIP
                                 sound_driver_channel0_fx_Dxx:
00145d 93b0 2811                 	sts song_fx_Dxx, r27 //NOTE: the value stored doesn't mean anything. we only need to check that it is non-zero
00145f cf52                      	rjmp sound_driver_channel0_main
                                 
                                 //VOLUME
                                 sound_driver_channel0_fx_Exx:
001460 91b0 2800                 	lds r27, pulse1_param
001462 7fb0                      	andi r27, 0xF0 //clear previous VVVV volume bits
001463 2bba                      	or r27, r26 //move new VVVV bits into pulse1_param
001464 93b0 2800                 	sts pulse1_param, r27
001466 6096                      	sbr channel_flags, 6
001467 cf4a                      	rjmp sound_driver_channel0_main
                                 
                                 //SPEED AND TEMPO
                                 sound_driver_channel0_fx_Fxx:
001468 93a0 280e                 	sts song_speed, r26 //NOTE: only changes to speed are supported
00146a cf47                      	rjmp sound_driver_channel0_main
                                 
                                 //DELAY
                                 sound_driver_channel0_fx_Gxx:
00146b 93a0 284e                 	sts pulse1_fx_Gxx_pre, r26 //NOTE: to be processed in the sound driver delay routine
00146d cf44                      	rjmp sound_driver_channel0_main
                                 
                                 sound_driver_channel0_fx_Hxy: //hardware sweep up
00146e 95a2                      	swap r26
00146f 68a8                      	ori r26, 0b10001000 //enable negate and enable sweep flag
001470 2efa                      	mov pulse1_sweep, r26
001471 92f0 2801                 	sts pulse1_sweep_param, pulse1_sweep
001473 6097                      	sbr channel_flags, 7 //set reload flag
001474 cf3d                      	rjmp sound_driver_channel0_main
                                 
                                 sound_driver_channel0_fx_Ixy: //hardware sweep down
001475 95a2                      	swap r26
001476 77af                      	andi r26, 0b01111111 //disable negate flag
001477 60a8                      	ori r26, 0b00001000 //enable sweep flag
001478 2efa                      	mov pulse1_sweep, r26
001479 92f0 2801                 	sts pulse1_sweep_param, pulse1_sweep
00147b 6097                      	sbr channel_flags, 7 //set reload flag
00147c cf35                      	rjmp sound_driver_channel0_main
                                 
                                 sound_driver_channel0_fx_Hxx: //FDS modulation depth
00147d cf34                      	rjmp sound_driver_channel0_main
                                 sound_driver_channel0_fx_Ixx: //FDS modulation speed
00147e cf33                      	rjmp sound_driver_channel0_main
                                 
                                 //FINE PITCH
                                 sound_driver_channel0_fx_Pxx:
00147f 93a0 2850                 	sts pulse1_fx_Pxx, r26
001481 cf30                      	rjmp sound_driver_channel0_main
                                 
                                 //NOTE SLIDE UP
                                 sound_driver_channel0_fx_Qxy:
                                 sound_driver_channel0_fx_Qxy_check_arpeggio_macro:
001482 91e0 281d                 	lds ZL, pulse1_arpeggio_macro
001484 91f0 281e                 	lds ZH, pulse1_arpeggio_macro+1
001486 9630                      	adiw Z, 0
001487 f009                      	breq sound_driver_channel0_fx_Qxy_check_pitch_macro
001488 cf29                      	rjmp sound_driver_channel0_main //if there is an arpeggio macro, don't enable the effect
                                 
                                 sound_driver_channel0_fx_Qxy_check_pitch_macro:
001489 91e0 2824                 	lds ZL, pulse1_pitch_macro
00148b 91f0 2825                 	lds ZH, pulse1_pitch_macro+1
00148d 9630                      	adiw Z, 0
00148e f009                      	breq sound_driver_channel0_fx_Qxy_check_hi_pitch_macro
00148f cf22                      	rjmp sound_driver_channel0_main //if there is a pitch macro, don't enable the effect
                                 
                                 sound_driver_channel0_fx_Qxy_check_hi_pitch_macro:
001490 91e0 282a                 	lds ZL, pulse1_hi_pitch_macro
001492 91f0 282b                 	lds ZH, pulse1_hi_pitch_macro+1
001494 9630                      	adiw Z, 0
001495 f009                      	breq sound_driver_channel0_fx_Qxy_process
001496 cf1b                      	rjmp sound_driver_channel0_main //if there is a pitch macro, don't enable the effect
                                 
                                 sound_driver_channel0_fx_Qxy_process:
001497 2fba                      	mov r27, r26 //copy fx parameters into r27
001498 70bf                      	andi r27, 0x0F //mask note index offset
001499 91c0 2807                 	lds r28, pulse1_note //load current note index
00149b 0fbc                      	add r27, r28
00149c 35b7                      	cpi r27, 0x57 //largest possible note index is 0x56
00149d f008                      	brlo sound_driver_channel0_fx_Qxy_process_continue
00149e e5b6                      	ldi r27, 0x56 //if the target note was larger than the highest possible note index, keep the target at 0x56
                                 
                                 sound_driver_channel0_fx_Qxy_process_continue:
00149f e3e4                      	ldi ZL, LOW(note_table << 1) //load in note table
0014a0 e0f0                      	ldi ZH, HIGH(note_table << 1)
0014a1 0fbb                      	lsl r27 //double the offset for the note table because we are getting byte data
0014a2 0feb                      	add ZL, r27 //add offset
0014a3 1df2                      	adc ZH, zero
0014a4 91c5                      	lpm r28, Z+ //load bytes
0014a5 91d4                      	lpm r29, Z
0014a6 93c0 2851                 	sts pulse1_fx_Qxy_target, r28 //load the LOW bits for the target period
0014a8 93d0 2852                 	sts pulse1_fx_Qxy_target+1, r29 //load the HIGH bits for the target period
                                 
0014aa 95a2                      	swap r26
0014ab 70af                      	andi r26, 0x0F //mask effect speed
0014ac 0faa                      	lsl r26 //multiply the speed by 2 NOTE: formula for the speed is 2x+1
0014ad 95a3                      	inc r26 //increment the speed by 1
                                 
0014ae 936f                      	push r22 //only registers r16 - r23 can be used with mulsu
0014af 937f                      	push r23
0014b0 2f6a                      	mov r22, r26 //store the speed data into r27
0014b1 eb72                      	ldi r23, 0b10110010 //store r23 with 11.125 note: this is the closest approximation to the 11.1746014718 multiplier we can get with 8 bits
0014b2 9f67                      	mul r22, r23
0014b3 917f                      	pop r23
0014b4 916f                      	pop r22
                                 
0014b5 9416                      	lsr r1 //shift out the fractional bits
0014b6 9407                      	ror r0
0014b7 9416                      	lsr r1
0014b8 9407                      	ror r0
0014b9 9416                      	lsr r1
0014ba 9407                      	ror r0
0014bb 9416                      	lsr r1
0014bc 9407                      	ror r0
                                 
0014bd 9200 2853                 	sts pulse1_fx_Qxy_speed, r0 //store the effect speed
0014bf 9210 2854                 	sts pulse1_fx_Qxy_speed+1, r1
0014c1 9220 2855                 	sts pulse1_fx_Qxy_total_offset, zero
0014c3 9220 2856                 	sts pulse1_fx_Qxy_total_offset+1, zero
0014c5 ceec                      	rjmp sound_driver_channel0_main
                                 
                                 //NOTE SLIDE DOWN
                                 sound_driver_channel0_fx_Rxy:
                                 sound_driver_channel0_fx_Rxy_check_arpeggio_macro:
0014c6 91e0 281d                 	lds ZL, pulse1_arpeggio_macro
0014c8 91f0 281e                 	lds ZH, pulse1_arpeggio_macro+1
0014ca 9630                      	adiw Z, 0
0014cb f009                      	breq sound_driver_channel0_fx_Rxy_check_pitch_macro
0014cc cee5                      	rjmp sound_driver_channel0_main //if there is an arpeggio macro, don't enable the effect
                                 
                                 sound_driver_channel0_fx_Rxy_check_pitch_macro:
0014cd 91e0 2824                 	lds ZL, pulse1_pitch_macro
0014cf 91f0 2825                 	lds ZH, pulse1_pitch_macro+1
0014d1 9630                      	adiw Z, 0
0014d2 f009                      	breq sound_driver_channel0_fx_Rxy_check_hi_pitch_macro
0014d3 cede                      	rjmp sound_driver_channel0_main //if there is a pitch macro, don't enable the effect
                                 
                                 sound_driver_channel0_fx_Rxy_check_hi_pitch_macro:
0014d4 91e0 282a                 	lds ZL, pulse1_hi_pitch_macro
0014d6 91f0 282b                 	lds ZH, pulse1_hi_pitch_macro+1
0014d8 9630                      	adiw Z, 0
0014d9 f009                      	breq sound_driver_channel0_fx_Rxy_process
0014da ced7                      	rjmp sound_driver_channel0_main //if there is a pitch macro, don't enable the effect
                                 
                                 sound_driver_channel0_fx_Rxy_process:
0014db 2fba                      	mov r27, r26 //copy fx parameters into r27
0014dc 70bf                      	andi r27, 0x0F //mask note index offset
0014dd 91c0 2807                 	lds r28, pulse1_note //load current note index
0014df 1bcb                      	sub r28, r27
0014e0 f408                      	brcc sound_driver_channel0_fx_Rxy_process_continue
0014e1 e0c0                      	ldi r28, 0x00
                                 
                                 sound_driver_channel0_fx_Rxy_process_continue:
0014e2 e3e4                      	ldi ZL, LOW(note_table << 1) //load in note table
0014e3 e0f0                      	ldi ZH, HIGH(note_table << 1)
0014e4 0fcc                      	lsl r28 //double the offset for the note table because we are getting byte data
0014e5 0fec                      	add ZL, r28 //add offset
0014e6 1df2                      	adc ZH, zero
0014e7 91c5                      	lpm r28, Z+ //load bytes
0014e8 91d4                      	lpm r29, Z
0014e9 93c0 2857                 	sts pulse1_fx_Rxy_target, r28 //load the LOW bits for the target period
0014eb 93d0 2858                 	sts pulse1_fx_Rxy_target+1, r29 //load the HIGH bits for the target period
                                 
0014ed 95a2                      	swap r26
0014ee 70af                      	andi r26, 0x0F //mask effect speed
0014ef 0faa                      	lsl r26 //multiply the speed by 2 NOTE: formula for the speed is 2x+1
0014f0 95a3                      	inc r26 //increment the speed by 1
                                 
0014f1 936f                      	push r22 //only registers r16 - r23 can be used with mulsu
0014f2 937f                      	push r23
0014f3 2f6a                      	mov r22, r26 //store the speed data into r27
0014f4 eb72                      	ldi r23, 0b10110010 //store r23 with 11.125 note: this is the closest approximation to the 11.1746014718 multiplier we can get with 8 bits
0014f5 9f67                      	mul r22, r23
0014f6 917f                      	pop r23
0014f7 916f                      	pop r22
                                 
0014f8 9416                      	lsr r1 //shift out the fractional bits
0014f9 9407                      	ror r0
0014fa 9416                      	lsr r1
0014fb 9407                      	ror r0
0014fc 9416                      	lsr r1
0014fd 9407                      	ror r0
0014fe 9416                      	lsr r1
0014ff 9407                      	ror r0
                                 
001500 9200 2859                 	sts pulse1_fx_Rxy_speed, r0 //store the effect speed
001502 9210 285a                 	sts pulse1_fx_Rxy_speed+1, r1
001504 9220 285b                 	sts pulse1_fx_Rxy_total_offset, zero
001506 9220 285c                 	sts pulse1_fx_Rxy_total_offset+1, zero
001508 cea9                      	rjmp sound_driver_channel0_main
                                 
                                 //MUTE DELAY
                                 sound_driver_channel0_fx_Sxx:
001509 93a0 285d                 	sts pulse1_fx_Sxx_pre, r26
00150b cea6                      	rjmp sound_driver_channel0_main
                                 
                                 //DUTY
                                 sound_driver_channel0_fx_Vxx:
00150c ede2                      	ldi ZL, LOW(sequences << 1) //point Z to sequence table
00150d e3f4                      	ldi ZH, HIGH(sequences << 1)
00150e 0fea                      	add ZL, r26 //offset the pointer
00150f 1df2                      	adc ZH, zero
                                 
001510 95a6                      	lsr r26 //move the duty cycle bits to the 2 MSB for pulse1_param (register $4000)
001511 95a7                      	ror r26
001512 95a7                      	ror r26
001513 91b0 2800                 	lds r27, pulse1_param //load r27 with pulse1_param (register $4000)
001515 2fcb                      	mov r28, r27 //store a copy of pulse1_param into r28
001516 7cb0                      	andi r27, 0b11000000 //mask the duty cycle bits
001517 13ab                      	cpse r26, r27 //check if the previous duty cycle and the new duty cycle are equal
001518 c001                      	rjmp sound_driver_channel0_fx_Vxx_store
001519 ce98                      	rjmp sound_driver_channel0_main //if the previous and new duty cycle are the same, don't reload the sequence
                                 
                                 sound_driver_channel0_fx_Vxx_store:
00151a 90d4                      	lpm pulse1_sequence, Z //store the sequence
                                 
00151b 73cf                      	andi r28, 0b00111111 //mask out the duty cycle bits
00151c 2bcb                      	or r28, r27 //store the new duty cycle bits into r27
00151d 93c0 2800                 	sts pulse1_param, r28
00151f ce92                      	rjmp sound_driver_channel0_main
                                 
                                 sound_driver_channel0_fx_Wxx: //DPCM sample speed
001520 ce91                      	rjmp sound_driver_channel0_main
                                 sound_driver_channel0_fx_Xxx: //DPCM sample retrigger
001521 ce90                      	rjmp sound_driver_channel0_main
                                 sound_driver_channel0_fx_Yxx: //DPCM sample offset
001522 ce8f                      	rjmp sound_driver_channel0_main
                                 sound_driver_channel0_fx_Zxx: //DPCM sample delta counter
001523 ce8e                      	rjmp sound_driver_channel0_main
                                 
                                 
                                 sound_driver_channel0_note:
001524 93b0 2807                 	sts pulse1_note, r27 //store the note index
001526 e0a3                      	ldi r26, 0x03
001527 e0b2                      	ldi r27, 0x02
001528 93b0 281a                 	sts pulse1_volume_macro_offset, r27 //reset all macro offsets
00152a 93a0 281f                 	sts pulse1_arpeggio_macro_offset, r26
00152c 93b0 2826                 	sts pulse1_pitch_macro_offset, r27
00152e 93b0 282c                 	sts pulse1_hi_pitch_macro_offset, r27
001530 93b0 2831                 	sts pulse1_duty_macro_offset, r27
001532 9220 2823                 	sts pulse1_total_pitch_offset, zero //reset the pitch and hi pitch offset
001534 9220 2829                 	sts pulse1_total_hi_pitch_offset, zero
001536 9220 2838                 	sts pulse1_fx_1xx_total, zero //reset the total for 1xx and 2xx effects
001538 9220 2839                 	sts pulse1_fx_1xx_total+1, zero
00153a 9220 283c                 	sts pulse1_fx_2xx_total, zero
00153c 9220 283d                 	sts pulse1_fx_2xx_total+1, zero
00153e 9220 2844                 	sts pulse1_fx_3xx_total_offset, zero //reset 3xx offset
001540 9220 2845                 	sts pulse1_fx_3xx_total_offset+1, zero
001542 91a0 0a8c                 	lds r26, TCB0_CCMPL //if the 3xx effect is enabled, we need to store the current timer period
001544 91b0 0a8d                 	lds r27, TCB0_CCMPH
001546 93a0 283e                 	sts pulse1_fx_3xx_start, r26
001548 93b0 283f                 	sts pulse1_fx_3xx_start+1, r27
00154a 9220 2801                 	sts pulse1_sweep_param, zero //reset any sweep effect
00154c 6097                      	sbr channel_flags, 7 //set reload flag
00154d 9220 2851                 	sts pulse1_fx_Qxy_target, zero //reset the Qxy, Rxy effects
00154f 9220 2852                 	sts pulse1_fx_Qxy_target+1, zero
001551 9220 2855                 	sts pulse1_fx_Qxy_total_offset, zero
001553 9220 2856                 	sts pulse1_fx_Qxy_total_offset+1, zero
001555 9220 2857                 	sts pulse1_fx_Rxy_target, zero
001557 9220 2858                 	sts pulse1_fx_Rxy_target+1, zero
001559 9220 285b                 	sts pulse1_fx_Rxy_total_offset, zero
00155b 9220 285c                 	sts pulse1_fx_Rxy_total_offset+1, zero
00155d d0fb                      	rcall sound_driver_channel0_increment_offset
00155e ce53                      	rjmp sound_driver_channel0_main
                                 
                                 
                                 
                                 sound_driver_channel0_volume:
00155f 55b7                      	subi r27, 0x57 //NOTE: the delay values are offset by the highest volume value, which is 0x56
001560 91a0 2800                 	lds r26, pulse1_param
001562 7fa0                      	andi r26, 0xF0 //clear previous VVVV volume bits
001563 2bab                      	or r26, r27 //move new VVVV bits into pulse1_param
001564 93a0 2800                 	sts pulse1_param, r26
001566 6096                      	sbr channel_flags, 6
001567 d0f1                      	rcall sound_driver_channel0_increment_offset
001568 ce49                      	rjmp sound_driver_channel0_main
                                 
                                 
                                 
                                 sound_driver_channel0_delay:
001569 56b7                      	subi r27, 0x67 //NOTE: the delay values are offset by the highest volume value, which is 0x66
00156a 93b0 2814                 	sts pulse1_pattern_delay, r27
00156c d0ec                      	rcall sound_driver_channel0_increment_offset
00156d c0ff                      	rjmp sound_driver_calculate_delays
                                 
                                 
                                 
                                 sound_driver_channel0_instrument_change:
00156e 9220 2818                 	sts pulse1_volume_macro, zero //reset all macro addresses
001570 9220 2819                 	sts pulse1_volume_macro+1, zero
001572 9220 281d                 	sts pulse1_arpeggio_macro, zero
001574 9220 281e                 	sts pulse1_arpeggio_macro+1, zero
001576 9220 2824                 	sts pulse1_pitch_macro, zero
001578 9220 2825                 	sts pulse1_pitch_macro+1, zero
00157a 9220 282a                 	sts pulse1_hi_pitch_macro, zero
00157c 9220 282b                 	sts pulse1_hi_pitch_macro+1, zero
00157e 9220 282f                 	sts pulse1_duty_macro, zero
001580 9220 2830                 	sts pulse1_duty_macro+1, zero
001582 9220 2823                 	sts pulse1_total_pitch_offset, zero //reset the pitch offset
001584 9220 2829                 	sts pulse1_total_hi_pitch_offset, zero //reset the hi pitch offset
                                 
001586 9631                      	adiw Z, 1 //point to the byte next to the flag
001587 91b4                      	lpm r27, Z //store the instrument offset into r27
001588 ebe3                      	ldi ZL, LOW(instruments) //point Z to instruments table
001589 e0ff                      	ldi ZH, HIGH(instruments)
00158a 0feb                      	add ZL, r27 //point Z to offsetted instrument
00158b 1df2                      	adc ZH, zero
00158c 0fee                      	lsl ZL //multiply by 2 to make Z into a byte pointer for the instrument's address
00158d 1fff                      	rol ZH
00158e 91a5                      	lpm r26, Z+ //r26:r27 now points to the instrument
00158f 91b4                      	lpm r27, Z
                                 
001590 0faa                      	lsl r26 //multiply by 2 to make r26:r27 into a byte pointer for the instrument's data
001591 1fbb                      	rol r27
001592 2fea                      	mov ZL, r26
001593 2ffb                      	mov ZH, r27
001594 91b4                      	lpm r27, Z //get macro header byte. NOTE: Each macro type for each intrument is represented by a bit in this byte. 1 indicates that the instrument uses a macro of it's corresponding type.
001595 9632                      	adiw Z, 2 //point Z to the address of the macro
001596 e0a6                      	ldi r26, 6 //(6-1) = 5 for the 5 different macro types. NOTE: bit 0 = volume, bit 1 = arpeggio, bit 2 = pitch, bit 3 = hi pitch, bit 4 = duty
                                 sound_driver_channel0_instrument_change_macro_loop:
001597 95aa                      	dec r26
001598 f019                      	breq sound_driver_channel0_instrument_change_exit
001599 95b6                      	lsr r27
00159a f078                      	brcs sound_driver_channel0_instrument_change_load_macro
00159b cffb                      	rjmp sound_driver_channel0_instrument_change_macro_loop
                                 
                                 
                                 
                                 sound_driver_channel0_instrument_change_exit:
00159c e0a3                      	ldi r26, 0x03
00159d e0b2                      	ldi r27, 0x02
00159e 93b0 281a                 	sts pulse1_volume_macro_offset, r27 //reset all macro offsets
0015a0 93a0 281f                 	sts pulse1_arpeggio_macro_offset, r26
0015a2 93b0 2826                 	sts pulse1_pitch_macro_offset, r27
0015a4 93b0 282c                 	sts pulse1_hi_pitch_macro_offset, r27
0015a6 93b0 2831                 	sts pulse1_duty_macro_offset, r27
0015a8 d0ba                      	rcall sound_driver_channel0_increment_offset_twice
0015a9 ce08                      	rjmp sound_driver_channel0_main
                                 
                                 
                                 
                                 sound_driver_channel0_instrument_change_load_macro:
0015aa 91c5                      	lpm r28, Z+ //r28:r29 now point to the macro
0015ab 91d5                      	lpm r29, Z+
                                 
0015ac 30a5                      	cpi r26, 5
0015ad f039                      	breq sound_driver_channel0_instrument_change_load_macro_volume
0015ae 30a4                      	cpi r26, 4
0015af f079                      	breq sound_driver_channel0_instrument_change_load_macro_arpeggio
0015b0 30a3                      	cpi r26, 3
0015b1 f0d9                      	breq sound_driver_channel0_instrument_change_load_macro_pitch
0015b2 30a2                      	cpi r26, 2
0015b3 f159                      	breq sound_driver_channel0_instrument_change_load_macro_hi_pitch
0015b4 c03c                      	rjmp sound_driver_channel0_instrument_change_load_macro_duty
                                 
                                 sound_driver_channel0_instrument_change_load_macro_volume:
0015b5 93c0 2818                 	sts pulse1_volume_macro, r28
0015b7 93d0 2819                 	sts pulse1_volume_macro+1, r29
0015b9 d041                      	rcall sound_driver_channel0_instrument_change_read_header
0015ba 93c0 281c                 	sts pulse1_volume_macro_release, r28
0015bc 93d0 281b                 	sts pulse1_volume_macro_loop, r29
0015be cfd8                      	rjmp sound_driver_channel0_instrument_change_macro_loop
                                 	
                                 sound_driver_channel0_instrument_change_load_macro_arpeggio:
0015bf 93c0 281d                 	sts pulse1_arpeggio_macro, r28
0015c1 93d0 281e                 	sts pulse1_arpeggio_macro+1, r29
0015c3 9220 2851                 	sts pulse1_fx_Qxy_target, zero //reset the Qxy, Rxy effects
0015c5 9220 2852                 	sts pulse1_fx_Qxy_target+1, zero
0015c7 9220 2857                 	sts pulse1_fx_Rxy_target, zero
0015c9 9220 2858                 	sts pulse1_fx_Rxy_target+1, zero
0015cb d03a                      	rcall sound_driver_channel0_instrument_change_read_header_arpeggio
0015cc cfca                      	rjmp sound_driver_channel0_instrument_change_macro_loop
                                 
                                 sound_driver_channel0_instrument_change_load_macro_pitch:
0015cd 93c0 2824                 	sts pulse1_pitch_macro, r28
0015cf 93d0 2825                 	sts pulse1_pitch_macro+1, r29
0015d1 9220 2851                 	sts pulse1_fx_Qxy_target, zero //reset the Qxy, Rxy effects
0015d3 9220 2852                 	sts pulse1_fx_Qxy_target+1, zero
0015d5 9220 2857                 	sts pulse1_fx_Rxy_target, zero
0015d7 9220 2858                 	sts pulse1_fx_Rxy_target+1, zero
0015d9 d021                      	rcall sound_driver_channel0_instrument_change_read_header
0015da 93c0 2828                 	sts pulse1_pitch_macro_release, r28
0015dc 93d0 2827                 	sts pulse1_pitch_macro_loop, r29
0015de cfb8                      	rjmp sound_driver_channel0_instrument_change_macro_loop
                                 
                                 sound_driver_channel0_instrument_change_load_macro_hi_pitch:
0015df 93c0 282a                 	sts pulse1_hi_pitch_macro, r28
0015e1 93d0 282b                 	sts pulse1_hi_pitch_macro+1, r29
0015e3 9220 2851                 	sts pulse1_fx_Qxy_target, zero //reset the Qxy, Rxy effects
0015e5 9220 2852                 	sts pulse1_fx_Qxy_target+1, zero
0015e7 9220 2857                 	sts pulse1_fx_Rxy_target, zero
0015e9 9220 2858                 	sts pulse1_fx_Rxy_target+1, zero
0015eb d00f                      	rcall sound_driver_channel0_instrument_change_read_header
0015ec 93c0 282e                 	sts pulse1_hi_pitch_macro_release, r28
0015ee 93d0 282d                 	sts pulse1_hi_pitch_macro_loop, r29
0015f0 cfa6                      	rjmp sound_driver_channel0_instrument_change_macro_loop
                                 
                                 sound_driver_channel0_instrument_change_load_macro_duty:
0015f1 93c0 282f                 	sts pulse1_duty_macro, r28
0015f3 93d0 2830                 	sts pulse1_duty_macro+1, r29
0015f5 d005                      	rcall sound_driver_channel0_instrument_change_read_header
0015f6 93c0 2833                 	sts pulse1_duty_macro_release, r28
0015f8 93d0 2832                 	sts pulse1_duty_macro_loop, r29
0015fa cf9c                      	rjmp sound_driver_channel0_instrument_change_macro_loop
                                 
                                 
                                 
                                 sound_driver_channel0_instrument_change_read_header:
0015fb 93ef                      	push ZL
0015fc 93ff                      	push ZH
0015fd 2fec                      	mov ZL, r28
0015fe 2ffd                      	mov ZH, r29
0015ff 0fee                      	lsl ZL
001600 1fff                      	rol ZH
001601 91c5                      	lpm r28, Z+
001602 91d4                      	lpm r29, Z
001603 91ff                      	pop ZH
001604 91ef                      	pop ZL
001605 9508                      	ret
                                 
                                 sound_driver_channel0_instrument_change_read_header_arpeggio:
001606 93ef                      	push ZL
001607 93ff                      	push ZH
001608 2fec                      	mov ZL, r28
001609 2ffd                      	mov ZH, r29
00160a 0fee                      	lsl ZL
00160b 1fff                      	rol ZH
00160c 91c5                      	lpm r28, Z+
00160d 91d5                      	lpm r29, Z+
00160e 93c0 2821                 	sts pulse1_arpeggio_macro_release, r28
001610 93d0 2820                 	sts pulse1_arpeggio_macro_loop, r29
001612 91c4                      	lpm r28, Z
001613 93c0 2822                 	sts pulse1_arpeggio_macro_mode, r28
001615 91ff                      	pop ZH
001616 91ef                      	pop ZL
001617 9508                      	ret
                                 
                                 
                                 
                                 sound_driver_channel0_release:
                                 sound_driver_channel0_release_volume:
001618 91b0 281c                 	lds r27, pulse1_volume_macro_release
00161a 3fbf                      	cpi r27, 0xFF //check if volume macro has a release flag
00161b f019                      	breq sound_driver_channel0_release_arpeggio //if the macro has no release flag, check the next macro
00161c 95b3                      	inc r27
00161d 93b0 281a                 	sts pulse1_volume_macro_offset, r27 //adjust offset so that it starts after the release flag index
                                 sound_driver_channel0_release_arpeggio:
00161f 91b0 2821                 	lds r27, pulse1_arpeggio_macro_release
001621 3fbf                      	cpi r27, 0xFF //check if arpeggio macro has a release flag
001622 f019                      	breq sound_driver_channel0_release_pitch
001623 95b3                      	inc r27
001624 93b0 281f                 	sts pulse1_arpeggio_macro_offset, r27
                                 sound_driver_channel0_release_pitch:
001626 91b0 2828                 	lds r27, pulse1_pitch_macro_release
001628 3fbf                      	cpi r27, 0xFF //check if pitch macro has a release flag
001629 f019                      	breq sound_driver_channel0_release_hi_pitch
00162a 95b3                      	inc r27
00162b 93b0 2826                 	sts pulse1_pitch_macro_offset, r27
                                 sound_driver_channel0_release_hi_pitch:
00162d 91b0 282e                 	lds r27, pulse1_hi_pitch_macro_release
00162f 3fbf                      	cpi r27, 0xFF //check if hi_pitch macro has a release flag
001630 f019                      	breq sound_driver_channel0_release_duty
001631 95b3                      	inc r27
001632 93b0 282c                 	sts pulse1_hi_pitch_macro_offset, r27
                                 sound_driver_channel0_release_duty:
001634 91b0 2833                 	lds r27, pulse1_duty_macro_release
001636 3fbf                      	cpi r27, 0xFF //check if duty macro has a release flag
001637 f019                      	breq sound_driver_channel0_release_exit
001638 95b3                      	inc r27
001639 93b0 2831                 	sts pulse1_duty_macro_offset, r27
                                 sound_driver_channel0_release_exit:
00163b d01d                      	rcall sound_driver_channel0_increment_offset
00163c cd75                      	rjmp sound_driver_channel0_main
                                 
                                 
                                 
                                 sound_driver_channel0_next_pattern:
00163d 91e0 2808                 	lds ZL, song_frames
00163f 91f0 2809                 	lds ZH, song_frames+1
001641 91a0 280a                 	lds r26, song_frame_offset //we must offset to the appropriate channel
001643 91b0 280b                 	lds r27, song_frame_offset+1
001645 961a                      	adiw r27:r26, 10 //increment the frame offset by (5*2 = 10) since there are 5 channel patterns per frame. We *2 because we are getting byte values from the table
001646 93a0 280a                 	sts song_frame_offset, r26
001648 93b0 280b                 	sts song_frame_offset+1, r27
                                 	//adiw r27:r26, 2 //offset for channel 1 (test)
00164a 0fea                      	add ZL, r26
00164b 1ffb                      	adc ZH, r27
                                 
00164c 91a5                      	lpm r26, Z+ //load the address of the next pattern
00164d 91b4                      	lpm r27, Z
00164e 0faa                      	lsl r26
00164f 1fbb                      	rol r27
001650 93a0 2812                 	sts pulse1_pattern, r26
001652 93b0 2813                 	sts pulse1_pattern+1, r27
                                 
001654 9220 2816                 	sts pulse1_pattern_offset, zero //restart the pattern offset back to 0 because we are reading from a new pattern now
001656 9220 2817                 	sts pulse1_pattern_offset+1, zero
001658 cd59                      	rjmp sound_driver_channel0_main
                                 
                                 
                                 
                                 sound_driver_channel0_increment_offset:
001659 91e0 2816                 	lds ZL, pulse1_pattern_offset //current offset in the pattern for pulse 1
00165b 91f0 2817                 	lds ZH, pulse1_pattern_offset+1
00165d 9631                      	adiw Z, 1
00165e 93e0 2816                 	sts pulse1_pattern_offset, ZL
001660 93f0 2817                 	sts pulse1_pattern_offset+1, ZH
001662 9508                      	ret
                                 
                                 sound_driver_channel0_increment_offset_twice: //used for data that takes up 2 bytes worth of space
001663 91e0 2816                 	lds ZL, pulse1_pattern_offset //current offset in the pattern for pulse 1
001665 91f0 2817                 	lds ZH, pulse1_pattern_offset+1
001667 9632                      	adiw Z, 2 //increment the pointer twice
001668 93e0 2816                 	sts pulse1_pattern_offset, ZL
00166a 93f0 2817                 	sts pulse1_pattern_offset+1, ZH
00166c 9508                      	ret
                                 
                                 
                                 
                                 sound_driver_calculate_delays:
00166d 936f                      	push r22
00166e 937f                      	push r23
00166f 9160 280e                 	lds r22, song_speed
001671 2fa6                      	mov r26, r22
001672 50a1                      	subi r26, 1
001673 2fda                      	mov r29, r26
                                 
                                 sound_driver_calculate_delays_pulse1:
                                 sound_driver_calculate_delays_pulse1_Sxx:
001674 91b0 285d                 	lds r27, pulse1_fx_Sxx_pre
001676 91c0 285e                 	lds r28, pulse1_fx_Sxx_post
001678 9220 285d                  	sts pulse1_fx_Sxx_pre, zero
00167a 15b2                      	cp r27, zero
00167b f051                      	breq sound_driver_calculate_delays_pulse1_Sxx_post
00167c 17b6                      	cp r27, r22 //compare the Gxx fx to the song speed
00167d f440                      	brsh sound_driver_calculate_delays_pulse1_Sxx_post
00167e 93b0 2814                 	sts pulse1_pattern_delay, r27
001680 9220 2815                 	sts pulse1_pattern_delay+1, zero
001682 1bdb                      	sub r29, r27 //(song speed)-1-Sxx
001683 93d0 285e                 	sts pulse1_fx_Sxx_post, r29
001685 c026                      	rjmp sound_driver_calculate_delays_pulse2
                                 
                                 sound_driver_calculate_delays_pulse1_Sxx_post:
001686 15c2                      	cp r28, zero
001687 f021                      	breq sound_driver_calculate_delays_pulse1_Gxx
001688 9220 285e                 	sts pulse1_fx_Sxx_post, zero
00168a 2fac                      	mov r26, r28
00168b c00c                      	rjmp sound_driver_calculate_delays_pulse1_main
                                 
                                 sound_driver_calculate_delays_pulse1_Gxx:
00168c 91b0 284e                 	lds r27, pulse1_fx_Gxx_pre
00168e 91c0 284f                 	lds r28, pulse1_fx_Gxx_post
001690 17b6                      	cp r27, r22 //compare the Gxx fx to the song speed
001691 f018                      	brlo sound_driver_calculate_delays_pulse1_Gxx_post
001692 e0b0                      	ldi r27, 0 //if the Gxx effect exceeds one row (the song speed), then reset the effect to 0
001693 9220 284e                 	sts pulse1_fx_Gxx_pre, zero
                                 
                                 sound_driver_calculate_delays_pulse1_Gxx_post:
001695 15c2                      	cp r28, zero
001696 f009                      	breq sound_driver_calculate_delays_pulse1_main
001697 2fac                      	mov r26, r28 //if there was a Gxx, use its post instead of the (song speed)-1
                                 	
                                 sound_driver_calculate_delays_pulse1_main:
001698 9170 2814                 	lds r23, pulse1_pattern_delay
00169a 9f67                      	mul r22, r23
00169b 0e0a                      	add r0, r26
00169c 1c12                      	adc r1, zero
00169d 0e0b                      	add r0, r27
00169e 1c12                      	adc r1, zero
00169f 9200 2814                 	sts pulse1_pattern_delay, r0
0016a1 9210 2815                 	sts pulse1_pattern_delay+1, r1
0016a3 9220 284f                 	sts pulse1_fx_Gxx_post, zero
                                 
                                 sound_driver_calculate_delays_pulse1_Gxx_pre:
0016a5 15b2                      	cp r27, zero //check if the Gxx effect was enabled
0016a6 f029                      	breq sound_driver_calculate_delays_pulse2
0016a7 1bdb                      	sub r29, r27 //(song speed)-1-Gxx
0016a8 93a0 284f                 	sts pulse1_fx_Gxx_post, r26
0016aa 9220 284e                 	sts pulse1_fx_Gxx_pre, zero
                                 
                                 sound_driver_calculate_delays_pulse2:
                                 sound_driver_calculate_delays_pulse2_Gxx:
0016ac 917f                      	pop r23
0016ad 916f                      	pop r22
0016ae c006                      	rjmp sound_driver_instrument_routine
                                 
                                 
                                 
                                 sound_driver_channel0_decrement_frame_delay:
0016af 50a1                      	subi r26, 1
0016b0 09b2                      	sbc r27, zero
0016b1 93a0 2814                 	sts pulse1_pattern_delay, r26
0016b3 93b0 2815                 	sts pulse1_pattern_delay+1, r27
                                 
                                 
                                 
                                 sound_driver_instrument_routine:
                                 sound_driver_instrument_routine_channel0_volume:
0016b5 91e0 2818                 	lds ZL, pulse1_volume_macro
0016b7 91f0 2819                 	lds ZH, pulse1_volume_macro+1
0016b9 9630                      	adiw Z, 0
0016ba f1a1                      	breq sound_driver_instrument_routine_channel0_volume_default //if no volume macro is in use, use default multiplier of F
0016bb 0fee                      	lsl ZL //multiply by 2 to make Z into a byte pointer for the macro's address
0016bc 1fff                      	rol ZH
0016bd 91a0 281a                 	lds r26, pulse1_volume_macro_offset
0016bf 0fea                      	add ZL, r26
0016c0 1df2                      	adc ZH, zero
                                 
0016c1 91b0 281c                 	lds r27, pulse1_volume_macro_release
0016c3 17ba                      	cp r27, r26
0016c4 f429                      	brne sound_driver_instrument_routine_channel0_volume_increment //if the current offset is not equal to the release index, increment the offset
0016c5 91a0 281b                 	lds r26, pulse1_volume_macro_loop
0016c7 17ab                      	cp r26, r27 //check if loop flag exists NOTE: a loop flag and a release flag can only co-exist if the loop is less than the release
0016c8 f010                      	brlo sound_driver_instrument_routine_channel0_volume_increment+1 //if the current offset is equal to the release index and there is a loop, load the offset with the loop index, but also read the current index data
0016c9 c003                      	rjmp sound_driver_instrument_routine_channel0_volume_read //if the current offset is equal to the release index and there is no loop, then keep the offset unchanged
                                 
                                 sound_driver_instrument_routine_channel0_volume_increment:
0016ca 95a3                      	inc r26 //increment the macro offset
0016cb 93a0 281a                 	sts pulse1_volume_macro_offset, r26
                                 	
                                 sound_driver_instrument_routine_channel0_volume_read:
0016cd 91b4                      	lpm r27, Z //load volume data into r27
0016ce 3fbf                      	cpi r27, 0xFF //check for macro end flag
0016cf f469                      	brne sound_driver_instrument_routine_channel0_volume_calculate //if the data was not the macro end flag, calculate the volume
                                 
                                 
                                 
                                 sound_driver_instrument_routine_channel0_volume_macro_end_flag:
                                 sound_driver_instrument_routine_channel0_volume_macro_end_flag_check_release:
0016d0 91b0 281c                 	lds r27, pulse1_volume_macro_release
0016d2 3fbf                      	cpi r27, 0xFF
0016d3 f429                      	brne sound_driver_instrument_routine_channel0_volume_macro_end_flag_last_index //if there is a release flag, we don't need to loop. stay at the last valid index
                                 
                                 sound_driver_instrument_routine_channel0_volume_macro_end_flag_check_loop:
0016d4 91b0 281b                 	lds r27, pulse1_volume_macro_loop //load the loop index
0016d6 93b0 281a                 	sts pulse1_volume_macro_offset, r27 //store the loop index into the offset
0016d8 cfdc                      	rjmp sound_driver_instrument_routine_channel0_volume //go back and re-read the volume data
                                 
                                 sound_driver_instrument_routine_channel0_volume_macro_end_flag_last_index:
0016d9 50a2                      	subi r26, 2 //go back to last valid index NOTE: Since we increment the offset everytime we read data, we have to decrement twice. 1 to account for the increment and 1 for the end flag.
0016da 93a0 281a                 	sts pulse1_volume_macro_offset, r26
0016dc cfd8                      	rjmp sound_driver_instrument_routine_channel0_volume //go back and re-read the volume data
                                 
                                 
                                 
                                 sound_driver_instrument_routine_channel0_volume_calculate:
0016dd e0ea                      	ldi ZL, LOW(volumes << 1) //point Z to volume table
0016de e3f5                      	ldi ZH, HIGH(volumes << 1)
0016df 95b2                      	swap r27 //multiply the offset by 16 to move to the correct row in the volume table
0016e0 0feb                      	add ZL, r27 //add offset to the table
0016e1 1df2                      	adc ZH, zero
                                 
                                 sound_driver_instrument_routine_channel0_volume_load:
0016e2 91b0 2800                 	lds r27, pulse1_param //load main volume
0016e4 70bf                      	andi r27, 0x0F //mask for VVVV volume bits
                                 
0016e5 91a0 284c                 	lds r26, pulse1_fx_7xy_value
0016e7 30a0                      	cpi r26, 0x00
0016e8 f481                      	brne sound_driver_instrument_routine_channel0_volume_load_7xy
                                 
0016e9 0feb                      	add ZL, r27 //offset the volume table by the main volume
0016ea 1df2                      	adc ZH, zero
0016eb 91b4                      	lpm r27, Z
0016ec 93b0 2806                 	sts pulse1_output_volume, r27 //store the new output volume
0016ee c024                      	rjmp sound_driver_instrument_routine_channel0_arpeggio
                                 
                                 sound_driver_instrument_routine_channel0_volume_default:
0016ef 91b0 2800                 	lds r27, pulse1_param //a multiplier of F means in no change to the main volume, so we just copy the value into the output
0016f1 70bf                      	andi r27, 0x0F //mask for VVVV volume bits
                                 
0016f2 91a0 284c                 	lds r26, pulse1_fx_7xy_value
0016f4 30a0                      	cpi r26, 0x00
0016f5 f4a1                      	brne sound_driver_instrument_routine_channel0_volume_default_7xy
0016f6 93b0 2806                 	sts pulse1_output_volume, r27
0016f8 c01a                      	rjmp sound_driver_instrument_routine_channel0_arpeggio
                                 
                                 sound_driver_instrument_routine_channel0_volume_load_7xy:
0016f9 1bba                      	sub r27, r26 //subtract the volume by the tremelo value
0016fa f040                      	brcs sound_driver_instrument_routine_channel0_volume_load_7xy_overflow
0016fb f039                      	breq sound_driver_instrument_routine_channel0_volume_load_7xy_overflow
0016fc e0b1                      	ldi r27, 0x01 //if the subtraction resulted in a negative volume, cap it to 0x01
                                 
0016fd 0feb                      	add ZL, r27 //offset the volume table by the main volume
0016fe 1df2                      	adc ZH, zero
0016ff 91b4                      	lpm r27, Z
001700 93b0 2806                 	sts pulse1_output_volume, r27 //store the new output volume
001702 c010                      	rjmp sound_driver_instrument_routine_channel0_arpeggio
                                 
                                 sound_driver_instrument_routine_channel0_volume_load_7xy_overflow:
001703 e0b1                      	ldi r27, 0x01 //if the subtraction resulted in a negative volume, cap it to 0x01
001704 0feb                      	add ZL, r27 //offset the volume table by the main volume
001705 1df2                      	adc ZH, zero
001706 91b4                      	lpm r27, Z
001707 93b0 2806                 	sts pulse1_output_volume, r27 //store the new output volume
001709 c009                      	rjmp sound_driver_instrument_routine_channel0_arpeggio
                                 
                                 sound_driver_instrument_routine_channel0_volume_default_7xy:
00170a 1bba                      	sub r27, r26 //subtract the volume by the tremelo value
00170b f020                      	brcs sound_driver_instrument_routine_channel0_volume_default_7xy_overflow
00170c f019                      	breq sound_driver_instrument_routine_channel0_volume_default_7xy_overflow
00170d 93b0 2806                 	sts pulse1_output_volume, r27
00170f c003                      	rjmp sound_driver_instrument_routine_channel0_arpeggio
                                 	
                                 sound_driver_instrument_routine_channel0_volume_default_7xy_overflow:
001710 e0b1                      	ldi r27, 0x01 //if the subtraction resulted in a negative volume, cap it to 0x01
001711 93b0 2806                 	sts pulse1_output_volume, r27
                                 
                                 
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio:
                                 	//NOTE: The arpeggio macro routine is also in charge of actually setting the timers using the note stored in SRAM. The default routine is responsible for that in the case no arpeggio macro is used.
001713 91e0 281d                 	lds ZL, pulse1_arpeggio_macro
001715 91f0 281e                 	lds ZH, pulse1_arpeggio_macro+1
001717 9630                      	adiw Z, 0
001718 f1d9                      	breq sound_driver_instrument_routine_channel0_arpeggio_default //if no arpeggio macro is in use, go output the note without any offsets
001719 0fee                      	lsl ZL //multiply by 2 to make Z into a byte pointer for the macro's address
00171a 1fff                      	rol ZH
00171b 91a0 281f                 	lds r26, pulse1_arpeggio_macro_offset
00171d 0fea                      	add ZL, r26
00171e 1df2                      	adc ZH, zero
                                 
00171f 91b0 2821                 	lds r27, pulse1_arpeggio_macro_release
001721 17ba                      	cp r27, r26
001722 f429                      	brne sound_driver_instrument_routine_channel0_arpeggio_increment //if the current offset is not equal to the release index, increment the offset
001723 91a0 2820                 	lds r26, pulse1_arpeggio_macro_loop
001725 17ab                      	cp r26, r27 //check if loop flag exists NOTE: a loop flag and a release flag can only co-exist if the loop is less than the release
001726 f010                      	brlo sound_driver_instrument_routine_channel0_arpeggio_increment+1 //if the current offset is equal to the release index and there is a loop, reload the loop index, but also read the current index data
001727 c003                      	rjmp sound_driver_instrument_routine_channel0_arpeggio_read //if the current offset is equal to the release index and there is no loop, then keep the offset unchanged
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_increment:
001728 95a3                      	inc r26 //increment the macro offset
001729 93a0 281f                 	sts pulse1_arpeggio_macro_offset, r26
                                 	
                                 sound_driver_instrument_routine_channel0_arpeggio_read:
00172b 91b4                      	lpm r27, Z //load arpeggio data into r27
00172c 38b0                      	cpi r27, 0x80 //check for macro end flag
00172d f009                      	breq sound_driver_instrument_routine_channel0_arpeggio_macro_end_flag
00172e c041                      	rjmp sound_driver_instrument_routine_channel0_arpeggio_process //if the data was not the macro end flag, calculate the volume
                                 
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_macro_end_flag:
                                 sound_driver_instrument_routine_channel0_arpeggio_macro_end_flag_check_mode:
00172f 50a1                      	subi r26, 1 //keep the offset at the end flag
001730 93a0 281f                 	sts pulse1_arpeggio_macro_offset, r26
001732 91b0 2822                 	lds r27, pulse1_arpeggio_macro_mode //load the mode to check for fixed/relative mode NOTE: end behavior for fixed/relative mode is different in that once the macro ends, the true note is played
001734 30b1                      	cpi r27, 0x01
001735 f048                      	brlo sound_driver_instrument_routine_channel0_arpeggio_macro_end_flag_absolute
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_macro_end_flag_fixed_relative_check_release:
001736 91b0 2821                 	lds r27, pulse1_arpeggio_macro_release
001738 3fbf                      	cpi r27, 0xFF
001739 f4d1                      	brne sound_driver_instrument_routine_channel0_arpeggio_default //if there is a release flag, we don't need to loop. just play the true note
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_macro_end_flag_fixed_relative_check_loop:
00173a 91b0 2820                 	lds r27, pulse1_arpeggio_macro_loop
00173c 3fbf                      	cpi r27, 0xFF
00173d f499                      	brne sound_driver_instrument_routine_channel0_arpeggio_macro_end_flag_reload //if there is no release flag, but there is a loop, load the offset with the loop index
00173e c015                      	rjmp sound_driver_instrument_routine_channel0_arpeggio_default //if there is no release flag and no loop, then play the true note
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_macro_end_flag_absolute:
00173f 91b0 2821                 	lds r27, pulse1_arpeggio_macro_release
001741 3fbf                      	cpi r27, 0xFF
001742 f421                      	brne sound_driver_instrument_routine_channel0_arpeggio_macro_end_flag_absolute_no_loop //if there is a release flag, react as if there was no loop.
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_macro_end_flag_absolute_check_loop:
001743 91b0 2820                 	lds r27, pulse1_arpeggio_macro_loop //load the loop index
001745 3fbf                      	cpi r27, 0xFF //check if loop flag exists
001746 f451                      	brne sound_driver_instrument_routine_channel0_arpeggio_macro_end_flag_reload //if a loop flag exists, then load the loop value
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_macro_end_flag_absolute_no_loop:
001747 91c0 2834                 	lds r28, pulse1_fx_0xy_sequence //check for 0xy effect
001749 91d0 2835                 	lds r29, pulse1_fx_0xy_sequence+1
00174b 9620                      	adiw r29:r28, 0
00174c f469                      	brne sound_driver_instrument_routine_channel0_arpeggio_default_xy //if 0xy effect exists, and there is no release/loop, use the default routine and apply the 0xy effect
                                 
00174d 50a1                      	subi r26, 1 //if a loop flag does not exist and fixed mode is not used, use the last valid index
00174e 93a0 281f                 	sts pulse1_arpeggio_macro_offset, r26 //store the last valid index into the offset
001750 cfc2                      	rjmp sound_driver_instrument_routine_channel0_arpeggio
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_macro_end_flag_reload:
001751 93b0 281f                 	sts pulse1_arpeggio_macro_offset, r27 //store the loop index into the offset
001753 cfbf                      	rjmp sound_driver_instrument_routine_channel0_arpeggio //go back and re-read the volume data
                                 
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_default:
001754 91c0 2834                 	lds r28, pulse1_fx_0xy_sequence //load 0xy effect
001756 91d0 2835                 	lds r29, pulse1_fx_0xy_sequence+1
001758 9620                      	adiw r29:r28, 0 //check for 0xy effect
001759 f099                      	breq sound_driver_instrument_routine_channel0_arpeggio_default_no_0xy //if there is no 0xy effect, we don't need to roll the sequence
                                 	
                                 //NOTE: because of the way the xy parameter is stored and processed, using x0 will not create a faster arpeggio
                                 sound_driver_instrument_routine_channel0_arpeggio_default_xy:
00175a 95d6                      	lsr r29
00175b 95c7                      	ror r28
00175c 95d7                      	ror r29
00175d 95c7                      	ror r28
00175e 95d7                      	ror r29
00175f 95c7                      	ror r28
001760 95d7                      	ror r29
001761 95c7                      	ror r28
001762 95d7                      	ror r29
001763 95d2                      	swap r29
                                 
001764 93c0 2834                 	sts pulse1_fx_0xy_sequence, r28 //store the rolled sequence
001766 93d0 2835                 	sts pulse1_fx_0xy_sequence+1, r29
001768 70cf                      	andi r28, 0x0F //mask out the 4 LSB
001769 91a0 2807                 	lds r26, pulse1_note //load the current note index
00176b 0fac                      	add r26, r28 //add the note offset
00176c c02c                      	rjmp sound_driver_instrument_routine_channel0_arpeggio_process_load
                                 	
                                 sound_driver_instrument_routine_channel0_arpeggio_default_no_0xy:
                                 	//NOTE: the pitch offset does not need to be reset here because there is no new note being calculated
00176d 91a0 2807                 	lds r26, pulse1_note //load the current note index
00176f c029                      	rjmp sound_driver_instrument_routine_channel0_arpeggio_process_load
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_process:
001770 9220 2823                 	sts pulse1_total_pitch_offset, zero //the pitch offsets must be reset when a new note is to be calculated from an arpeggio macro
001772 9220 2829                 	sts pulse1_total_hi_pitch_offset, zero
001774 91a0 2822                 	lds r26, pulse1_arpeggio_macro_mode
001776 30a1                      	cpi r26, 0x01 //absolute mode
001777 f010                      	brlo sound_driver_instrument_routine_channel0_arpeggio_process_absolute
001778 f069                      	breq sound_driver_instrument_routine_channel0_arpeggio_process_fixed
001779 c00e                      	rjmp sound_driver_instrument_routine_channel0_arpeggio_process_relative //relative mode
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_process_absolute:
00177a 91a0 2807                 	lds r26, pulse1_note //load the current note index
00177c 0fab                      	add r26, r27 //offset the note with the arpeggio data
00177d fdb7                      	sbrc r27, 7 //check sign bit to check if we are subtracting from the note index
00177e c004                      	rjmp sound_driver_instrument_routine_channel0_arpeggio_process_absolute_subtract
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_process_absolute_add:
00177f 35a7                      	cpi r26, 0x57 //check if the result is larger than the size of the note table (0x56 is the highest possible index)
001780 f0c0                      	brlo sound_driver_instrument_routine_channel0_arpeggio_process_load //if the result is valid, go load the new note
001781 e5a6                      	ldi r26, 0x56 //if the result was too large, just set the result to the highest possible note index
001782 c016                      	rjmp sound_driver_instrument_routine_channel0_arpeggio_process_load
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_process_absolute_subtract:
001783 fda7                      	sbrc r26, 7 //check if result is negative
001784 e0a0                      	ldi r26, 0x00 //if the result was negative, reset it to the 0th index
001785 c013                      	rjmp sound_driver_instrument_routine_channel0_arpeggio_process_load
                                 
                                 
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_process_fixed:
001786 2fab                      	mov r26, r27 //move the arpeggio data into r26
001787 c011                      	rjmp sound_driver_instrument_routine_channel0_arpeggio_process_load
                                 
                                 
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_process_relative:
001788 91a0 2807                 	lds r26, pulse1_note //load the current note index
00178a 0fab                      	add r26, r27 //offset the note with the arpeggio data
00178b fdb7                      	sbrc r27, 7 //check sign bit to check if we are subtracting from the note index
00178c c008                      	rjmp sound_driver_instrument_routine_channel0_arpeggio_process_relative_subtract
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_process_relative_add:
00178d 93a0 2807                 	sts pulse1_note, r26 //NOTE: relative mode modifies the original note index
00178f 35a7                      	cpi r26, 0x57 //check if the result is larger than the size of the note table (0x56 is the highest possible index)
001790 f040                      	brlo sound_driver_instrument_routine_channel0_arpeggio_process_load //if the result is valid, go load the new note
001791 e5a6                      	ldi r26, 0x56 //if the result was too large, just set the result to the highest possible note index
001792 93a0 2807                 	sts pulse1_note, r26
001794 c004                      	rjmp sound_driver_instrument_routine_channel0_arpeggio_process_load
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_process_relative_subtract:
001795 fda7                      	sbrc r26, 7 //check if result is negative
001796 e0a0                      	ldi r26, 0x00 //if the result was negative, reset it to the 0th index
001797 93a0 2807                 	sts pulse1_note, r26
                                 
                                 
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_process_load:
001799 e3e4                      	ldi ZL, LOW(note_table << 1) //load in note table
00179a e0f0                      	ldi ZH, HIGH(note_table << 1)
00179b 0faa                      	lsl r26 //double the offset for the note table because we are getting byte data
00179c 0fea                      	add ZL, r26 //add offset
00179d 1df2                      	adc ZH, zero
00179e 91a5                      	lpm r26, Z+ //load bytes
00179f 91b4                      	lpm r27, Z
0017a0 93a0 0a8c                 	sts TCB0_CCMPL, r26 //load the LOW bits for timer
0017a2 93b0 0a8d                 	sts TCB0_CCMPH, r27 //load the HIGH bits for timer
0017a4 93a0 2840                 	sts pulse1_fx_3xx_target, r26 //NOTE: 3xx target note is stored here because the true note is always read in this arpeggio macro routine
0017a6 93b0 2841                 	sts pulse1_fx_3xx_target+1, r27
0017a8 c000                      	rjmp sound_driver_instrument_routine_channel0_pitch
                                 
                                 
                                 
                                 //NOTE: There is a limitation with the pitch routines in that the total pitch can not be offset by 127 in both,
                                 //the positive and negative direction, from the original note pitch. This shouldn't be too much of a problem as
                                 //most songs that use instruments with the pitch macro, do not stray that far from the original note pitch.
                                 //In the case of hi pitch, the total pitch can not be offset by 127*16 from the original pitch. This is also
                                 //not a big deal as you can easily reach the entire note range with an offset of up to 127*16.
                                 sound_driver_instrument_routine_channel0_pitch:
0017a9 91e0 2824                 	lds ZL, pulse1_pitch_macro
0017ab 91f0 2825                 	lds ZH, pulse1_pitch_macro+1
0017ad 9630                      	adiw Z, 0
0017ae f409                      	brne sound_driver_instrument_routine_channel0_pitch_continue
0017af c023                      	rjmp sound_driver_instrument_routine_channel0_pitch_default //if no pitch macro is in use, process the current total pitch macro offset
                                 sound_driver_instrument_routine_channel0_pitch_continue:
0017b0 0fee                      	lsl ZL //multiply by 2 to make z into a byte pointer for the macro's address
0017b1 1fff                      	rol ZH
0017b2 91a0 2826                 	lds r26, pulse1_pitch_macro_offset
0017b4 0fea                      	add ZL, r26
0017b5 1df2                      	adc ZH, zero
                                 
0017b6 91b0 2828                 	lds r27, pulse1_pitch_macro_release
0017b8 17ba                      	cp r27, r26
0017b9 f429                      	brne sound_driver_instrument_routine_channel0_pitch_increment //if the current offset is not equal to the release index, increment the offset
0017ba 91a0 2827                 	lds r26, pulse1_pitch_macro_loop
0017bc 17ab                      	cp r26, r27 //check if loop flag exists NOTE: a loop flag and a release flag can only co-exist if the loop is less than the release
0017bd f010                      	brlo sound_driver_instrument_routine_channel0_pitch_increment+1 //if the current offset is equal to the release index and there is a loop, load the offset with the loop index, but also read the current index data
0017be c003                      	rjmp sound_driver_instrument_routine_channel0_pitch_read //if the current offset is equal to the release index and there is no loop, then keep the offset unchanged
                                 
                                 sound_driver_instrument_routine_channel0_pitch_increment:
0017bf 95a3                      	inc r26 //increment the macro offset
0017c0 93a0 2826                 	sts pulse1_pitch_macro_offset, r26
                                 	
                                 sound_driver_instrument_routine_channel0_pitch_read:
0017c2 91b4                      	lpm r27, Z //load pitch data into r27
0017c3 38b0                      	cpi r27, 0x80 //check for macro end flag
0017c4 f489                      	brne sound_driver_instrument_routine_channel0_pitch_calculate //if the data was not the macro end flag, calculate the pitch offset
                                 
                                 
                                 
                                 sound_driver_instrument_routine_channel0_pitch_macro_end_flag:
                                 sound_driver_instrument_routine_channel0_pitch_macro_end_flag_check_release:
0017c5 50a1                      	subi r26, 1 //keep the macro offset at the end flag
0017c6 93a0 2826                 	sts pulse1_pitch_macro_offset, r26
0017c8 91b0 2828                 	lds r27, pulse1_pitch_macro_release
0017ca 3fbf                      	cpi r27, 0xFF
0017cb f439                      	brne sound_driver_instrument_routine_channel0_pitch_default //if there is a release flag, we don't need to loop. offset the pitch by the final total pitch
                                 
                                 sound_driver_instrument_routine_channel0_pitch_macro_end_flag_check_loop:
0017cc 91b0 2827                 	lds r27, pulse1_pitch_macro_loop //load the loop index
0017ce 3fbf                      	cpi r27, 0xFF //check if there is a loop index
0017cf f019                      	breq sound_driver_instrument_routine_channel0_pitch_default //if there is no loop flag, we don't need to loop. offset the pitch by the final total pitch
0017d0 93b0 2826                 	sts pulse1_pitch_macro_offset, r27 //store the loop index into the offset
0017d2 cfd6                      	rjmp sound_driver_instrument_routine_channel0_pitch //go back and re-read the pitch data
                                 
                                 
                                 
                                 sound_driver_instrument_routine_channel0_pitch_default:
0017d3 91b0 2823                 	lds r27, pulse1_total_pitch_offset
0017d5 c005                      	rjmp sound_driver_instrument_routine_channel0_pitch_calculate_multiply
                                 
                                 sound_driver_instrument_routine_channel0_pitch_calculate:
0017d6 91a0 2823                 	lds r26, pulse1_total_pitch_offset //load the total pitch offset to change
0017d8 0fba                      	add r27, r26
0017d9 93b0 2823                 	sts pulse1_total_pitch_offset, r27
                                 
                                 sound_driver_instrument_routine_channel0_pitch_calculate_multiply:
                                 	//NOTE: The Pxx effect is processed with the pitch instrument macro because the calculations are the same
0017db 91a0 2850                 	lds r26, pulse1_fx_Pxx
0017dd 0fba                      	add r27, r26
                                 
0017de 936f                      	push r22 //only registers r16 - r23 can be used with mulsu
0017df 937f                      	push r23
0017e0 2f6b                      	mov r22, r27 //store the signed pitch offset data into r22
0017e1 eb72                      	ldi r23, 0b10110010 //store r23 with 11.125 note: this is the closest approximation to the 11.1746014718 multiplier we can get with 8 bits
0017e2 0367                      	mulsu r22, r23
0017e3 917f                      	pop r23
0017e4 916f                      	pop r22
                                 
0017e5 9416                      	lsr r1 //shift out the fractional bits
0017e6 9407                      	ror r0
0017e7 9416                      	lsr r1
0017e8 9407                      	ror r0
0017e9 9416                      	lsr r1
0017ea 9407                      	ror r0
0017eb 9416                      	lsr r1
0017ec 9407                      	ror r0
0017ed fe13                      	sbrs r1, 3 //check if result was a negative number
0017ee c002                      	rjmp sound_driver_instrument_routine_channel0_pitch_calculate_offset //if the result was positive, don't fill with 1s
                                 
                                 sound_driver_instrument_routine_channel0_pitch_calculate_negative:
0017ef efb0                      	ldi r27, 0xF0
0017f0 2a1b                      	or r1, r27 //when right shifting a two's complement number, must use 1s instead of 0s to fill
                                 
                                 sound_driver_instrument_routine_channel0_pitch_calculate_offset:
0017f1 91a0 0a8c                 	lds r26, TCB0_CCMPL //load the low bits for timer
0017f3 91b0 0a8d                 	lds r27, TCB0_CCMPH //load the high bits for timer
0017f5 0da0                      	add r26, r0 //offset the timer values
0017f6 1db1                      	adc r27, r1
                                 	
0017f7 91c0 2838                 	lds r28, pulse1_fx_1xx_total
0017f9 91d0 2839                 	lds r29, pulse1_fx_1xx_total+1
0017fb 1bac                      	sub r26, r28
0017fc 0bbd                      	sbc r27, r29
0017fd 91c0 283c                 	lds r28, pulse1_fx_2xx_total
0017ff 91d0 283d                 	lds r29, pulse1_fx_2xx_total+1
001801 0fac                      	add r26, r28
001802 1fbd                      	adc r27, r29
001803 91c0 2855                 	lds r28, pulse1_fx_Qxy_total_offset //NOTE: Qxy and Rxy offsets are applied here
001805 91d0 2856                 	lds r29, pulse1_fx_Qxy_total_offset+1
001807 1bac                      	sub r26, r28
001808 0bbd                      	sbc r27, r29
001809 91c0 285b                 	lds r28, pulse1_fx_Rxy_total_offset
00180b 91d0 285c                 	lds r29, pulse1_fx_Rxy_total_offset+1
00180d 0fac                      	add r26, r28
00180e 1fbd                      	adc r27, r29
                                 
00180f 93a0 0a8c                 	sts TCB0_CCMPL, r26 //store the new low bits for timer
001811 93b0 0a8d                 	sts TCB0_CCMPH, r27 //store the new high bits for timer
                                 	
                                 
                                 
                                 //NOTE: The hi pitch macro routine does not account for overflowing from the offset. In famitracker, if the offset
                                 //goes beyond the note range, there will be no more offset calculations. In this routine, it is possible that
                                 //the pitch goes from B-7 and back around to C-0. I don't believe there will ever be a song in which this will be a problem.
                                 sound_driver_instrument_routine_channel0_hi_pitch:
001813 91e0 282a                 	lds ZL, pulse1_hi_pitch_macro
001815 91f0 282b                 	lds ZH, pulse1_hi_pitch_macro+1
001817 9630                      	adiw Z, 0
001818 f409                      	brne sound_driver_instrument_routine_channel0_hi_pitch_continue
001819 c03c                      	rjmp sound_driver_instrument_routine_channel0_duty //if no hi pitch macro is in use, go to the next macro routine
                                 sound_driver_instrument_routine_channel0_hi_pitch_continue:
00181a 0fee                      	lsl ZL //multiply by 2 to make z into a byte pointer for the macro's address
00181b 1fff                      	rol ZH
00181c 91a0 282c                 	lds r26, pulse1_hi_pitch_macro_offset
00181e 0fea                      	add ZL, r26
00181f 1df2                      	adc ZH, zero
                                 
001820 91b0 282e                 	lds r27, pulse1_hi_pitch_macro_release
001822 17ba                      	cp r27, r26
001823 f429                      	brne sound_driver_instrument_routine_channel0_hi_pitch_increment //if the current offset is not equal to the release index, increment the offset
001824 91a0 282d                 	lds r26, pulse1_hi_pitch_macro_loop
001826 17ab                      	cp r26, r27 //check if loop flag exists NOTE: a loop flag and a release flag can only co-exist if the loop is less than the release
001827 f010                      	brlo sound_driver_instrument_routine_channel0_hi_pitch_increment+1 //if the current offset is equal to the release index and there is a loop, load the offset with the loop index, but also read the current index data
001828 c003                      	rjmp sound_driver_instrument_routine_channel0_hi_pitch_read //if the current offset is equal to the release index and there is no loop, then keep the offset unchanged
                                 
                                 sound_driver_instrument_routine_channel0_hi_pitch_increment:
001829 95a3                      	inc r26 //increment the macro offset
00182a 93a0 282c                 	sts pulse1_hi_pitch_macro_offset, r26
                                 	
                                 sound_driver_instrument_routine_channel0_hi_pitch_read:
00182c 91b4                      	lpm r27, Z //load hi pitch data into r27
00182d 38b0                      	cpi r27, 0x80 //check for macro end flag
00182e f489                      	brne sound_driver_instrument_routine_channel0_hi_pitch_calculate //if the data was not the macro end flag, calculate the hi pitch offset
                                 
                                 
                                 
                                 sound_driver_instrument_routine_channel0_hi_pitch_macro_end_flag:
                                 sound_driver_instrument_routine_channel0_hi_pitch_macro_end_flag_check_release:
00182f 50a1                      	subi r26, 1 //keep the macro offset at the end flag
001830 93a0 282c                 	sts pulse1_hi_pitch_macro_offset, r26
001832 91b0 282e                 	lds r27, pulse1_hi_pitch_macro_release
001834 3fbf                      	cpi r27, 0xFF
001835 f439                      	brne sound_driver_instrument_routine_channel0_hi_pitch_default //if there is a release flag, we don't need to loop. offset the hi pitch by the final total hi pitch
                                 
                                 sound_driver_instrument_routine_channel0_hi_pitch_macro_end_flag_check_loop:
001836 91b0 282d                 	lds r27, pulse1_hi_pitch_macro_loop //load the loop index
001838 3fbf                      	cpi r27, 0xFF //check if there is a loop index
001839 f019                      	breq sound_driver_instrument_routine_channel0_hi_pitch_default //if there is no loop flag, we don't need to loop. offset the pitch by the final total hi pitch
00183a 93b0 282c                 	sts pulse1_hi_pitch_macro_offset, r27 //store the loop index into the offset
00183c cfd6                      	rjmp sound_driver_instrument_routine_channel0_hi_pitch //go back and re-read the hi pitch data
                                 
                                 
                                 
                                 sound_driver_instrument_routine_channel0_hi_pitch_default:
00183d 91b0 2829                 	lds r27, pulse1_total_hi_pitch_offset
00183f c005                      	rjmp sound_driver_instrument_routine_channel0_hi_pitch_calculate_multiply
                                 
                                 sound_driver_instrument_routine_channel0_hi_pitch_calculate:
001840 91a0 2829                 	lds r26, pulse1_total_hi_pitch_offset //load the total hi pitch offset to change
001842 0fba                      	add r27, r26
001843 93b0 2829                 	sts pulse1_total_hi_pitch_offset, r27
                                 
                                 sound_driver_instrument_routine_channel0_hi_pitch_calculate_multiply:
001845 936f                      	push r22 //only registers r16 - r23 can be used with mulsu
001846 937f                      	push r23
001847 2f6b                      	mov r22, r27 //store the signed hi pitch offset data into r22
001848 eb72                      	ldi r23, 0b10110010 //store r23 with 11.125 note: this is the closest approximation to the 11.1746014718 multiplier we can get with 8 bits
001849 0367                      	mulsu r22, r23
00184a 917f                      	pop r23
00184b 916f                      	pop r22
                                 
                                 	//NOTE: fractional bits do not need to be shifted out because hi pitch offsets are multiplied by 16. shifting right 4 times for the fraction and left 4 times for the 16x is the same as no shift.
                                 sound_driver_instrument_routine_channel0_hi_pitch_calculate_offset:
00184c 91a0 0a8c                 	lds r26, TCB0_CCMPL //load the low bits for timer
00184e 91b0 0a8d                 	lds r27, TCB0_CCMPH //load the high bits for timer
001850 0da0                      	add r26, r0 //offset the timer values
001851 1db1                      	adc r27, r1
001852 93a0 0a8c                 	sts TCB0_CCMPL, r26 //store the new low bits for timer
001854 93b0 0a8d                 	sts TCB0_CCMPH, r27 //store the new high bits for timer
                                 
                                 
                                 
                                 //NOTE: Unlike the original NES, changing the duty cycle will reset the sequencer position entirely.
                                 sound_driver_instrument_routine_channel0_duty:
001856 91e0 282f                 	lds ZL, pulse1_duty_macro
001858 91f0 2830                 	lds ZH, pulse1_duty_macro+1
00185a 9630                      	adiw Z, 0
00185b f1b1                      	breq sound_driver_channel0_fx_routines //if no duty macro is in use, go to the next routine
00185c 0fee                      	lsl ZL //multiply by 2 to make z into a byte pointer for the macro's address
00185d 1fff                      	rol ZH
00185e 91a0 2831                 	lds r26, pulse1_duty_macro_offset
001860 0fea                      	add ZL, r26
001861 1df2                      	adc ZH, zero
                                 
001862 91b0 2833                 	lds r27, pulse1_duty_macro_release
001864 17ba                      	cp r27, r26
001865 f429                      	brne sound_driver_instrument_routine_channel0_duty_increment //if the current offset is not equal to the release index, increment the offset
001866 91a0 2832                 	lds r26, pulse1_duty_macro_loop
001868 17ab                      	cp r26, r27 //check if loop flag exists NOTE: a loop flag and a release flag can only co-exist if the loop is less than the release
001869 f010                      	brlo sound_driver_instrument_routine_channel0_duty_increment+1 //if the current offset is equal to the release index and there is a loop, load the offset with the loop index, but also read the current index data
00186a c027                      	rjmp sound_driver_channel0_fx_routines //if the current offset is equal to the release index and there is no loop, then keep the offset unchanged and skip the rest of the routine
                                 
                                 sound_driver_instrument_routine_channel0_duty_increment:
00186b 95a3                      	inc r26 //increment the macro offset
00186c 93a0 2831                 	sts pulse1_duty_macro_offset, r26
                                 	
                                 sound_driver_instrument_routine_channel0_duty_read:
00186e 91b4                      	lpm r27, Z //load pitch data into r27
00186f 3fbf                      	cpi r27, 0xFF //check for macro end flag
001870 f471                      	brne sound_driver_instrument_routine_channel0_duty_load //if the data was not the macro end flag, load the new duty cycle
                                 
                                 
                                 
                                 sound_driver_instrument_routine_channel0_duty_macro_end_flag:
                                 sound_driver_instrument_routine_channel0_duty_macro_end_flag_check_release:
001871 50a1                      	subi r26, 1 //keep the macro offset at the end flag
001872 93a0 2831                 	sts pulse1_duty_macro_offset, r26
001874 91b0 2833                 	lds r27, pulse1_duty_macro_release
001876 3fbf                      	cpi r27, 0xFF
001877 f4d1                      	brne sound_driver_channel0_fx_routines //if there is a release flag, we don't need to loop. skip the rest of the routine.
                                 
                                 sound_driver_instrument_routine_channel0_duty_macro_end_flag_check_loop:
001878 91b0 2832                 	lds r27, pulse1_duty_macro_loop //load the loop index
00187a 3fbf                      	cpi r27, 0xFF //check if there is a loop index
00187b f0b1                      	breq sound_driver_channel0_fx_routines //if there is no loop flag, we don't need to loop. skip the rest of the routine.
00187c 93b0 2831                 	sts pulse1_duty_macro_offset, r27 //store the loop index into the offset
00187e cfd7                      	rjmp sound_driver_instrument_routine_channel0_duty //go back and re-read the duty data
                                 
                                 
                                 
                                 sound_driver_instrument_routine_channel0_duty_load:
00187f ede2                      	ldi ZL, LOW(sequences << 1) //point Z to sequence table
001880 e3f4                      	ldi ZH, HIGH(sequences << 1)
001881 0feb                      	add ZL, r27 //offset the pointer by the duty macro data
001882 1df2                      	adc ZH, zero
                                 
001883 95b6                      	lsr r27 //move the duty cycle bits to the 2 MSB for pulse1_param (register $4000)
001884 95b7                      	ror r27
001885 95b7                      	ror r27
001886 91a0 2800                 	lds r26, pulse1_param //load r26 with pulse1_param (register $4000)
001888 2fca                      	mov r28, r26 //store a copy of pulse1_param into r28
001889 7ca0                      	andi r26, 0b11000000 //mask the duty cycle bits
00188a 13ba                      	cpse r27, r26 //check if the previous duty cycle and the new duty cycle are equal
00188b c001                      	rjmp sound_driver_instrument_routine_channel0_duty_load_store
00188c c005                      	rjmp sound_driver_channel0_fx_routines //if the previous and new duty cycle are the same, don't reload the sequence
                                 
                                 sound_driver_instrument_routine_channel0_duty_load_store:
00188d 90d4                      	lpm pulse1_sequence, Z //store the sequence
                                 
00188e 73cf                      	andi r28, 0b00111111 //mask out the duty cycle bits
00188f 2bcb                      	or r28, r27 //store the new duty cycle bits into r27
001890 93c0 2800                 	sts pulse1_param, r28
                                 
                                 
                                 
                                 sound_driver_channel0_fx_routines:
                                 sound_driver_channel0_fx_1xx_routine:
001892 91e0 2836                 	lds ZL, pulse1_fx_1xx
001894 91f0 2837                 	lds ZH, pulse1_fx_1xx+1
001896 9630                      	adiw Z, 0
001897 f051                      	breq sound_driver_channel0_fx_2xx_routine
                                 
001898 91a0 2838                 	lds r26, pulse1_fx_1xx_total //load the rate to change the pitch by
00189a 91b0 2839                 	lds r27, pulse1_fx_1xx_total+1
00189c 0fae                      	add r26, ZL //increase the total offset by the rate
00189d 1fbf                      	adc r27, ZH
00189e 93a0 2838                 	sts pulse1_fx_1xx_total, r26
0018a0 93b0 2839                 	sts pulse1_fx_1xx_total+1, r27
                                 
                                 
                                 
                                 sound_driver_channel0_fx_2xx_routine:
0018a2 91e0 283a                 	lds ZL, pulse1_fx_2xx
0018a4 91f0 283b                 	lds ZH, pulse1_fx_2xx+1
0018a6 9630                      	adiw Z, 0
0018a7 f051                      	breq sound_driver_channel0_fx_3xx_routine
                                 
0018a8 91a0 283c                 	lds r26, pulse1_fx_2xx_total //load the rate to change the pitch by
0018aa 91b0 283d                 	lds r27, pulse1_fx_2xx_total+1
0018ac 0fae                      	add r26, ZL //increase the total offset by the rate
0018ad 1fbf                      	adc r27, ZH
0018ae 93a0 283c                 	sts pulse1_fx_2xx_total, r26
0018b0 93b0 283d                 	sts pulse1_fx_2xx_total+1, r27
                                 
                                 
                                 
                                 sound_driver_channel0_fx_3xx_routine:
0018b2 91e0 2842                 	lds ZL, pulse1_fx_3xx_speed
0018b4 91f0 2843                 	lds ZH, pulse1_fx_3xx_speed+1
0018b6 9630                      	adiw Z, 0
0018b7 f409                      	brne sound_driver_channel0_fx_3xx_routine_check_start
0018b8 c048                      	rjmp sound_driver_channel0_fx_4xy_routine
                                 
                                 sound_driver_channel0_fx_3xx_routine_check_start:
0018b9 91a0 283e                 	lds r26, pulse1_fx_3xx_start
0018bb 91b0 283f                 	lds r27, pulse1_fx_3xx_start+1
0018bd 9610                      	adiw r26:r27, 0
0018be f409                      	brne sound_driver_channel0_fx_3xx_routine_main
0018bf c041                      	rjmp sound_driver_channel0_fx_4xy_routine
                                 
                                 sound_driver_channel0_fx_3xx_routine_main:
0018c0 91c0 2840                 	lds r28, pulse1_fx_3xx_target
0018c2 91d0 2841                 	lds r29, pulse1_fx_3xx_target+1
                                 
0018c4 17ac                      	cp r26, r28 //check if the target is lower, higher or equal to the starting period
0018c5 07bd                      	cpc r27, r29
0018c6 f011                      	breq sound_driver_channel0_fx_3xx_routine_disable
0018c7 f030                      	brlo sound_driver_channel0_fx_3xx_routine_subtract //if target is larger, we need to add to the start (subtract from the current timer)
0018c8 c01f                      	rjmp sound_driver_channel0_fx_3xx_routine_add //if target is smaller, we need to subtract from the start (add to the current timer)
                                 
                                 sound_driver_channel0_fx_3xx_routine_disable:
0018c9 9220 283e                 	sts pulse1_fx_3xx_start, zero //setting the starting period to 0 effectively disables this routine until a note has been changed
0018cb 9220 283f                 	sts pulse1_fx_3xx_start+1, zero //NOTE: to truly disable the effect, 300 must be written.
0018cd c033                      	rjmp sound_driver_channel0_fx_4xy_routine
                                 
                                 sound_driver_channel0_fx_3xx_routine_subtract:
0018ce 1bca                      	sub r28, r26 //store the total difference between the start and the target into r28:r29
0018cf 0bdb                      	sbc r29, r27
0018d0 91a0 2844                 	lds r26, pulse1_fx_3xx_total_offset
0018d2 91b0 2845                 	lds r27, pulse1_fx_3xx_total_offset+1
                                 
0018d4 0fae                      	add r26, ZL //add the speed to the total offset
0018d5 1fbf                      	adc r27, ZH
0018d6 1bca                      	sub r28, r26 //invert the total difference with the total offset
0018d7 0bdb                      	sbc r29, r27
0018d8 f380                      	brlo sound_driver_channel0_fx_3xx_routine_disable //if the total offset has surpassed the target difference (target note has been reached)
                                 
0018d9 93a0 2844                 	sts pulse1_fx_3xx_total_offset, r26 //store the new total offset
0018db 93b0 2845                 	sts pulse1_fx_3xx_total_offset+1, r27
                                 
0018dd 91a0 0a8c                 	lds r26, TCB0_CCMPL //load the current timer period
0018df 91b0 0a8d                 	lds r27, TCB0_CCMPH
0018e1 1bac                      	sub r26, r28 //offset the current timer period with the total offset
0018e2 0bbd                      	sbc r27, r29
0018e3 93a0 0a8c                 	sts TCB0_CCMPL, r26
0018e5 93b0 0a8d                 	sts TCB0_CCMPH, r27
0018e7 c019                      	rjmp sound_driver_channel0_fx_4xy_routine
                                 
                                 sound_driver_channel0_fx_3xx_routine_add:
0018e8 1bac                      	sub r26, r28 //store the total difference between the start and the target into r28:r29
0018e9 0bbd                      	sbc r27, r29
0018ea 91c0 2844                 	lds r28, pulse1_fx_3xx_total_offset
0018ec 91d0 2845                 	lds r29, pulse1_fx_3xx_total_offset+1
                                 
0018ee 0fce                      	add r28, ZL //add the speed to the total offset
0018ef 1fdf                      	adc r29, ZH
0018f0 1bac                      	sub r26, r28 //invert the total difference with the total offset
0018f1 0bbd                      	sbc r27, r29
0018f2 f2b0                      	brlo sound_driver_channel0_fx_3xx_routine_disable //if the total offset has surpassed the target difference (target note has been reached)
                                 
0018f3 93c0 2844                 	sts pulse1_fx_3xx_total_offset, r28 //store the new total offset
0018f5 93d0 2845                 	sts pulse1_fx_3xx_total_offset+1, r29
                                 
0018f7 91c0 0a8c                 	lds r28, TCB0_CCMPL //load the current timer period
0018f9 91d0 0a8d                 	lds r29, TCB0_CCMPH
0018fb 0fca                      	add r28, r26 //offset the current timer period with the total offset
0018fc 1fdb                      	adc r29, r27
0018fd 93c0 0a8c                 	sts TCB0_CCMPL, r28
0018ff 93d0 0a8d                 	sts TCB0_CCMPH, r29
                                 
                                 
                                 
                                 sound_driver_channel0_fx_4xy_routine:
001901 91a0 2846                 	lds r26, pulse1_fx_4xy_speed
001903 15a2                      	cp r26, zero
001904 f409                      	brne sound_driver_channel0_fx_4xy_routine_continue
001905 c05c                      	rjmp sound_driver_channel0_fx_7xy_routine //if speed is 0, then the effect is disabled
                                 
                                 sound_driver_channel0_fx_4xy_routine_continue:
001906 91b0 2847                 	lds r27, pulse1_fx_4xy_depth
001908 91c0 2848                 	lds r28, pulse1_fx_4xy_phase
00190a 0fca                      	add r28, r26 //increase the phase by the speed
00190b 36c4                      	cpi r28, 0x64 //check if the phase overflowed NOTE: phase values range from 0-63
00190c f008                      	brlo sound_driver_channel0_fx_4xy_routine_phase //if no overflow, map the phase to 0-15.
00190d 56c3                      	subi r28, 0x63 //if there was overflow, re-adjust the phase
                                 
                                 sound_driver_channel0_fx_4xy_routine_phase:
00190e 93c0 2848                 	sts pulse1_fx_4xy_phase, r28 //store the new phase
001910 31c0                      	cpi r28, 16
001911 f028                      	brlo sound_driver_channel0_fx_4xy_routine_phase_0
001912 32c0                      	cpi r28, 32
001913 f028                      	brlo sound_driver_channel0_fx_4xy_routine_phase_1
001914 33c0                      	cpi r28, 48
001915 f030                      	brlo sound_driver_channel0_fx_4xy_routine_phase_2
001916 c007                      	rjmp sound_driver_channel0_fx_4xy_routine_phase_3
                                 
                                 sound_driver_channel0_fx_4xy_routine_phase_0:
001917 70cf                      	andi r28, 0x0F //mask for values 0-15
001918 c029                      	rjmp sound_driver_channel0_fx_4xy_routine_load_subtract
                                 
                                 sound_driver_channel0_fx_4xy_routine_phase_1:
001919 6fc0                      	ori r28, 0xF0
00191a 95c0                      	com r28 //invert values 0-15
00191b c026                      	rjmp sound_driver_channel0_fx_4xy_routine_load_subtract
                                 
                                 sound_driver_channel0_fx_4xy_routine_phase_2:
00191c 70cf                      	andi r28, 0x0F //mask for values 0-15
00191d c003                      	rjmp sound_driver_channel0_fx_4xy_routine_load_add
                                 
                                 sound_driver_channel0_fx_4xy_routine_phase_3:
00191e 6fc0                      	ori r28, 0xF0
00191f 95c0                      	com r28 //invert values 0-15
001920 c000                      	rjmp sound_driver_channel0_fx_4xy_routine_load_add
                                 
                                 sound_driver_channel0_fx_4xy_routine_load_add:
001921 95b2                      	swap r27 //multiply depth by 16
001922 0fcb                      	add r28, r27 //add the depth to the phase NOTE: the table is divided into sixteen different set of 8 values, which correspond to the depth
                                 	
001923 eee2                      	ldi ZL, LOW(vibrato_table << 1) //point z to vibrato table
001924 e0f0                      	ldi ZH, HIGH(vibrato_table << 1)
001925 0fec                      	add ZL, r28 //offset the table by the depth+phase
001926 1df2                      	adc ZH, zero
001927 91c4                      	lpm r28, Z //load the tremelo value into r28
                                 
001928 936f                      	push r22 //only registers r16 - r23 can be used with mulsu
001929 937f                      	push r23
00192a 2f6c                      	mov r22, r28 //store the vibrato value into r22
00192b eb72                      	ldi r23, 0b10110010 //store r23 with 11.125 note: this is the closest approximation to the 11.1746014718 multiplier we can get with 8 bits
00192c 9f67                      	mul r22, r23
00192d 917f                      	pop r23
00192e 916f                      	pop r22
                                 
00192f 9416                      	lsr r1 //shift out the fractional bits
001930 9407                      	ror r0
001931 9416                      	lsr r1
001932 9407                      	ror r0
001933 9416                      	lsr r1
001934 9407                      	ror r0
001935 9416                      	lsr r1
001936 9407                      	ror r0
                                 	
001937 91a0 0a8c                 	lds r26, TCB0_CCMPL
001939 91b0 0a8d                 	lds r27, TCB0_CCMPH
00193b 0da0                      	add r26, r0
00193c 1db1                      	adc r27, r1
00193d 93a0 0a8c                 	sts TCB0_CCMPL, r26
00193f 93b0 0a8d                 	sts TCB0_CCMPH, r27
001941 c020                      	rjmp sound_driver_channel0_fx_7xy_routine
                                 
                                 sound_driver_channel0_fx_4xy_routine_load_subtract:
001942 95b2                      	swap r27 //multiply depth by 16
001943 0fcb                      	add r28, r27 //add the depth to the phase NOTE: the table is divided into sixteen different set of 8 values, which correspond to the depth
001944 eee2                      	ldi ZL, LOW(vibrato_table << 1) //point z to vibrato table
001945 e0f0                      	ldi ZH, HIGH(vibrato_table << 1)
001946 0fec                      	add ZL, r28 //offset the table by the depth+phase
001947 1df2                      	adc ZH, zero
001948 91c4                      	lpm r28, Z //load the vibrato value into r28
                                 
001949 936f                      	push r22 //only registers r16 - r23 can be used with mulsu
00194a 937f                      	push r23
00194b 2f6c                      	mov r22, r28 //store the vibrato value into r22
00194c eb72                      	ldi r23, 0b10110010 //store r23 with 11.125 note: this is the closest approximation to the 11.1746014718 multiplier we can get with 8 bits
00194d 9f67                      	mul r22, r23
00194e 917f                      	pop r23
00194f 916f                      	pop r22
                                 
001950 9416                      	lsr r1 //shift out the fractional bits
001951 9407                      	ror r0
001952 9416                      	lsr r1
001953 9407                      	ror r0
001954 9416                      	lsr r1
001955 9407                      	ror r0
001956 9416                      	lsr r1
001957 9407                      	ror r0
                                 
001958 91a0 0a8c                 	lds r26, TCB0_CCMPL
00195a 91b0 0a8d                 	lds r27, TCB0_CCMPH
00195c 19a0                      	sub r26, r0
00195d 09b1                      	sbc r27, r1
00195e 93a0 0a8c                 	sts TCB0_CCMPL, r26
001960 93b0 0a8d                 	sts TCB0_CCMPH, r27
                                 
                                 
                                 
                                 sound_driver_channel0_fx_7xy_routine:
001962 91a0 2849                 	lds r26, pulse1_fx_7xy_speed
001964 15a2                      	cp r26, zero
001965 f0f1                      	breq sound_driver_channel0_fx_Axy_routine //if speed is 0, then the effect is disabled
                                 
001966 91b0 284a                 	lds r27, pulse1_fx_7xy_depth
001968 91c0 284b                 	lds r28, pulse1_fx_7xy_phase
00196a 0fca                      	add r28, r26 //increase the phase by the speed
00196b 36c4                      	cpi r28, 0x64 //check if the phase overflowed NOTE: phase values range from 0-63
00196c f010                      	brlo sound_driver_channel0_fx_7xy_routine_phase //if no overflow, map the phase to 0-15.
00196d e0c0                      	ldi r28, 0x00
00196e 56c3                      	subi r28, 0x63 //if there was overflow, re-adjust the phase
                                 
                                 sound_driver_channel0_fx_7xy_routine_phase:
00196f 93c0 284b                 	sts pulse1_fx_7xy_phase, r28 //store the new phase
001971 95c6                      	lsr r28 //divide the phase by 2 NOTE: 7xy only uses half a sine unlike 4xy
001972 ffc4                      	sbrs r28, 4
001973 c001                      	rjmp sound_driver_channel0_fx_7xy_routine_phase_0
001974 c002                      	rjmp sound_driver_channel0_fx_7xy_routine_phase_1
                                 	
                                 sound_driver_channel0_fx_7xy_routine_phase_0:
001975 70cf                      	andi r28, 0x0F //mask for values 0-15
001976 c003                      	rjmp sound_driver_channel0_fx_7xy_routine_load
                                 
                                 sound_driver_channel0_fx_7xy_routine_phase_1:
001977 6fc0                      	ori r28, 0xF0
001978 95c0                      	com r28 //invert values 0-15
001979 c000                      	rjmp sound_driver_channel0_fx_7xy_routine_load
                                 
                                 sound_driver_channel0_fx_7xy_routine_load:
00197a 95b2                      	swap r27 //multiply depth by 16
00197b 0fcb                      	add r28, r27 //add the depth to the phase NOTE: the table is divided into sixteen different set of 8 values, which correspond to the depth
                                 	
00197c eee2                      	ldi ZL, LOW(vibrato_table << 1) //point z to vibrato table
00197d e0f0                      	ldi ZH, HIGH(vibrato_table << 1)
00197e 0fec                      	add ZL, r28 //offset the table by the depth+phase
00197f 1df2                      	adc ZH, zero
001980 91c4                      	lpm r28, Z //load the vibrato value into r28
                                 
001981 95c6                      	lsr r28 //convert to tremelo value by shifting to the right
001982 93c0 284c                 	sts pulse1_fx_7xy_value, r28
                                 
                                 
                                 
                                 sound_driver_channel0_fx_Axy_routine:
001984 91b0 284d                 	lds r27, pulse1_fx_Axy
001986 15b2                      	cp r27, zero
001987 f0e9                      	breq sound_driver_channel0_fx_Qxy_routine //0 means that the effect is not in use
                                 	
001988 91a0 2805                 	lds r26, pulse1_fractional_volume //load fractional volume representation of the channel
00198a 91c0 2800                 	lds r28, pulse1_param //load the integer volume representation of the channel
00198c 2fda                      	mov r29, r26 //copy fractional volume into r29
00198d 2fec                      	mov r30, r28 //copy the pulse1_param into r30
00198e 95e2                      	swap r30
00198f 7fd0                      	andi r29, 0xF0 //mask for integer volume bits from the fractional volume
001990 7fe0                      	andi r30, 0xF0 //mask for VVVV volume bits
                                 
001991 17ed                      	cp r30, r29 //compare the fractional and integer volumes
001992 f009                      	breq sound_driver_channel0_fx_Axy_routine_calculate
                                 
                                 sound_driver_channel0_fx_Axy_routine_reload:
001993 2fae                      	mov r26, r30 //overwrite the fractional volume with the integer volume
                                 
                                 sound_driver_channel0_fx_Axy_routine_calculate:
001994 fdb7                      	sbrc r27, 7 //check for negative sign bit in Axy offset value
001995 c004                      	rjmp sound_driver_channel0_fx_Axy_routine_calculate_subtraction
                                 
                                 sound_driver_channel0_fx_Axy_routine_calculate_addition:
001996 0fab                      	add r26, r27 //add the fractional volume with the offset specified by the Axy effect
001997 f428                      	brcc sound_driver_channel0_fx_Axy_routine_calculate_store //if the fractional volume did not overflow, go store the new volume
001998 efa0                      	ldi r26, 0xF0 //if the fractional volume did overflow, reset it back to the highest integer volume possible (0xF)
001999 c003                      	rjmp sound_driver_channel0_fx_Axy_routine_calculate_store
                                 
                                 sound_driver_channel0_fx_Axy_routine_calculate_subtraction:
00199a 0fab                      	add r26, r27 //add the fractional volume with the offset specified by the Axy effect
00199b f008                      	brcs sound_driver_channel0_fx_Axy_routine_calculate_store //if the fractional volume did not overflow, go store the new volume
00199c e0a0                      	ldi r26, 0x00 //if the fractional volume did overflow, reset it back to the lowest integer volume possible (0x0)
                                 
                                 sound_driver_channel0_fx_Axy_routine_calculate_store:
00199d 93a0 2805                 	sts pulse1_fractional_volume, r26 //store the new fractional volume
00199f 7fa0                      	andi r26, 0xF0 //mask for integer volume bits from the fractional volume
0019a0 95a2                      	swap r26
0019a1 7fc0                      	andi r28, 0xF0 //mask out the old VVVV volume bits
0019a2 2bca                      	or r28, r26 //store the new volume back into pulse1_param
0019a3 93c0 2800                 	sts pulse1_param, r28
                                 
                                 
                                 
                                 //NOTE: The Qxy and Rxy routines ONLY calculate the total offset. The offset is applied in the pitch macro routine
                                 sound_driver_channel0_fx_Qxy_routine:
0019a5 91e0 2851                 	lds ZL, pulse1_fx_Qxy_target
0019a7 91f0 2852                 	lds ZH, pulse1_fx_Qxy_target+1
0019a9 9630                      	adiw Z, 0
0019aa f131                      	breq sound_driver_channel0_fx_Rxy_routine //if the effect is not enabled, skip the routine
                                 
0019ab 91a0 2855                 	lds r26, pulse1_fx_Qxy_total_offset
0019ad 91b0 2856                 	lds r27, pulse1_fx_Qxy_total_offset+1
0019af 91c0 0a8c                 	lds r28, TCB0_CCMPL
0019b1 91d0 0a8d                 	lds r29, TCB0_CCMPH
0019b3 1bca                      	sub r28, r26 //subtract the timer period by the total offset
0019b4 0bdb                      	sbc r29, r27
                                 
0019b5 17ce                      	cp r28, ZL //compare the new timer period with the target
0019b6 07df                      	cpc r29, ZH
0019b7 f010                      	brlo sound_driver_channel0_fx_Qxy_routine_end //if the target has been reached (or passed)
0019b8 f009                      	breq sound_driver_channel0_fx_Qxy_routine_end
0019b9 f468                      	brsh sound_driver_channel0_fx_Qxy_routine_add
                                 
                                 sound_driver_channel0_fx_Qxy_routine_end:
0019ba 1bec                      	sub ZL, r28 //calculate the difference to the target
0019bb 0bfd                      	sbc ZH, r29
0019bc 0fae                      	add r26, ZL //increase the total offset to the exact amount needed to reach the target
0019bd 1fbf                      	adc r27, ZH
0019be 93a0 2855                 	sts pulse1_fx_Qxy_total_offset, r26 //store the total offset
0019c0 93b0 2856                 	sts pulse1_fx_Qxy_total_offset+1, r27
0019c2 9220 2851                 	sts pulse1_fx_Qxy_target, zero //loading the target with 0 stops any further calculations
0019c4 9220 2852                 	sts pulse1_fx_Qxy_target+1, zero
0019c6 c00a                      	rjmp sound_driver_channel0_fx_Rxy_routine
                                 
                                 sound_driver_channel0_fx_Qxy_routine_add:
0019c7 91c0 2853                 	lds r28, pulse1_fx_Qxy_speed
0019c9 91d0 2854                 	lds r29, pulse1_fx_Qxy_speed+1
0019cb 0fac                      	add r26, r28 //increase the total offset by the speed
0019cc 1fbd                      	adc r27, r29
0019cd 93a0 2855                 	sts pulse1_fx_Qxy_total_offset, r26 //store the total offset
0019cf 93b0 2856                 	sts pulse1_fx_Qxy_total_offset+1, r27
                                 
                                 
                                 
                                 sound_driver_channel0_fx_Rxy_routine:
0019d1 91e0 2857                 	lds ZL, pulse1_fx_Rxy_target
0019d3 91f0 2858                 	lds ZH, pulse1_fx_Rxy_target+1
0019d5 9630                      	adiw Z, 0
0019d6 f131                      	breq sound_driver_channel0_fx_xy_routine //if the effect is not enabled, skip the routine
                                 
0019d7 91a0 285b                 	lds r26, pulse1_fx_Rxy_total_offset
0019d9 91b0 285c                 	lds r27, pulse1_fx_Rxy_total_offset+1
0019db 91c0 0a8c                 	lds r28, TCB0_CCMPL
0019dd 91d0 0a8d                 	lds r29, TCB0_CCMPH
0019df 0fca                      	add r28, r26 //add the total offset to the timer period
0019e0 0fdb                      	add r29, r27
                                 
0019e1 17ce                      	cp r28, ZL //compare the new timer period with the target
0019e2 07df                      	cpc r29, ZH
0019e3 f010                      	brlo sound_driver_channel0_fx_Rxy_routine_end //if the target has been reached (or passed)
0019e4 f009                      	breq sound_driver_channel0_fx_Rxy_routine_end
0019e5 f468                      	brsh sound_driver_channel0_fx_Rxy_routine_add
                                 
                                 sound_driver_channel0_fx_Rxy_routine_end:
0019e6 1bec                      	sub ZL, r28 //calculate the difference to the target
0019e7 0bfd                      	sbc ZH, r29
0019e8 0fae                      	add r26, ZL //increase the total offset to the exact amount needed to reach the target
0019e9 1fbf                      	adc r27, ZH
0019ea 93a0 285b                 	sts pulse1_fx_Rxy_total_offset, r26 //store the total offset
0019ec 93b0 285c                 	sts pulse1_fx_Rxy_total_offset+1, r27
0019ee 9220 2857                 	sts pulse1_fx_Rxy_target, zero //loading the target with 0 stops any further calculations
0019f0 9220 2858                 	sts pulse1_fx_Rxy_target+1, zero
0019f2 c00a                      	rjmp sound_driver_channel0_fx_xy_routine
                                 
                                 sound_driver_channel0_fx_Rxy_routine_add:
0019f3 91c0 2859                 	lds r28, pulse1_fx_Rxy_speed
0019f5 91d0 285a                 	lds r29, pulse1_fx_Rxy_speed+1
0019f7 0fac                      	add r26, r28 //increase the total offset by the speed
0019f8 1fbd                      	adc r27, r29
0019f9 93a0 285b                 	sts pulse1_fx_Rxy_total_offset, r26 //store the total offset
0019fb 93b0 285c                 	sts pulse1_fx_Rxy_total_offset+1, r27
                                 
                                 
                                 sound_driver_channel0_fx_xy_routine:
                                 
                                 sound_driver_exit:
0019fd 91df                      	pop r29
0019fe 91cf                      	pop r28
0019ff c920                      	rjmp sequence_1_3 + 3 //+3 is to skip the stack instructions since we already pushed them
                                 
                                 //PULSE 1 ROUTINES
                                 pulse1_sequence_routine:
001a00 b7bf                      	in r27, CPU_SREG
001a01 93bf                      	push r27
001a02 94f8                      	cli
                                 
001a03 0cdd                      	lsl pulse1_sequence //shifts sequence to the left
001a04 1cd2                      	adc pulse1_sequence, zero //if the shifted bit was a 1, it will be added to the LSB
                                 
001a05 e0b1                      	ldi r27, TCB_CAPT_bm //clear OVF flag
001a06 93b0 0a86                 	sts TCB0_INTFLAGS, r27
001a08 91bf                      	pop r27
001a09 bfbf                      	out CPU_SREG, r27
001a0a 9518                      	reti
                                 
                                 pulse1_sweep_routine:
001a0b 2dbf                      	mov r27, pulse1_sweep
001a0c 70b7                      	andi r27, 0x07 //mask for period divider bits
001a0d f4f9                      	brne pulse1_sweep_routine_decrement_divider //check if divider != 0
                                 
                                 pulse1_sweep_routine_action: //if the divider is == 0, update the pulse timer period
001a0e 93df                      	push r29
001a0f 2ddf                      	mov r29, pulse1_sweep
001a10 95d2                      	swap r29
001a11 70d7                      	andi r29, 0x07 //mask for shift bits
001a12 f411                      	brne pulse1_sweep_routine_action_main //shift != 0
001a13 91df                      	pop r29
001a14 c019                      	rjmp pulse1_sweep_routine_check_reload //if the shift == 0, do nothing and return
                                 
                                 pulse1_sweep_routine_action_main:
001a15 91a0 0a8c                 	lds r26, TCB0_CCMPL
001a17 91b0 0a8d                 	lds r27, TCB0_CCMPH
                                 pulse1_sweep_routine_action_main_loop:
001a19 95b6                      	lsr r27
001a1a 95a7                      	ror r26
001a1b 95da                      	dec r29
001a1c f7e1                      	brne pulse1_sweep_routine_action_main_loop //keep looping/shifting until shift count is 0
                                 
001a1d fef7                      	sbrs pulse1_sweep, 7 //check the negate flag
001a1e c002                      	rjmp pulse1_sweep_routine_action_main_add //if negate flag was clear, go straight to addition
                                 
001a1f 95a0                      	com r26 //pulse1 uses one's complement if the negate flag is set
001a20 95b0                      	com r27
                                 
                                 pulse1_sweep_routine_action_main_add:
001a21 91d0 0a8c                 	lds r29, TCB0_CCMPL //perform addition to get new timer period
001a23 0fad                      	add r26, r29
001a24 91d0 0a8d                 	lds r29, TCB0_CCMPH
001a26 1fbd                      	adc r27, r29
                                 
001a27 93a0 0a8c                 	sts TCB0_CCMPL, r26 //store the new LOW bits for timer
001a29 93b0 0a8d                 	sts TCB0_CCMPH, r27 //store the new HIGH bits for timer
                                 
                                 	//sts pulse1_timerL, r26
                                 	//sts pulse1_timerH, r27
                                 
                                 /*	//Sweep Test
                                 	mov r29, pulse1_sweep //invert the negate bit
                                 	ldi r27, 0b10000000
                                 	eor r29, r27
                                 	ori r29, 0b01111111
                                 
                                 	lds r27, pulse1_sweep_param //reload the pulse sweep divider params
                                 	swap r27
                                 	ori r27, 0b10000000
                                 	and r27, r29
                                 	mov pulse1_sweep, r27
                                 	sbr channel_flags, 0b10000000*/
                                 	
001a2b 91df                      	pop r29
001a2c c001                      	rjmp pulse1_sweep_routine_check_reload
                                 
                                 pulse1_sweep_routine_decrement_divider:
001a2d 94fa                      	dec pulse1_sweep //if the divider != 0, decrement the divider
                                 
                                 pulse1_sweep_routine_check_reload:
001a2e ff97                      	sbrs channel_flags, 7 //if the reload flag is set, reload the sweep divider
001a2f 9508                      	ret
                                 
                                 pulse1_sweep_reload:
001a30 90f0 2801                 	lds pulse1_sweep, pulse1_sweep_param //NOTE: since the reload flag is kept in bit 6, we clear the reload flag indirectly
001a32 94f2                      	swap pulse1_sweep //bring data from high byte to low byte
001a33 779f                      	cbr channel_flags, 0b10000000 //clear reload flag
001a34 9508                      	ret
                                 
                                 pulse1_envelope_routine:
001a35 fd96                      	sbrc channel_flags, 6 //check if start flag is cleared
001a36 c010                      	rjmp pulse1_envelope_routine_clear_start
                                 
001a37 3000                      	cpi pulse1_volume_divider, 0x00 //check if the divider is 0
001a38 f011                      	breq PC+3 //if the divider == 0, check loop flag
001a39 950a                      	dec pulse1_volume_divider //if the divider != 0, decrement and return
001a3a 9508                      	ret
                                 
001a3b 9100 2800                 	lds pulse1_volume_divider, pulse1_param //if the divider == 0, reset the divider period
001a3d 700f                      	andi pulse1_volume_divider, 0x0F //mask for VVVV bits
001a3e ff95                      	sbrs channel_flags, 5 //check if the loop flag is set
001a3f c002                      	rjmp pulse1_envelope_routine_decrement_decay //if the loop flag is not set, check the decay
001a40 e01f                      	ldi pulse1_volume_decay, 0x0F //if the loop flag is set, reset decay and return
001a41 9508                      	ret
                                 
                                 pulse1_envelope_routine_decrement_decay:
001a42 3010                      	cpi pulse1_volume_decay, 0x00 //check if the decay is 0
001a43 f409                      	brne PC+2 //if decay != 0, go decrement
001a44 9508                      	ret //if decay == 0 && loop flag == 0, do nothing and return
001a45 951a                      	dec pulse1_volume_decay
001a46 9508                      	ret
                                 
                                 pulse1_envelope_routine_clear_start:
001a47 7b9f                      	cbr channel_flags, 0b01000000 //if the start flag is set, clear it
001a48 9100 2800                 	lds pulse1_volume_divider, pulse1_param //if the start flag is set, reset the divider period
001a4a 700f                      	andi pulse1_volume_divider, 0x0F //mask for VVVV bits
001a4b e01f                      	ldi pulse1_volume_decay, 0x0F //if the start flag is set, reset decay
001a4c 9508                      	ret
                                 
                                 //CONVERTERS (TABLES)
                                 //converts and loads 5 bit length to corresponding 8 bit length value into r29
                                 length_converter:
001a4d eae6                      	ldi ZL, LOW(length << 1)
001a4e e3f4                      	ldi ZH, HIGH(length << 1)
001a4f 0fed                      	add ZL, r29
001a50 1df2                      	adc ZH, zero
001a51 91d4                      	lpm r29, Z
001a52 9508                      	ret
                                 
001a53 7f05
001a54 010a
001a55 0214
001a56 0328
001a57 0450
001a58 051e
001a59 0607
001a5a 070d
001a5b 0806
001a5c 090c
001a5d 0a18
001a5e 0b30
001a5f 0c60
001a60 0d24
001a61 0e08
001a62 0f10                      length: .db $05, $7F, $0A, $01, $14, $02, $28, $03, $50, $04, $1E, $05, $07, $06, $0D, $07, $06, $08, $0C, $09, $18, $0A, $30, $0B, $60, $0C, $24, $0D, $08, $0E, $10, $0F
                                 
                                 //loads pulse sequence into r29
                                 duty_cycle_sequences:
001a63 ede2                      	ldi ZL, LOW(sequences << 1)
001a64 e3f4                      	ldi ZH, HIGH(sequences << 1)
001a65 0fed                      	add ZL, r29
001a66 1df2                      	adc ZH, zero
001a67 91d4                      	lpm r29, Z
001a68 9508                      	ret
                                 
                                 //pulse sequences: 12.5%, 25%, 50%, 75%
001a69 0301
001a6a fc0f                      sequences: .db 0b00000001, 0b00000011, 0b00001111, 0b11111100
                                 
                                 //list of famitracker fx: http://famitracker.com/wiki/index.php?title=Effect_list
                                 fx:
001a6b 13dc
001a6c 13e1
001a6d 13fd
001a6e 1419
001a6f 143c                      	.dw sound_driver_channel0_fx_0xy, sound_driver_channel0_fx_1xx, sound_driver_channel0_fx_2xx, sound_driver_channel0_fx_3xx, sound_driver_channel0_fx_4xy
001a70 1447
001a71 1454
001a72 1457
001a73 145a
001a74 145d                      	.dw sound_driver_channel0_fx_7xy, sound_driver_channel0_fx_Axy, sound_driver_channel0_fx_Bxx, sound_driver_channel0_fx_Cxx, sound_driver_channel0_fx_Dxx
001a75 1460
001a76 1468
001a77 146b
001a78 146e
001a79 1475                      	.dw sound_driver_channel0_fx_Exx, sound_driver_channel0_fx_Fxx, sound_driver_channel0_fx_Gxx, sound_driver_channel0_fx_Hxy, sound_driver_channel0_fx_Ixy
001a7a 147d
001a7b 147e
001a7c 147f
001a7d 1482
001a7e 14c6                      	.dw sound_driver_channel0_fx_Hxx, sound_driver_channel0_fx_Ixx, sound_driver_channel0_fx_Pxx, sound_driver_channel0_fx_Qxy, sound_driver_channel0_fx_Rxy
001a7f 1509
001a80 150c
001a81 1520
001a82 1521
001a83 1522                      	.dw sound_driver_channel0_fx_Sxx, sound_driver_channel0_fx_Vxx, sound_driver_channel0_fx_Wxx, sound_driver_channel0_fx_Xxx, sound_driver_channel0_fx_Yxx
001a84 1523                      	.dw sound_driver_channel0_fx_Zxx
                                 
                                 //famitracker volumes table: http://famitracker.com/wiki/index.php?title=Volume
                                 volumes:
001a85 0000
001a86 0000
001a87 0000
001a88 0000
001a89 0000
001a8a 0000
001a8b 0000
001a8c 0000                      	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
001a8d 0100
001a8e 0101
001a8f 0101
001a90 0101
001a91 0101
001a92 0101
001a93 0101
001a94 0101                      	.db 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01
001a95 0100
001a96 0101
001a97 0101
001a98 0101
001a99 0101
001a9a 0101
001a9b 0101
001a9c 0201                      	.db 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02
001a9d 0100
001a9e 0101
001a9f 0101
001aa0 0101
001aa1 0101
001aa2 0202
001aa3 0202
001aa4 0302                      	.db 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03
001aa5 0100
001aa6 0101
001aa7 0101
001aa8 0101
001aa9 0202
001aaa 0202
001aab 0303
001aac 0403                      	.db 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x03, 0x03, 0x03, 0x04
001aad 0100
001aae 0101
001aaf 0101
001ab0 0202
001ab1 0302
001ab2 0303
001ab3 0404
001ab4 0504                      	.db 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x03, 0x03, 0x03, 0x04, 0x04, 0x04, 0x05
001ab5 0100
001ab6 0101
001ab7 0201
001ab8 0202
001ab9 0303
001aba 0404
001abb 0504
001abc 0605                      	.db 0x00, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x03, 0x03, 0x04, 0x04, 0x04, 0x05, 0x05, 0x06
001abd 0100
001abe 0101
001abf 0201
001ac0 0302
001ac1 0403
001ac2 0504
001ac3 0605
001ac4 0706                      	.db 0x00, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x03, 0x03, 0x04, 0x04, 0x05, 0x05, 0x06, 0x06, 0x07
001ac5 0100
001ac6 0101
001ac7 0202
001ac8 0303
001ac9 0404
001aca 0505
001acb 0606
001acc 0807                      	.db 0x00, 0x01, 0x01, 0x01, 0x02, 0x02, 0x03, 0x03, 0x04, 0x04, 0x05, 0x05, 0x06, 0x06, 0x07, 0x08
001acd 0100
001ace 0101
001acf 0302
001ad0 0403
001ad1 0504
001ad2 0606
001ad3 0707
001ad4 0908                      	.db 0x00, 0x01, 0x01, 0x01, 0x02, 0x03, 0x03, 0x04, 0x04, 0x05, 0x06, 0x06, 0x07, 0x07, 0x08, 0x09
001ad5 0100
001ad6 0201
001ad7 0302
001ad8 0404
001ad9 0605
001ada 0706
001adb 0808
001adc 0a09                      	.db 0x00, 0x01, 0x01, 0x02, 0x02, 0x03, 0x04, 0x04, 0x05, 0x06, 0x06, 0x07, 0x08, 0x08, 0x09, 0x0A
001add 0100
001ade 0201
001adf 0302
001ae0 0504
001ae1 0605
001ae2 0807
001ae3 0908
001ae4 0b0a                      	.db 0x00, 0x01, 0x01, 0x02, 0x02, 0x03, 0x04, 0x05, 0x05, 0x06, 0x07, 0x08, 0x08, 0x09, 0x0A, 0x0B
001ae5 0100
001ae6 0201
001ae7 0403
001ae8 0504
001ae9 0706
001aea 0808
001aeb 0a09
001aec 0c0b                      	.db 0x00, 0x01, 0x01, 0x02, 0x03, 0x04, 0x04, 0x05, 0x06, 0x07, 0x08, 0x08, 0x09, 0x0A, 0x0B, 0x0C
001aed 0100
001aee 0201
001aef 0403
001af0 0605
001af1 0706
001af2 0908
001af3 0b0a
001af4 0d0c                      	.db 0x00, 0x01, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D
001af5 0100
001af6 0201
001af7 0403
001af8 0605
001af9 0807
001afa 0a09
001afb 0c0b
001afc 0e0d                      	.db 0x00, 0x01, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E
001afd 0100
001afe 0302
001aff 0504
001b00 0706
001b01 0908
001b02 0b0a
001b03 0d0c


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega4809" register use summary:
x  :   0 y  :   0 z  :  67 r0 :  44 r1 :  46 r2 : 202 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   6 r14:   4 r15:  13 r16:   7 r17:   6 r18:   0 r19:   0 r20:   0 
r21:   0 r22:  43 r23:  40 r24:   0 r25:  15 r26: 275 r27: 376 r28: 151 
r29: 116 r30:  95 r31:  90 
Registers used: 18 out of 35 (51.4%)

"ATmega4809" instruction use summary:
.lds  :   0 .sts  :   0 adc   :  43 add   :  58 adiw  :  29 and   :   0 
andi  :  31 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   2 brcs  :   4 break :   0 breq  :  45 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :  22 brlt  :   0 brmi  :   0 
brne  :  33 brpl  :   0 brsh  :   8 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   0 cbr   :   2 
clc   :   0 clh   :   0 cli   :   5 cln   :   0 clr   :   3 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   5 cp    :  27 cpc   :   6 
cpi   :  45 cpse  :   6 dec   :   7 des   :   0 eor   :   0 fmul  :   0 
fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   1 in    :   4 inc   :  13 
jmp   :   6 ld    :   0 ldd   :   0 ldi   :  95 lds   : 198 lpm   :  76 
lsl   :  20 lsr   :  39 mov   :  37 movw  :   0 mul   :   8 muls  :   0 
mulsu :   2 neg   :   0 nop   :   0 or    :   6 ori   :   5 out   :   7 
pop   :  34 push  :  31 rcall :  15 ret   :  13 reti  :   4 rjmp  : 132 
rol   :  13 ror   :  45 sbc   :  12 sbci  :   0 sbi   :   0 sbic  :   0 
sbis  :   0 sbiw  :   0 sbr   :   7 sbrc  :   8 sbrs  :   6 sec   :   0 
seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 
sts   : 378 sub   :  16 subi  :  13 swap  :  16 tst   :   0 wdr   :   0 

Instructions used: 51 out of 114 (44.7%)

"ATmega4809" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00360a   4388   9418  13806   49152  28.1%
[.dseg] 0x002800 0x002863      0     99     99    6144   1.6%
[.eseg] 0x000000 0x000000      0      0      0     256   0.0%

Assembly complete, 0 errors, 105 warnings
