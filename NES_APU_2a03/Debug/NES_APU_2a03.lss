
AVRASM ver. 2.2.8  C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm Sun Jan 03 00:33:23 2021

C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(9): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m4809def.inc'
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): Including file 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm'
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(9): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m4809def.inc'
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): Including file 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm'
                                 
                                 
                                 ; NES_APU_2a03.asm
                                 ;
                                 ; Created: 11/29/2020 1:44:10 AM
                                 ; Author : Tennyson Cheng
                                 ;
                                 
                                 .list
                                 
                                 .dseg
002800                           pulse1_param: .byte 1 //$4000 DDlc.vvvv = Duty cycle, Length counter halt/Loop flag, Constant volume flag, Volume
002801                           pulse1_sweep_param: .byte 1 //$4001 EPPP.NSSS = Enable, Period, Negate, Shift
                                 //NOTE: In order to account for multiplier, we use 16 instead of 11 bits for the timer
002802                           pulse1_timerL: .byte 1 //$4002 LLLL.LLLL = Low 8 bits for timer
002803                           pulse1_timerH: .byte 1 //$4002 HHHH.HHHH = High 8 bits for timer
002804                           pulse1_length: .byte 1 //$4002 000l.llll = Length counter load
002805                           pulse1_output_volume: .byte 1 //this is the final output volume of pulse 1
002806                           pulse1_note: .byte 1 //the current note index in the note table
                                 
002807                           song_frames: .byte 2
002809                           song_frame_offset: .byte 2
                                 
                                 
                                 
00280b                           pulse1_pattern: .byte 2
00280d                           pulse1_pattern_delay: .byte 1
00280e                           pulse1_pattern_offset: .byte 2
                                 
002810                           pulse1_volume_macro: .byte 2
002812                           pulse1_volume_macro_offset: .byte 1
002813                           pulse1_volume_macro_loop: .byte 1
002814                           pulse1_volume_macro_release: .byte 1
                                 
002815                           pulse1_arpeggio_macro: .byte 2
002817                           pulse1_arpeggio_macro_offset: .byte 1
002818                           pulse1_arpeggio_macro_loop: .byte 1
002819                           pulse1_arpeggio_macro_release: .byte 1
00281a                           pulse1_arpeggio_macro_mode: .byte 1
                                 
00281b                           pulse1_total_pitch_offset: .byte 1 //used to reference the overall change in pitch for the pitch macro
00281c                           pulse1_pitch_macro: .byte 2
00281e                           pulse1_pitch_macro_offset: .byte 1
00281f                           pulse1_pitch_macro_loop: .byte 1
002820                           pulse1_pitch_macro_release: .byte 1
                                 
002821                           pulse1_total_hi_pitch_offset: .byte 1 //used to reference the overall change in pitch for the hi pitch macro
002822                           pulse1_hi_pitch_macro: .byte 2
002824                           pulse1_hi_pitch_macro_offset: .byte 1
002825                           pulse1_hi_pitch_macro_loop: .byte 1
002826                           pulse1_hi_pitch_macro_release: .byte 1
                                 
002827                           pulse1_duty_macro: .byte 2
002829                           pulse1_duty_macro_offset: .byte 1
00282a                           pulse1_duty_macro_loop: .byte 1
00282b                           pulse1_duty_macro_release: .byte 1
                                 
                                 
                                 
00282c                           pulse2_pattern_delay: .byte 1
00282d                           triangle_pattern_delay: .byte 1
00282e                           noise_pattern_delay: .byte 1
00282f                           dcpm_pattern_delay: .byte 1
                                 
                                 .cseg
                                 
                                 //NOTE: zero is defined in order to use the cp instruction without the need to load 0x00 into a register beforehand
                                 .def zero = r2
                                 .def channel_flags = r25 //[pulse1.pulse2] RSlc.0000 = Reload, Start, Length halt/Loop, Constant volume
                                 .def pulse1_sequence = r13
                                 .def pulse1_length_counter = r14
                                 .def pulse1_sweep = r15 //NSSS.EPPP = Negate sweep flag, Shift, Enable sweep flag, Period divider
                                 .def pulse1_volume_divider = r16 //0000.PPPP = Period divider
                                 .def pulse1_volume_decay = r17 //0000.dddd = Decay
                                 
                                 reset:
000000 940c 2573                 	jmp init
                                 
                                 .org TCA0_OVF_vect
00000e 940c 2668                 	jmp sound_driver
                                 
                                 .org TCA0_CMP0_vect
000012 940c 264e                 	jmp sequence_0_2
                                 
                                 .org TCA0_CMP1_vect
000014 940c 2658                 	jmp sequence_1_3
                                 
                                 .org TCA0_CMP2_vect
000016 940c 264e                 	jmp sequence_0_2
                                 
                                 .org TCB0_INT_vect
000018 940c 2919                 	jmp pulse1_sequence_routine
                                 
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(142): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(143): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(144): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(145): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(148): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(150): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(151): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(154): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(156): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(159): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(162): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(163): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(166): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(167): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(170): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(171): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(172): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(179): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(181): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(183): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(184): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(185): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(187): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(188): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(189): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(190): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(195): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(197): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(198): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(200): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(211): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(213): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(215): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(217): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(218): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(223): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(225): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(231): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(232): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(234): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(237): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(239): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(241): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(242): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(244): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(245): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(246): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(249): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(250): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(252): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(254): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(265): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(266): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(268): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(271): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(274): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(275): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(278): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(279): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(282): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(283): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(284): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(300): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(312): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(315): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(317): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(319): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(321): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(325): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(327): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(329): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(333): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(338): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(340): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(342): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(353): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(358): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(372): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(373): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(380): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(383): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(384): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(388): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(391): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(393): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(394): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(395): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(396): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(397): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(398): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(405): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(413): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(414): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(415): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(418): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(421): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(423): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(424): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(431): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(434): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(436): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(437): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(440): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(441): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(443): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(444): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(445): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(446): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(448): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(450): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(451): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(453): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(455): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(461): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(468): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(475): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(477): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(481): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(483): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(485): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(486): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(487): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(489): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(490): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(492): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(493): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(494): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(495): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(500): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(506): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(514): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(517): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(524): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(525): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(526): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(529): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(531): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(532): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(533): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(534): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(536): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(537): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(540): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(542): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(543): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(544): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(546): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(547): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(548): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(551): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(552): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(554): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(555): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(556): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(558): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(559): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(560): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(562): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(563): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(564): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(569): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(573): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(576): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(577): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(584): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(588): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(592): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(596): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(597): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(598): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(600): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(604): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(96): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
                                 .list
                                 
                                 init:
                                 	//MAIN CLOCK
002573 edb8                      	ldi r27, CPU_CCP_IOREG_gc //protected write
002574 93b0 0034                 	sts CPU_CCP, r27
002576 e0b0                      	ldi r27, 0 << CLKCTRL_PEN_bp //disable prescaler for 20 MHz on main clock
002577 93b0 0061                 	sts CLKCTRL_MCLKCTRLB, r27
                                 
                                 /*	//TEST FOR C4, 1 SECOND, 50% DD
                                 	ldi r26, 0x97
                                 	ldi r27, 0x12
                                 	ldi r26, 0x15
                                 	ldi r27, 0x09
                                 	sts pulse1_timerL, r26
                                 	sts pulse1_timerH, r27
                                 	ldi r27, 0b10111111
                                 	sts pulse1_param, r27
                                 	ldi r27, 0x01
                                 	sts pulse1_length, r27
                                 	//TEST FOR SWEEP UP
                                 	ldi r27, 0b11111111
                                 	sts pulse1_sweep_param, r27*/
                                 
                                 	//ZERO
002579 2422                      	clr zero
                                 
                                 	//MEMORY
00257a e3b0                      	ldi r27, 0b00110000
00257b 93b0 2800                 	sts pulse1_param, r27
00257d e8b0                      	ldi r27, 0b10000000
00257e 93b0 2801                 	sts pulse1_sweep_param, r27
002580 efbf                      	ldi r27, 0xFF
002581 93b0 2802                 	sts pulse1_timerL, r27
002583 93b0 2803                 	sts pulse1_timerH, r27
002585 93b0 2804                 	sts pulse1_length, r27
                                 
002587 e0b0                      	ldi r27, 0x00
002588 93b0 2809                 	sts song_frame_offset, r27
00258a 93b0 280a                 	sts song_frame_offset+1, r27
00258c eee2                      	ldi ZL, LOW(song0_frames << 1)
00258d e0f0                      	ldi ZH, HIGH(song0_frames << 1)
00258e 93e0 2807                 	sts song_frames, ZL
002590 93f0 2808                 	sts song_frames+1, ZH
                                 
                                 	//CHANNEL 0 TEST
002592 e0b0                      	ldi r27, 0x00
002593 0feb                      	add ZL, r27
002594 1df2                      	adc ZH, zero
002595 91a5                      	lpm r26, Z+
002596 91b4                      	lpm r27, Z
002597 0faa                      	lsl r26
002598 1fbb                      	rol r27
002599 93a0 280b                 	sts pulse1_pattern, r26
00259b 93b0 280c                 	sts pulse1_pattern+1, r27
00259d e0b0                      	ldi r27, 0x00
00259e 9220 280d                 	sts pulse1_pattern_delay, zero
0025a0 9220 280e                 	sts pulse1_pattern_offset, zero
0025a2 9220 280f                 	sts pulse1_pattern_offset+1, zero
                                 
                                 	//channel 0 instrument macros
0025a4 efbf                      	ldi r27, 0xFF
0025a5 9220 2812                 	sts pulse1_volume_macro_offset, zero
0025a7 93b0 2813                 	sts pulse1_volume_macro_loop, r27
0025a9 93b0 2814                 	sts pulse1_volume_macro_release, r27
0025ab 9220 2817                 	sts pulse1_arpeggio_macro_offset, zero
0025ad 93b0 2818                 	sts pulse1_arpeggio_macro_loop, r27
0025af 93b0 2819                 	sts pulse1_arpeggio_macro_release, r27
0025b1 93b0 281a                 	sts pulse1_arpeggio_macro_mode, r27
0025b3 9220 281e                 	sts pulse1_pitch_macro_offset, zero
0025b5 93b0 281f                 	sts pulse1_pitch_macro_loop, r27
0025b7 93b0 2820                 	sts pulse1_pitch_macro_release, r27
0025b9 9220 2824                 	sts pulse1_hi_pitch_macro_offset, zero
0025bb 93b0 2825                 	sts pulse1_hi_pitch_macro_loop, r27
0025bd 93b0 2826                 	sts pulse1_hi_pitch_macro_release, r27
0025bf 9220 2829                 	sts pulse1_duty_macro_offset, zero
0025c1 93b0 282a                 	sts pulse1_duty_macro_loop, r27
0025c3 93b0 282b                 	sts pulse1_duty_macro_release, r27
                                 
0025c5 9220 2810                 	sts pulse1_volume_macro, zero
0025c7 9220 2811                 	sts pulse1_volume_macro+1, zero
0025c9 9220 2815                 	sts pulse1_arpeggio_macro, zero
0025cb 9220 2816                 	sts pulse1_arpeggio_macro+1, zero
0025cd 9220 281b                 	sts pulse1_total_pitch_offset, zero
0025cf 9220 281c                 	sts pulse1_pitch_macro, zero
0025d1 9220 281d                 	sts pulse1_pitch_macro+1, zero
0025d3 9220 2821                 	sts pulse1_total_hi_pitch_offset, zero
0025d5 9220 2822                 	sts pulse1_hi_pitch_macro, zero
0025d7 9220 2823                 	sts pulse1_hi_pitch_macro+1, zero
0025d9 9220 2827                 	sts pulse1_duty_macro, zero
0025db 9220 2828                 	sts pulse1_duty_macro+1, zero
                                 
0025dd 9220 282c                 	sts pulse2_pattern_delay, zero
0025df 9220 282d                 	sts triangle_pattern_delay, zero
0025e1 9220 282e                 	sts noise_pattern_delay, zero
0025e3 9220 282f                 	sts dcpm_pattern_delay, zero
                                 
                                 	//PINS
0025e5 efbf                      	ldi r27, 0xFF //set all pins in VPORTD to output
0025e6 b9b0                      	out VPORTA_DIR, r27
                                 
                                 	//ENVELOPE
0025e7 e00f                      	ldi pulse1_volume_divider, 0x0F
0025e8 9110 2800                 	lds pulse1_volume_decay, pulse1_param
0025ea 701f                      	andi pulse1_volume_decay, 0x0F //mask for VVVV bits
0025eb 9190 2800                 	lds channel_flags, pulse1_param
0025ed 7390                      	andi channel_flags, 0b00110000
0025ee 6490                      	sbr channel_flags, 0b01000000 //set start flag
0025ef 9220 2805                 	sts pulse1_output_volume, zero
                                 	
                                 	//LENGTH
0025f1 91d0 2804                 	lds r29, pulse1_length
0025f3 d372                      	rcall length_converter
0025f4 2eed                      	mov pulse1_length_counter, r29
                                 
                                 	//SEQUENCE
0025f5 91d0 2800                 	lds r29, pulse1_param //load param for sequence table
0025f7 0fdd                      	lsl r29 //shift duty cycle bits to LSB
0025f8 1fdd                      	rol r29
0025f9 1fdd                      	rol r29
0025fa 70d3                      	andi r29, 0b00000011 //mask duty cycle bits
0025fb d380                      	rcall duty_cycle_sequences
0025fc 2edd                      	mov pulse1_sequence, r29
                                 
                                 	//SWEEP
0025fd 90f0 2801                 	lds pulse1_sweep, pulse1_sweep_param
0025ff 94f2                      	swap pulse1_sweep //swap data from high byte and low byte
002600 6890                      	sbr channel_flags, 0b10000000 //set reload flag
                                 
                                 	//TIMERS
                                 	//Frame Counter
                                 	//NOTE:The frame counter will be defaulted to NTSC mode (60 Hz, 120 Hz, 240 Hz)
                                 	//Each interrupt will be setup to interrupt every 240 Hz clock
                                 	//CMP0 = sequence 0, CMP1 = sequence 1, CMP2 = sequence 2, OVF = sequence 3/sound driver
                                 	//Sequence 3 will clock the sound driver every 60Hz, in which new audio data is read and written to the registers
                                 	//Timer period Calculation: (0.00416666666 * 20000000/64)-1 = 1301.08333125 = 0x0515
                                 	//The ATmega4809 is cofigured to run at 20000000 Hz
                                 	//0.00416666666 seconds is the period for 240 Hz
                                 	//The /64 comes from the prescaler divider used
002601 e7b0                      	ldi r27, TCA_SINGLE_CMP0EN_bm | TCA_SINGLE_CMP1EN_bm | TCA_SINGLE_CMP2EN_bm | TCA_SINGLE_WGMODE_NORMAL_gc //interrupt mode
002602 93b0 0a01                 	sts TCA0_SINGLE_CTRLB, r27
002604 e7b1                      	ldi r27, TCA_SINGLE_CMP0_bm | TCA_SINGLE_CMP1_bm | TCA_SINGLE_CMP2_bm | TCA_SINGLE_OVF_bm //enable overflow and compare interrupts
002605 93b0 0a0a                 	sts TCA0_SINGLE_INTCTRL, r27
002607 e1b5                      	ldi r27, 0x15 //set the period for CMP0
002608 93b0 0a28                 	sts TCA0_SINGLE_CMP0, r27
00260a e0b5                      	ldi r27, 0x05
00260b 93b0 0a29                 	sts TCA0_SINGLE_CMP0 + 1, r27
00260d e2bb                      	ldi r27, 0x2B //set the period for CMP1
00260e 93b0 0a2a                 	sts TCA0_SINGLE_CMP1, r27
002610 e0ba                      	ldi r27, 0x0A
002611 93b0 0a2b                 	sts TCA0_SINGLE_CMP1 + 1, r27
002613 e4b1                      	ldi r27, 0x41 //set the period for CMP2
002614 93b0 0a2c                 	sts TCA0_SINGLE_CMP2, r27
002616 e0bf                      	ldi r27, 0x0F
002617 93b0 0a2d                 	sts TCA0_SINGLE_CMP2 + 1, r27
002619 e5b7                      	ldi r27, 0x57 //set the period for OVF
00261a 93b0 0a26                 	sts TCA0_SINGLE_PER, r27
00261c e1b4                      	ldi r27, 0x14
00261d 93b0 0a27                 	sts TCA0_SINGLE_PER + 1, r27
00261f e0bb                      	ldi r27, TCA_SINGLE_CLKSEL_DIV64_gc | TCA_SINGLE_ENABLE_bm //use prescale divider of 64 and enable timer
002620 93b0 0a00                 	sts TCA0_SINGLE_CTRLA, r27
                                 
                                 	//NOTE: Channel Timers are clocked (20/2)/(0.8948865) = 11.1746014718 times faster than the NES APU
                                 	//Because of this, we multiply all the NES timer values by 11.1746014718 beforehand
                                 	//Since we rotate the sequence when the timer goes from t-(t-1) to 0, instead of 0 to t like the NES, we add 1 to the NES timers before multiplying
                                 	//The ATmega4809 is configured to run at 20 MHz
                                 	//The /2 comes from the prescaler divider used
                                 	//0.8948865 MHz is the speed of the NTSC NES APU
                                 	//NOTE: This means that any offset to the pitch for the NES timers would be multiplied by 11.1746014718 aswell.
                                 	//Pulse 1
002622 e0b0                      	ldi r27, TCB_CNTMODE_INT_gc //interrupt mode
002623 93b0 0a81                 	sts TCB0_CTRLB, r27
002625 e0b1                      	ldi r27, TCB_CAPT_bm //enable interrupts
002626 93b0 0a85                 	sts TCB0_INTCTRL, r27
002628 91b0 2802                 	lds r27, pulse1_timerL //load the LOW bits for timer
00262a 93b0 0a8c                 	sts TCB0_CCMPL, r27
00262c 91b0 2803                 	lds r27, pulse1_timerH //load the HIGH bits for timer
00262e 93b0 0a8d                 	sts TCB0_CCMPH, r27
002630 e0b3                      	ldi r27, TCB_CLKSEL_CLKDIV2_gc | TCB_ENABLE_bm //use prescaler divider of 2 and enable timer
002631 93b0 0a80                 	sts TCB0_CTRLA, r27
002633 9478                      	sei //global interrupt enable
                                 
                                 pulse1:
002634 fed0                      	sbrs pulse1_sequence, 0 //if the sequence output is zero, return
002635 c012                      	rjmp pulse1_off
                                 
002636 14e2                      	cp pulse1_length_counter, zero //if length is zero, return
002637 f081                      	breq pulse1_off
                                 
                                 	//NOTE: We will just mute the pulse when the current period is < $0008
                                 	//This is done in order to account for the sweep unit muting the channel when the period is < $0008,
                                 	//Due to the 11.1746014718 timer multiplier being applied to the timer periods, $0008 becomes $0059
                                 pulse1_check_timer_08:
002638 91c0 0a8c                 	lds r28, TCB0_CCMPL
00263a 91d0 0a8d                 	lds r29, TCB0_CCMPH
                                 pulse1_check_timer_08_HIGH:
00263c 30d1                      	cpi r29, 0x01 //check timer HIGH period
00263d f008                      	brlo pulse1_check_timer_08_LOW //if the timer HIGH period is $00, check the LOW period
00263e c002                      	rjmp pulse1_check_timer_7FF_HIGH //if the timer HIGH period is > $01, check > $07FF condition
                                 pulse1_check_timer_08_LOW:
00263f 35c9                      	cpi r28, 0x59 //check timer LOW period
002640 f038                      	brlo pulse1_off //if the HIGH period == $00 && LOW period <= $59, pulse off
                                 
                                 	//NOTE: Since it'd be too taxing to calculate a target period for every APU clock in the sweep unit,
                                 	//we will be muting the channel if it's period ever reaches $07FF, aka the target period was == $07FF
                                 	//Doing this does not account for the real NES "feature" of muting the pulse even if the sweep unit was disabled.
                                 	//Due to the 11.1746014718 timer multiplier being applied to the timer periods, $07FF becomes $5965
                                 pulse1_check_timer_7FF_HIGH:
002641 35d9                      	cpi r29, 0x59 //check timer HIGH period
002642 f038                      	brlo pulse1_on //if the HIGH period is < $59, then all conditions have passed and pulse is not muted
002643 f009                      	breq pulse1_check_timer_7FF_LOW //if the HIGH period is == $59, we go check if the LOW period is < $65
002644 c003                      	rjmp pulse1_off //pulse off if HIGH period is > $59
                                 pulse1_check_timer_7FF_LOW:
002645 36c5                      	cpi r28, 0x65 //check timer LOW period
002646 f408                      	brsh pulse1_off //if the HIGH period == $59 && LOW period >= $65, pulse off
002647 c002                      	rjmp pulse1_on //if the HIGH period == $59 && LOW period < $65, pulse on
                                 
                                 pulse1_off:
002648 b821                      	out VPORTA_OUT, zero
002649 cfea                      	rjmp pulse1
                                 
                                 pulse1_on:
00264a 91d0 2805                 	lds r29, pulse1_output_volume
                                 /*	cpse r29, zero
                                 	rjmp pulse1_off //if VVVV bits are 0, then there is no volume (channel off)*/
                                 
00264c b9d1                      	out VPORTA_OUT, r29
00264d cfe6                      	rjmp pulse1
                                 
                                 //FRAME COUNTER/AUDIO SAMPLE ISR
                                 sequence_0_2:
00264e b7bf                      	in r27, CPU_SREG
00264f 93bf                      	push r27
002650 94f8                      	cli
                                 
                                 	//ENVELOPE
002651 d2fc                      	rcall pulse1_envelope_routine
                                 
002652 e5b0                      	ldi r27, TCA_SINGLE_CMP0_bm | TCA_SINGLE_CMP2_bm //clear OVF flag
002653 93b0 0a0b                 	sts TCA0_SINGLE_INTFLAGS, r27
002655 91bf                      	pop r27
002656 bfbf                      	out CPU_SREG, r27
002657 9518                      	reti
                                 
                                 sequence_1_3:
002658 b7bf                      	in r27, CPU_SREG
002659 93bf                      	push r27
00265a 94f8                      	cli
                                 
                                 	//ENVELOPE
00265b d2f2                      	rcall pulse1_envelope_routine
                                 
                                 	//SWEEP
00265c fcf3                      	sbrc pulse1_sweep, 3 //check if the sweep enable bit is cleared
00265d d2c6                      	rcall pulse1_sweep_routine
                                 
                                 	//LENGTH
                                 	//NOTE: The length routine is relatively simple, so we will not be using clocks to rjmp and ret to a seperate lable
00265e fd95                      	sbrc channel_flags, 5 //check if the length counter halt bit is cleared
00265f c002                      	rjmp sequence_1_3_exit
002660 10e2                      	cpse pulse1_length_counter, zero //if length counter is already 0, don't decrement
002661 94ea                      	dec pulse1_length_counter
                                 
                                 sequence_1_3_exit:
002662 e2b1                      	ldi r27, TCA_SINGLE_CMP1_bm | TCA_SINGLE_OVF_bm //clear OVF flag
002663 93b0 0a0b                 	sts TCA0_SINGLE_INTFLAGS, r27
002665 91bf                      	pop r27
002666 bfbf                      	out CPU_SREG, r27
002667 9518                      	reti
                                 
                                 sound_driver:
002668 b7bf                      	in r27, CPU_SREG
002669 93bf                      	push r27
00266a 94f8                      	cli
00266b 93cf                      	push r28
00266c 93df                      	push r29
                                 
                                 	//SOUND DRIVER
00266d 91b0 280d                 	lds r27, pulse1_pattern_delay
00266f 11b2                      	cpse r27, zero //if the pattern delay is 0, proceed with sound driver procedures
002670 c125                      	rjmp sound_driver_decrement_frame_delay //if the pattern delay is not 0, decrement the delay
                                 
                                 
                                 
                                 sound_driver_channel0:
002671 91e0 280b                 	lds ZL, pulse1_pattern //current pattern for pulse 1
002673 91f0 280c                 	lds ZH, pulse1_pattern+1
002675 91a0 280e                 	lds r26, pulse1_pattern_offset //current offset in the pattern for pulse 1
002677 91b0 280f                 	lds r27, pulse1_pattern_offset+1
002679 0fea                      	add ZL, r26 //offset the current pattern pointer to point to new byte data
00267a 1ffb                      	adc ZH, r27
00267b 91b4                      	lpm r27, Z //load the byte data from the current pattern
                                 
                                 sound_driver_channel0_check_if_note: //check if data is a note (0x00 - 0x56)
00267c 35b7                      	cpi r27, 0x57
00267d f408                      	brsh sound_driver_channel0_check_if_volume
00267e c00d                      	rjmp sound_driver_channel0_note
                                 sound_driver_channel0_check_if_volume: //check if data is volume (0x57-0x66)
00267f 36b7                      	cpi r27, 0x67
002680 f408                      	brsh sound_driver_channel0_check_if_delay
002681 c01e                      	rjmp sound_driver_channel0_volume
                                 sound_driver_channel0_check_if_delay: //check if data is a delay (0x67 - 0xE1)
002682 3eb2                      	cpi r27, 0xE2
002683 f408                      	brsh sound_driver_channel0_check_if_instrument
002684 c025                      	rjmp sound_driver_channel0_delay
                                 sound_driver_channel0_check_if_instrument: //check for instrument flag (0xE2)
002685 f409                      	brne sound_driver_channel0_check_if_release
002686 c028                      	rjmp sound_driver_channel0_instrument_change 
                                 sound_driver_channel0_check_if_release: //check for note release flag (0xE3)
002687 3eb3                      	cpi r27, 0xE3
002688 f409                      	brne sound_driver_channel0_check_if_end
002689 c0b7                      	rjmp sound_driver_channel0_release
                                 sound_driver_channel0_check_if_fx: //binary search for fx flags (0xE4 - 0xFE)
                                 
                                 sound_driver_channel0_check_if_end:
00268a 3fbf                      	cpi r27, 0xFF //check if data is the last byte of data (0xFF)
00268b c0da                      	rjmp sound_driver_channel0_next_pattern
                                 
                                 
                                 
                                 sound_driver_channel0_note:
00268c 93b0 2806                 	sts pulse1_note, r27 //store the note index
00268e e0a3                      	ldi r26, 0x03
00268f e0b2                      	ldi r27, 0x02
002690 93b0 2812                 	sts pulse1_volume_macro_offset, r27 //reset all macro offsets
002692 93a0 2817                 	sts pulse1_arpeggio_macro_offset, r26
002694 93b0 281e                 	sts pulse1_pitch_macro_offset, r27
002696 93b0 2824                 	sts pulse1_hi_pitch_macro_offset, r27
002698 93b0 2829                 	sts pulse1_duty_macro_offset, r27
00269a 9220 281b                 	sts pulse1_total_pitch_offset, zero //reset the pitch and hi pitch offset
00269c 9220 2821                 	sts pulse1_total_hi_pitch_offset, zero
00269e d0e3                      	rcall sound_driver_channel0_increment_offset
00269f cfd1                      	rjmp sound_driver_channel0
                                 
                                 
                                 
                                 sound_driver_channel0_volume:
0026a0 55b7                      	subi r27, 0x57 //NOTE: the delay values are offset by the highest volume value, which is 0x56
0026a1 91a0 2800                 	lds r26, pulse1_param
0026a3 7fa0                      	andi r26, 0xF0 //clear previous VVVV volume bits
0026a4 2bab                      	or r26, r27 //move new VVVV bits into pulse1_param
0026a5 93a0 2800                 	sts pulse1_param, r26
0026a7 6096                      	sbr channel_flags, 6
0026a8 d0d9                      	rcall sound_driver_channel0_increment_offset
0026a9 cfc7                      	rjmp sound_driver_channel0
                                 
                                 
                                 
                                 sound_driver_channel0_delay:
0026aa 56b7                      	subi r27, 0x67 //NOTE: the delay values are offset by the highest volume value, which is 0x66
0026ab 93b0 280d                 	sts pulse1_pattern_delay, r27
0026ad d0d4                      	rcall sound_driver_channel0_increment_offset
0026ae c0ea                      	rjmp sound_driver_instrument_routine
                                 
                                 
                                 
                                 sound_driver_channel0_instrument_change:
0026af 9220 2810                 	sts pulse1_volume_macro, zero //reset all macro addresses
0026b1 9220 2811                 	sts pulse1_volume_macro+1, zero
0026b3 9220 2815                 	sts pulse1_arpeggio_macro, zero
0026b5 9220 2816                 	sts pulse1_arpeggio_macro+1, zero
0026b7 9220 281c                 	sts pulse1_pitch_macro, zero
0026b9 9220 281d                 	sts pulse1_pitch_macro+1, zero
0026bb 9220 2822                 	sts pulse1_hi_pitch_macro, zero
0026bd 9220 2823                 	sts pulse1_hi_pitch_macro+1, zero
0026bf 9220 2827                 	sts pulse1_duty_macro, zero
0026c1 9220 2828                 	sts pulse1_duty_macro+1, zero
                                 
0026c3 9631                      	adiw Z, 1 //point to the byte next to the flag
0026c4 91b4                      	lpm r27, Z //store the instrument offset into r27
0026c5 e7e1                      	ldi ZL, LOW(instruments) //point Z to instruments table
0026c6 e2f5                      	ldi ZH, HIGH(instruments)
0026c7 0feb                      	add ZL, r27 //point Z to offsetted instrument
0026c8 1df2                      	adc ZH, zero
0026c9 0fee                      	lsl ZL //multiply by 2 to make Z into a byte pointer for the instrument's address
0026ca 1fff                      	rol ZH
0026cb 91a5                      	lpm r26, Z+ //r26:r27 now points to the instrument
0026cc 91b4                      	lpm r27, Z
                                 
0026cd 0faa                      	lsl r26 //multiply by 2 to make r26:r27 into a byte pointer for the instrument's data
0026ce 1fbb                      	rol r27
0026cf 2fea                      	mov ZL, r26
0026d0 2ffb                      	mov ZH, r27
0026d1 91b4                      	lpm r27, Z //get macro header byte. NOTE: Each macro type for each intrument is represented by a bit in this byte. 1 indicates that the instrument uses a macro of it's corresponding type.
0026d2 9632                      	adiw Z, 2 //point Z to the address of the macro
0026d3 e0a6                      	ldi r26, 6 //(6-1) = 5 for the 5 different macro types. NOTE: bit 0 = volume, bit 1 = arpeggio, bit 2 = pitch, bit 3 = hi pitch, bit 4 = duty
                                 sound_driver_channel0_instrument_change_macro_loop:
0026d4 95aa                      	dec r26
0026d5 f019                      	breq sound_driver_channel0_instrument_change_exit
0026d6 95b6                      	lsr r27
0026d7 f078                      	brcs sound_driver_channel0_instrument_change_load_macro
0026d8 cffb                      	rjmp sound_driver_channel0_instrument_change_macro_loop
                                 
                                 
                                 
                                 sound_driver_channel0_instrument_change_exit:
0026d9 e0a3                      	ldi r26, 0x03
0026da e0b2                      	ldi r27, 0x02
0026db 93b0 2812                 	sts pulse1_volume_macro_offset, r27 //reset all macro offsets
0026dd 93a0 2817                 	sts pulse1_arpeggio_macro_offset, r26
0026df 93b0 281e                 	sts pulse1_pitch_macro_offset, r27
0026e1 93b0 2824                 	sts pulse1_hi_pitch_macro_offset, r27
0026e3 93b0 2829                 	sts pulse1_duty_macro_offset, r27
0026e5 d0a6                      	rcall sound_driver_channel0_increment_offset_twice
0026e6 cf8a                      	rjmp sound_driver_channel0
                                 
                                 
                                 
                                 sound_driver_channel0_instrument_change_load_macro:
0026e7 91c5                      	lpm r28, Z+ //r28:r29 now point to the macro
0026e8 91d5                      	lpm r29, Z+
                                 
0026e9 30a5                      	cpi r26, 5
0026ea f039                      	breq sound_driver_channel0_instrument_change_load_macro_volume
0026eb 30a4                      	cpi r26, 4
0026ec f079                      	breq sound_driver_channel0_instrument_change_load_macro_arpeggio
0026ed 30a3                      	cpi r26, 3
0026ee f099                      	breq sound_driver_channel0_instrument_change_load_macro_pitch
0026ef 30a2                      	cpi r26, 2
0026f0 f0e9                      	breq sound_driver_channel0_instrument_change_load_macro_hi_pitch
0026f1 c028                      	rjmp sound_driver_channel0_instrument_change_load_macro_duty
                                 
                                 sound_driver_channel0_instrument_change_load_macro_volume:
0026f2 93c0 2810                 	sts pulse1_volume_macro, r28
0026f4 93d0 2811                 	sts pulse1_volume_macro+1, r29
0026f6 d02d                      	rcall sound_driver_channel0_instrument_change_read_header
0026f7 93c0 2814                 	sts pulse1_volume_macro_release, r28
0026f9 93d0 2813                 	sts pulse1_volume_macro_loop, r29
0026fb cfd8                      	rjmp sound_driver_channel0_instrument_change_macro_loop
                                 	
                                 sound_driver_channel0_instrument_change_load_macro_arpeggio:
0026fc 93c0 2815                 	sts pulse1_arpeggio_macro, r28
0026fe 93d0 2816                 	sts pulse1_arpeggio_macro+1, r29
002700 d02e                      	rcall sound_driver_channel0_instrument_change_read_header_arpeggio
002701 cfd2                      	rjmp sound_driver_channel0_instrument_change_macro_loop
                                 
                                 sound_driver_channel0_instrument_change_load_macro_pitch:
002702 93c0 281c                 	sts pulse1_pitch_macro, r28
002704 93d0 281d                 	sts pulse1_pitch_macro+1, r29
002706 9220 281b                 	sts pulse1_total_pitch_offset, zero //reset the pitch offset
002708 d01b                      	rcall sound_driver_channel0_instrument_change_read_header
002709 93c0 2820                 	sts pulse1_pitch_macro_release, r28
00270b 93d0 281f                 	sts pulse1_pitch_macro_loop, r29
00270d cfc6                      	rjmp sound_driver_channel0_instrument_change_macro_loop
                                 
                                 sound_driver_channel0_instrument_change_load_macro_hi_pitch:
00270e 93c0 2822                 	sts pulse1_hi_pitch_macro, r28
002710 93d0 2823                 	sts pulse1_hi_pitch_macro+1, r29
002712 9220 2821                 	sts pulse1_total_hi_pitch_offset, zero //reset the hi pitch offset
002714 d00f                      	rcall sound_driver_channel0_instrument_change_read_header
002715 93c0 2826                 	sts pulse1_hi_pitch_macro_release, r28
002717 93d0 2825                 	sts pulse1_hi_pitch_macro_loop, r29
002719 cfba                      	rjmp sound_driver_channel0_instrument_change_macro_loop
                                 
                                 sound_driver_channel0_instrument_change_load_macro_duty:
00271a 93c0 2827                 	sts pulse1_duty_macro, r28
00271c 93d0 2828                 	sts pulse1_duty_macro+1, r29
00271e d005                      	rcall sound_driver_channel0_instrument_change_read_header
00271f 93c0 282b                 	sts pulse1_duty_macro_release, r28
002721 93d0 282a                 	sts pulse1_duty_macro_loop, r29
002723 cfb0                      	rjmp sound_driver_channel0_instrument_change_macro_loop
                                 
                                 
                                 
                                 sound_driver_channel0_instrument_change_read_header:
002724 93ef                      	push ZL
002725 93ff                      	push ZH
002726 2fec                      	mov ZL, r28
002727 2ffd                      	mov ZH, r29
002728 0fee                      	lsl ZL
002729 1fff                      	rol ZH
00272a 91c5                      	lpm r28, Z+
00272b 91d4                      	lpm r29, Z
00272c 91ff                      	pop ZH
00272d 91ef                      	pop ZL
00272e 9508                      	ret
                                 
                                 sound_driver_channel0_instrument_change_read_header_arpeggio:
00272f 93ef                      	push ZL
002730 93ff                      	push ZH
002731 2fec                      	mov ZL, r28
002732 2ffd                      	mov ZH, r29
002733 0fee                      	lsl ZL
002734 1fff                      	rol ZH
002735 91c5                      	lpm r28, Z+
002736 91d5                      	lpm r29, Z+
002737 93c0 2819                 	sts pulse1_arpeggio_macro_release, r28
002739 93d0 2818                 	sts pulse1_arpeggio_macro_loop, r29
00273b 91c4                      	lpm r28, Z
00273c 93c0 281a                 	sts pulse1_arpeggio_macro_mode, r28
00273e 91ff                      	pop ZH
00273f 91ef                      	pop ZL
002740 9508                      	ret
                                 
                                 
                                 
                                 sound_driver_channel0_release:
                                 sound_driver_channel0_release_volume:
002741 91b0 2814                 	lds r27, pulse1_volume_macro_release
002743 3fbf                      	cpi r27, 0xFF //check if volume macro has a release flag
002744 f019                      	breq sound_driver_channel0_release_arpeggio //if the macro has no release flag, check the next macro
002745 95b3                      	inc r27
002746 93b0 2812                 	sts pulse1_volume_macro_offset, r27 //adjust offset so that it starts after the release flag index
                                 sound_driver_channel0_release_arpeggio:
002748 91b0 2819                 	lds r27, pulse1_arpeggio_macro_release
00274a 3fbf                      	cpi r27, 0xFF //check if arpeggio macro has a release flag
00274b f019                      	breq sound_driver_channel0_release_pitch
00274c 95b3                      	inc r27
00274d 93b0 2817                 	sts pulse1_arpeggio_macro_offset, r27
                                 sound_driver_channel0_release_pitch:
00274f 91b0 2820                 	lds r27, pulse1_pitch_macro_release
002751 3fbf                      	cpi r27, 0xFF //check if pitch macro has a release flag
002752 f019                      	breq sound_driver_channel0_release_hi_pitch
002753 95b3                      	inc r27
002754 93b0 281e                 	sts pulse1_pitch_macro_offset, r27
                                 sound_driver_channel0_release_hi_pitch:
002756 91b0 2826                 	lds r27, pulse1_hi_pitch_macro_release
002758 3fbf                      	cpi r27, 0xFF //check if hi_pitch macro has a release flag
002759 f019                      	breq sound_driver_channel0_release_duty
00275a 95b3                      	inc r27
00275b 93b0 2824                 	sts pulse1_hi_pitch_macro_offset, r27
                                 sound_driver_channel0_release_duty:
00275d 91b0 282b                 	lds r27, pulse1_duty_macro_release
00275f 3fbf                      	cpi r27, 0xFF //check if duty macro has a release flag
002760 f019                      	breq sound_driver_channel0_release_exit
002761 95b3                      	inc r27
002762 93b0 2829                 	sts pulse1_duty_macro_offset, r27
                                 sound_driver_channel0_release_exit:
002764 d01d                      	rcall sound_driver_channel0_increment_offset
002765 cf0b                      	rjmp sound_driver_channel0
                                 
                                 
                                 
                                 sound_driver_channel0_next_pattern:
002766 91e0 2807                 	lds ZL, song_frames
002768 91f0 2808                 	lds ZH, song_frames+1
00276a 91a0 2809                 	lds r26, song_frame_offset //we must offset to the appropriate channel
00276c 91b0 280a                 	lds r27, song_frame_offset+1
00276e 961a                      	adiw r27:r26, 10 //increment the frame offset by (5*2 = 10) since there are 5 channel patterns per frame. We *2 because we are getting byte values from the table
00276f 93a0 2809                 	sts song_frame_offset, r26
002771 93b0 280a                 	sts song_frame_offset+1, r27
                                 	//adiw r27:r26, 2 //offset for channel 1 (test)
002773 0fea                      	add ZL, r26
002774 1ffb                      	adc ZH, r27
                                 
002775 91a5                      	lpm r26, Z+ //load the address of the next pattern
002776 91b4                      	lpm r27, Z
002777 0faa                      	lsl r26
002778 1fbb                      	rol r27
002779 93a0 280b                 	sts pulse1_pattern, r26
00277b 93b0 280c                 	sts pulse1_pattern+1, r27
                                 
00277d 9220 280e                 	sts pulse1_pattern_offset, zero //restart the pattern offset back to 0 because we are reading from a new pattern now
00277f 9220 280f                 	sts pulse1_pattern_offset+1, zero
002781 ceef                      	rjmp sound_driver_channel0
                                 
                                 
                                 
                                 sound_driver_channel0_increment_offset:
002782 91e0 280e                 	lds ZL, pulse1_pattern_offset //current offset in the pattern for pulse 1
002784 91f0 280f                 	lds ZH, pulse1_pattern_offset+1
002786 9631                      	adiw Z, 1
002787 93e0 280e                 	sts pulse1_pattern_offset, ZL
002789 93f0 280f                 	sts pulse1_pattern_offset+1, ZH
00278b 9508                      	ret
                                 
                                 sound_driver_channel0_increment_offset_twice: //used for data that takes up 2 bytes worth of space
00278c 91e0 280e                 	lds ZL, pulse1_pattern_offset //current offset in the pattern for pulse 1
00278e 91f0 280f                 	lds ZH, pulse1_pattern_offset+1
002790 9632                      	adiw Z, 2 //increment the pointer twice
002791 93e0 280e                 	sts pulse1_pattern_offset, ZL
002793 93f0 280f                 	sts pulse1_pattern_offset+1, ZH
002795 9508                      	ret
                                 
                                 
                                 
                                 sound_driver_decrement_frame_delay:
002796 95ba                      	dec r27
002797 93b0 280d                 	sts pulse1_pattern_delay, r27
                                 
                                 
                                 
                                 sound_driver_instrument_routine:
                                 sound_driver_instrument_routine_channel0_volume:
002799 91e0 2810                 	lds ZL, pulse1_volume_macro
00279b 91f0 2811                 	lds ZH, pulse1_volume_macro+1
00279d 9630                      	adiw Z, 0
00279e f181                      	breq sound_driver_instrument_routine_channel0_volume_default //if no volume macro is in use, use default multiplier of F
00279f 0fee                      	lsl ZL //multiply by 2 to make Z into a byte pointer for the macro's address
0027a0 1fff                      	rol ZH
0027a1 91a0 2812                 	lds r26, pulse1_volume_macro_offset
0027a3 0fea                      	add ZL, r26
0027a4 1df2                      	adc ZH, zero
                                 
0027a5 91b0 2814                 	lds r27, pulse1_volume_macro_release
0027a7 17ba                      	cp r27, r26
0027a8 f429                      	brne sound_driver_instrument_routine_channel0_volume_increment //if the current offset is not equal to the release index, increment the offset
0027a9 91a0 2813                 	lds r26, pulse1_volume_macro_loop
0027ab 17ab                      	cp r26, r27 //check if loop flag exists NOTE: a loop flag and a release flag can only co-exist if the loop is less than the release
0027ac f010                      	brlo sound_driver_instrument_routine_channel0_volume_increment+1 //if the current offset is equal to the release index and there is a loop, load the offset with the loop index, but also read the current index data
0027ad c003                      	rjmp sound_driver_instrument_routine_channel0_volume_read //if the current offset is equal to the release index and there is no loop, then keep the offset unchanged
                                 
                                 sound_driver_instrument_routine_channel0_volume_increment:
0027ae 95a3                      	inc r26 //increment the macro offset
0027af 93a0 2812                 	sts pulse1_volume_macro_offset, r26
                                 	
                                 sound_driver_instrument_routine_channel0_volume_read:
0027b1 91b4                      	lpm r27, Z //load volume data into r27
0027b2 3fbf                      	cpi r27, 0xFF //check for macro end flag
0027b3 f469                      	brne sound_driver_instrument_routine_channel0_volume_calculate //if the data was not the macro end flag, calculate the volume
                                 
                                 
                                 
                                 sound_driver_instrument_routine_channel0_volume_macro_end_flag:
                                 sound_driver_instrument_routine_channel0_volume_macro_end_flag_check_release:
0027b4 91b0 2814                 	lds r27, pulse1_volume_macro_release
0027b6 3fbf                      	cpi r27, 0xFF
0027b7 f429                      	brne sound_driver_instrument_routine_channel0_volume_macro_end_flag_last_index //if there is a release flag, we don't need to loop. stay at the last valid index
                                 
                                 sound_driver_instrument_routine_channel0_volume_macro_end_flag_check_loop:
0027b8 91b0 2813                 	lds r27, pulse1_volume_macro_loop //load the loop index
0027ba 93b0 2812                 	sts pulse1_volume_macro_offset, r27 //store the loop index into the offset
0027bc cfdc                      	rjmp sound_driver_instrument_routine_channel0_volume //go back and re-read the volume data
                                 
                                 sound_driver_instrument_routine_channel0_volume_macro_end_flag_last_index:
0027bd 50a2                      	subi r26, 2 //go back to last valid index NOTE: Since we increment the offset everytime we read data, we have to decrement twice. 1 to account for the increment and 1 for the end flag.
0027be 93a0 2812                 	sts pulse1_volume_macro_offset, r26
0027c0 cfd8                      	rjmp sound_driver_instrument_routine_channel0_volume //go back and re-read the volume data
                                 
                                 
                                 
                                 sound_driver_instrument_routine_channel0_volume_calculate:
0027c1 e0e8                      	ldi ZL, LOW(volumes << 1) //point Z to volume table
0027c2 e5f3                      	ldi ZH, HIGH(volumes << 1)
0027c3 95b2                      	swap r27 //multiply the offset by 16 to move to the correct row in the volume table
0027c4 0feb                      	add ZL, r27 //add offset to the table
0027c5 1df2                      	adc ZH, zero
                                 
                                 sound_driver_instrument_routine_channel0_volume_load:
0027c6 91b0 2800                 	lds r27, pulse1_param //load main volume
0027c8 70bf                      	andi r27, 0x0F //mask for VVVV volume bits
0027c9 0feb                      	add ZL, r27 //offset the volume table by the main volume
0027ca 1df2                      	adc ZH, zero
0027cb 91b4                      	lpm r27, Z
0027cc 93b0 2805                 	sts pulse1_output_volume, r27 //store the new output volume
0027ce c005                      	rjmp sound_driver_instrument_routine_channel0_arpeggio
                                 
                                 sound_driver_instrument_routine_channel0_volume_default:
0027cf 91b0 2800                 	lds r27, pulse1_param //a multiplier of F means in no change to the main volume, so we just copy the value into the output
0027d1 70bf                      	andi r27, 0x0F //mask for VVVV volume bits
0027d2 93b0 2805                 	sts pulse1_output_volume, r27
                                 	
                                 
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio:
                                 	//NOTE: The arpeggio macro routine is also in charge of actually setting the timers using the note stored in SRAM. The default routine is responsible for that in the case no arpeggio macro is used.
0027d4 91e0 2815                 	lds ZL, pulse1_arpeggio_macro
0027d6 91f0 2816                 	lds ZH, pulse1_arpeggio_macro+1
0027d8 9630                      	adiw Z, 0
0027d9 f1f9                      	breq sound_driver_instrument_routine_channel0_arpeggio_default //if no arpeggio macro is in use, go output the note without any offsets
0027da 0fee                      	lsl ZL //multiply by 2 to make Z into a byte pointer for the macro's address
0027db 1fff                      	rol ZH
0027dc 91a0 2817                 	lds r26, pulse1_arpeggio_macro_offset
0027de 0fea                      	add ZL, r26
0027df 1df2                      	adc ZH, zero
                                 
0027e0 91b0 2819                 	lds r27, pulse1_arpeggio_macro_release
0027e2 17ba                      	cp r27, r26
0027e3 f429                      	brne sound_driver_instrument_routine_channel0_arpeggio_increment //if the current offset is not equal to the release index, increment the offset
0027e4 91a0 2818                 	lds r26, pulse1_arpeggio_macro_loop
0027e6 17ab                      	cp r26, r27 //check if loop flag exists NOTE: a loop flag and a release flag can only co-exist if the loop is less than the release
0027e7 f010                      	brlo sound_driver_instrument_routine_channel0_arpeggio_increment+1 //if the current offset is equal to the release index and there is a loop, reload the loop index, but also read the current index data
0027e8 c003                      	rjmp sound_driver_instrument_routine_channel0_arpeggio_read //if the current offset is equal to the release index and there is no loop, then keep the offset unchanged
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_increment:
0027e9 95a3                      	inc r26 //increment the macro offset
0027ea 93a0 2817                 	sts pulse1_arpeggio_macro_offset, r26
                                 	
                                 sound_driver_instrument_routine_channel0_arpeggio_read:
0027ec 91b4                      	lpm r27, Z //load arpeggio data into r27
0027ed 38b0                      	cpi r27, 0x80 //check for macro end flag
0027ee f4f9                      	brne sound_driver_instrument_routine_channel0_arpeggio_process //if the data was not the macro end flag, calculate the volume
                                 
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_macro_end_flag:
                                 sound_driver_instrument_routine_channel0_arpeggio_macro_end_flag_check_mode:
0027ef 50a1                      	subi r26, 1 //keep the offset at the end flag
0027f0 93a0 2817                 	sts pulse1_arpeggio_macro_offset, r26
0027f2 91b0 281a                 	lds r27, pulse1_arpeggio_macro_mode //load the mode to check for fixed/relative mode NOTE: end behavior for fixed/relative mode is different in that once the macro ends, the true note is played
0027f4 30b1                      	cpi r27, 0x01
0027f5 f048                      	brlo sound_driver_instrument_routine_channel0_arpeggio_macro_end_flag_absolute
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_macro_end_flag_fixed_relative_check_release:
0027f6 91b0 2819                 	lds r27, pulse1_arpeggio_macro_release
0027f8 3fbf                      	cpi r27, 0xFF
0027f9 f4f9                      	brne sound_driver_instrument_routine_channel0_arpeggio_default //if there is a release flag, we don't need to loop. just play the true note
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_macro_end_flag_fixed_relative_check_loop:
0027fa 91b0 2818                 	lds r27, pulse1_arpeggio_macro_loop
0027fc 3fbf                      	cpi r27, 0xFF
0027fd f469                      	brne sound_driver_instrument_routine_channel0_arpeggio_macro_end_flag_reload //if there is no release flag, but there is a loop, load the offset with the loop index
0027fe c01a                      	rjmp sound_driver_instrument_routine_channel0_arpeggio_default //if there is no release flag and no loop, then play the true note
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_macro_end_flag_absolute:
0027ff 91b0 2819                 	lds r27, pulse1_arpeggio_macro_release
002801 3fbf                      	cpi r27, 0xFF
002802 f421                      	brne sound_driver_instrument_routine_channel0_arpeggio_macro_end_flag_absolute_no_loop //if there is a release flag, react as if there was no loop.
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_macro_end_flag_absolute_check_loop:
002803 91b0 2818                 	lds r27, pulse1_arpeggio_macro_loop //load the loop index
002805 3fbf                      	cpi r27, 0xFF //check if loop flag exists
002806 f421                      	brne sound_driver_instrument_routine_channel0_arpeggio_macro_end_flag_reload //if a loop flag exists, then load the loop value
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_macro_end_flag_absolute_no_loop:
002807 50a1                      	subi r26, 1 //if a loop flag does not exist and fixed mode is not used, use the last valid index
002808 93a0 2817                 	sts pulse1_arpeggio_macro_offset, r26 //store the last valid index into the offset
00280a cfc9                      	rjmp sound_driver_instrument_routine_channel0_arpeggio
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_macro_end_flag_reload:
00280b 93b0 2817                 	sts pulse1_arpeggio_macro_offset, r27 //store the loop index into the offset
00280d cfc6                      	rjmp sound_driver_instrument_routine_channel0_arpeggio //go back and re-read the volume data
                                 
                                 
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_process:
00280e 9220 281b                 	sts pulse1_total_pitch_offset, zero //the pitch offsets must be reset when a new note is to be calculated from an arpeggio macro
002810 9220 2821                 	sts pulse1_total_hi_pitch_offset, zero
002812 91a0 281a                 	lds r26, pulse1_arpeggio_macro_mode
002814 30a0                      	cpi r26, 0x00 //absolute mode
002815 f031                      	breq sound_driver_instrument_routine_channel0_arpeggio_process_absolute
002816 30a1                      	cpi r26, 0x01 //fixed mode
002817 f081                      	breq sound_driver_instrument_routine_channel0_arpeggio_process_fixed
002818 c011                      	rjmp sound_driver_instrument_routine_channel0_arpeggio_process_relative //relative mode
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_default:
                                 	//NOTE: the pitch offset does not need to be reset here because there is no new note being calculated
002819 91a0 2806                 	lds r26, pulse1_note //load the current note index
00281b c020                      	rjmp sound_driver_instrument_routine_channel0_arpeggio_process_load
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_process_absolute:
00281c 91a0 2806                 	lds r26, pulse1_note //load the current note index
00281e 0fab                      	add r26, r27 //offset the note with the arpeggio data
00281f fdb7                      	sbrc r27, 7 //check sign bit to check if we are subtracting from the note index
002820 c004                      	rjmp sound_driver_instrument_routine_channel0_arpeggio_process_absolute_subtract
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_process_absolute_add:
002821 35a7                      	cpi r26, 0x57 //check if the result is larger than the size of the note table (0x56 is the highest possible index)
002822 f0c8                      	brlo sound_driver_instrument_routine_channel0_arpeggio_process_load //if the result is valid, go load the new note
002823 e5a6                      	ldi r26, 0x56 //if the result was too large, just set the result to the highest possible note index
002824 c017                      	rjmp sound_driver_instrument_routine_channel0_arpeggio_process_load
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_process_absolute_subtract:
002825 fda7                      	sbrc r26, 7 //check if result is negative
002826 e0a0                      	ldi r26, 0x00 //if the result was negative, reset it to the 0th index
002827 c014                      	rjmp sound_driver_instrument_routine_channel0_arpeggio_process_load
                                 
                                 
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_process_fixed:
002828 2fab                      	mov r26, r27 //move the arpeggio data into r26
002829 c012                      	rjmp sound_driver_instrument_routine_channel0_arpeggio_process_load
                                 
                                 
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_process_relative:
00282a 91a0 2806                 	lds r26, pulse1_note //load the current note index
00282c 0fab                      	add r26, r27 //offset the note with the arpeggio data
00282d fdb7                      	sbrc r27, 7 //check sign bit to check if we are subtracting from the note index
00282e c008                      	rjmp sound_driver_instrument_routine_channel0_arpeggio_process_relative_subtract
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_process_relative_add:
00282f 93a0 2806                 	sts pulse1_note, r26 //NOTE: relative mode modifies the original note index
002831 35a7                      	cpi r26, 0x57 //check if the result is larger than the size of the note table (0x56 is the highest possible index)
002832 f048                      	brlo sound_driver_instrument_routine_channel0_arpeggio_process_load //if the result is valid, go load the new note
002833 e5a6                      	ldi r26, 0x56 //if the result was too large, just set the result to the highest possible note index
002834 93a0 2806                 	sts pulse1_note, r26
002836 c005                      	rjmp sound_driver_instrument_routine_channel0_arpeggio_process_load
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_process_relative_subtract:
002837 fda7                      	sbrc r26, 7 //check if result is negative
002838 e0a0                      	ldi r26, 0x00 //if the result was negative, reset it to the 0th index
002839 93a0 2806                 	sts pulse1_note, r26
00283b c000                      	rjmp sound_driver_instrument_routine_channel0_arpeggio_process_load
                                 
                                 
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_process_load:
00283c e3e4                      	ldi ZL, LOW(note_table << 1) //load in note table
00283d e0f0                      	ldi ZH, HIGH(note_table << 1)
00283e 0faa                      	lsl r26 //double the offset for the note table because we are getting byte data
00283f 0fea                      	add ZL, r26 //add offset
002840 1df2                      	adc ZH, zero
002841 91a5                      	lpm r26, Z+ //load bytes
002842 91b4                      	lpm r27, Z
002843 93a0 0a8c                 	sts TCB0_CCMPL, r26 //load the LOW bits for timer
002845 93b0 0a8d                 	sts TCB0_CCMPH, r27 //load the HIGH bits for timer
002847 c000                      	rjmp sound_driver_instrument_routine_channel0_pitch
                                 
                                 
                                 
                                 //NOTE: There is a limitation with the pitch routines in that the total pitch can not be offset by 127 in both,
                                 //the positive and negative direction, from the original note pitch. This shouldn't be too much of a problem as
                                 //most songs that use instruments with the pitch macro, do not stray that far from the original note pitch.
                                 //In the case of hi pitch, the total pitch can not be offset by 127*16 from the original pitch. This is also
                                 //not a big deal as you can easily reach the entire note range with an offset of up to 127*16.
                                 sound_driver_instrument_routine_channel0_pitch:
002848 91e0 281c                 	lds ZL, pulse1_pitch_macro
00284a 91f0 281d                 	lds ZH, pulse1_pitch_macro+1
00284c 9630                      	adiw Z, 0
00284d f409                      	brne sound_driver_instrument_routine_channel0_pitch_continue
00284e c048                      	rjmp sound_driver_instrument_routine_channel0_hi_pitch //if no pitch macro is in use, go to the next macro routine
                                 sound_driver_instrument_routine_channel0_pitch_continue:
00284f 0fee                      	lsl ZL //multiply by 2 to make z into a byte pointer for the macro's address
002850 1fff                      	rol ZH
002851 91a0 281e                 	lds r26, pulse1_pitch_macro_offset
002853 0fea                      	add ZL, r26
002854 1df2                      	adc ZH, zero
                                 
002855 91b0 2820                 	lds r27, pulse1_pitch_macro_release
002857 17ba                      	cp r27, r26
002858 f429                      	brne sound_driver_instrument_routine_channel0_pitch_increment //if the current offset is not equal to the release index, increment the offset
002859 91a0 281f                 	lds r26, pulse1_pitch_macro_loop
00285b 17ab                      	cp r26, r27 //check if loop flag exists NOTE: a loop flag and a release flag can only co-exist if the loop is less than the release
00285c f010                      	brlo sound_driver_instrument_routine_channel0_pitch_increment+1 //if the current offset is equal to the release index and there is a loop, load the offset with the loop index, but also read the current index data
00285d c003                      	rjmp sound_driver_instrument_routine_channel0_pitch_read //if the current offset is equal to the release index and there is no loop, then keep the offset unchanged
                                 
                                 sound_driver_instrument_routine_channel0_pitch_increment:
00285e 95a3                      	inc r26 //increment the macro offset
00285f 93a0 281e                 	sts pulse1_pitch_macro_offset, r26
                                 	
                                 sound_driver_instrument_routine_channel0_pitch_read:
002861 91b4                      	lpm r27, Z //load pitch data into r27
002862 38b0                      	cpi r27, 0x80 //check for macro end flag
002863 f489                      	brne sound_driver_instrument_routine_channel0_pitch_calculate //if the data was not the macro end flag, calculate the pitch offset
                                 
                                 
                                 
                                 sound_driver_instrument_routine_channel0_pitch_macro_end_flag:
                                 sound_driver_instrument_routine_channel0_pitch_macro_end_flag_check_release:
002864 50a1                      	subi r26, 1 //keep the macro offset at the end flag
002865 93a0 281e                 	sts pulse1_pitch_macro_offset, r26
002867 91b0 2820                 	lds r27, pulse1_pitch_macro_release
002869 3fbf                      	cpi r27, 0xFF
00286a f439                      	brne sound_driver_instrument_routine_channel0_pitch_default //if there is a release flag, we don't need to loop. offset the pitch by the final total pitch
                                 
                                 sound_driver_instrument_routine_channel0_pitch_macro_end_flag_check_loop:
00286b 91b0 281f                 	lds r27, pulse1_pitch_macro_loop //load the loop index
00286d 3fbf                      	cpi r27, 0xFF //check if there is a loop index
00286e f019                      	breq sound_driver_instrument_routine_channel0_pitch_default //if there is no loop flag, we don't need to loop. offset the pitch by the final total pitch
00286f 93b0 281e                 	sts pulse1_pitch_macro_offset, r27 //store the loop index into the offset
002871 cfd6                      	rjmp sound_driver_instrument_routine_channel0_pitch //go back and re-read the pitch data
                                 
                                 
                                 
                                 sound_driver_instrument_routine_channel0_pitch_default:
002872 91b0 281b                 	lds r27, pulse1_total_pitch_offset
002874 c005                      	rjmp sound_driver_instrument_routine_channel0_pitch_calculate_multiply
                                 
                                 sound_driver_instrument_routine_channel0_pitch_calculate:
002875 91a0 281b                 	lds r26, pulse1_total_pitch_offset //load the total pitch offset to change
002877 0fba                      	add r27, r26
002878 93b0 281b                 	sts pulse1_total_pitch_offset, r27
                                 
                                 sound_driver_instrument_routine_channel0_pitch_calculate_multiply:
00287a 936f                      	push r22 //only registers r16 - r23 can be used with mulsu
00287b 937f                      	push r23
00287c 2f6b                      	mov r22, r27 //store the signed pitch offset data into r22
00287d eb72                      	ldi r23, 0b10110010 //store r23 with 11.125 note: this is the closest approximation to the 11.1746014718 multiplier we can get with 8 bits
00287e 0367                      	mulsu r22, r23
00287f 917f                      	pop r23
002880 916f                      	pop r22
                                 
002881 9416                      	lsr r1 //shift out the fractional bits
002882 9407                      	ror r0
002883 9416                      	lsr r1
002884 9407                      	ror r0
002885 9416                      	lsr r1
002886 9407                      	ror r0
002887 9416                      	lsr r1
002888 9407                      	ror r0
002889 fe13                      	sbrs r1, 3 //check if result was a negative number
00288a c002                      	rjmp sound_driver_instrument_routine_channel0_pitch_calculate_offset //if the result was positive, don't fill with 1s
                                 
                                 sound_driver_instrument_routine_channel0_pitch_calculate_negative:
00288b efb0                      	ldi r27, 0xF0
00288c 2a1b                      	or r1, r27 //when right shifting a two's complement number, must use 1s instead of 0s to fill
                                 
                                 sound_driver_instrument_routine_channel0_pitch_calculate_offset:
00288d 91a0 0a8c                 	lds r26, TCB0_CCMPL //load the low bits for timer
00288f 91b0 0a8d                 	lds r27, TCB0_CCMPH //load the high bits for timer
002891 0da0                      	add r26, r0 //offset the timer values
002892 1db1                      	adc r27, r1
002893 93a0 0a8c                 	sts TCB0_CCMPL, r26 //store the new low bits for timer
002895 93b0 0a8d                 	sts TCB0_CCMPH, r27 //store the new high bits for timer
                                 	
                                 
                                 
                                 //NOTE: The hi pitch macro routine does not account for overflowing from the offset. In famitracker, if the offset
                                 //goes beyond the note range, there will be no more offset calculations. In this routine, it is possible that
                                 //the pitch goes from B-7 and back around to C-0. I don't believe there will ever be a song in which this will be a problem.
                                 sound_driver_instrument_routine_channel0_hi_pitch:
002897 91e0 2822                 	lds ZL, pulse1_hi_pitch_macro
002899 91f0 2823                 	lds ZH, pulse1_hi_pitch_macro+1
00289b 9630                      	adiw Z, 0
00289c f409                      	brne sound_driver_instrument_routine_channel0_hi_pitch_continue
00289d c03c                      	rjmp sound_driver_instrument_routine_channel0_duty //if no hi pitch macro is in use, go to the next macro routine
                                 sound_driver_instrument_routine_channel0_hi_pitch_continue:
00289e 0fee                      	lsl ZL //multiply by 2 to make z into a byte pointer for the macro's address
00289f 1fff                      	rol ZH
0028a0 91a0 2824                 	lds r26, pulse1_hi_pitch_macro_offset
0028a2 0fea                      	add ZL, r26
0028a3 1df2                      	adc ZH, zero
                                 
0028a4 91b0 2826                 	lds r27, pulse1_hi_pitch_macro_release
0028a6 17ba                      	cp r27, r26
0028a7 f429                      	brne sound_driver_instrument_routine_channel0_hi_pitch_increment //if the current offset is not equal to the release index, increment the offset
0028a8 91a0 2825                 	lds r26, pulse1_hi_pitch_macro_loop
0028aa 17ab                      	cp r26, r27 //check if loop flag exists NOTE: a loop flag and a release flag can only co-exist if the loop is less than the release
0028ab f010                      	brlo sound_driver_instrument_routine_channel0_hi_pitch_increment+1 //if the current offset is equal to the release index and there is a loop, load the offset with the loop index, but also read the current index data
0028ac c003                      	rjmp sound_driver_instrument_routine_channel0_hi_pitch_read //if the current offset is equal to the release index and there is no loop, then keep the offset unchanged
                                 
                                 sound_driver_instrument_routine_channel0_hi_pitch_increment:
0028ad 95a3                      	inc r26 //increment the macro offset
0028ae 93a0 2824                 	sts pulse1_hi_pitch_macro_offset, r26
                                 	
                                 sound_driver_instrument_routine_channel0_hi_pitch_read:
0028b0 91b4                      	lpm r27, Z //load hi pitch data into r27
0028b1 38b0                      	cpi r27, 0x80 //check for macro end flag
0028b2 f489                      	brne sound_driver_instrument_routine_channel0_hi_pitch_calculate //if the data was not the macro end flag, calculate the hi pitch offset
                                 
                                 
                                 
                                 sound_driver_instrument_routine_channel0_hi_pitch_macro_end_flag:
                                 sound_driver_instrument_routine_channel0_hi_pitch_macro_end_flag_check_release:
0028b3 50a1                      	subi r26, 1 //keep the macro offset at the end flag
0028b4 93a0 2824                 	sts pulse1_hi_pitch_macro_offset, r26
0028b6 91b0 2826                 	lds r27, pulse1_hi_pitch_macro_release
0028b8 3fbf                      	cpi r27, 0xFF
0028b9 f439                      	brne sound_driver_instrument_routine_channel0_hi_pitch_default //if there is a release flag, we don't need to loop. offset the hi pitch by the final total hi pitch
                                 
                                 sound_driver_instrument_routine_channel0_hi_pitch_macro_end_flag_check_loop:
0028ba 91b0 2825                 	lds r27, pulse1_hi_pitch_macro_loop //load the loop index
0028bc 3fbf                      	cpi r27, 0xFF //check if there is a loop index
0028bd f019                      	breq sound_driver_instrument_routine_channel0_hi_pitch_default //if there is no loop flag, we don't need to loop. offset the pitch by the final total hi pitch
0028be 93b0 2824                 	sts pulse1_hi_pitch_macro_offset, r27 //store the loop index into the offset
0028c0 cfd6                      	rjmp sound_driver_instrument_routine_channel0_hi_pitch //go back and re-read the hi pitch data
                                 
                                 
                                 
                                 sound_driver_instrument_routine_channel0_hi_pitch_default:
0028c1 91b0 2821                 	lds r27, pulse1_total_hi_pitch_offset
0028c3 c005                      	rjmp sound_driver_instrument_routine_channel0_hi_pitch_calculate_multiply
                                 
                                 sound_driver_instrument_routine_channel0_hi_pitch_calculate:
0028c4 91a0 2821                 	lds r26, pulse1_total_hi_pitch_offset //load the total hi pitch offset to change
0028c6 0fba                      	add r27, r26
0028c7 93b0 2821                 	sts pulse1_total_hi_pitch_offset, r27
                                 
                                 sound_driver_instrument_routine_channel0_hi_pitch_calculate_multiply:
0028c9 936f                      	push r22 //only registers r16 - r23 can be used with mulsu
0028ca 937f                      	push r23
0028cb 2f6b                      	mov r22, r27 //store the signed hi pitch offset data into r22
0028cc eb72                      	ldi r23, 0b10110010 //store r23 with 11.125 note: this is the closest approximation to the 11.1746014718 multiplier we can get with 8 bits
0028cd 0367                      	mulsu r22, r23
0028ce 917f                      	pop r23
0028cf 916f                      	pop r22
                                 
                                 	//NOTE: fractional bits do not need to be shifted out because hi pitch offsets are multiplied by 16. shifting right 4 times for the fraction and left 4 times for the 16x is the same as no shift.
                                 sound_driver_instrument_routine_channel0_hi_pitch_calculate_offset:
0028d0 91a0 0a8c                 	lds r26, TCB0_CCMPL //load the low bits for timer
0028d2 91b0 0a8d                 	lds r27, TCB0_CCMPH //load the high bits for timer
0028d4 0da0                      	add r26, r0 //offset the timer values
0028d5 1db1                      	adc r27, r1
0028d6 93a0 0a8c                 	sts TCB0_CCMPL, r26 //store the new low bits for timer
0028d8 93b0 0a8d                 	sts TCB0_CCMPH, r27 //store the new high bits for timer
                                 
                                 
                                 
                                 //NOTE: Unlike the original NES, changing the duty cycle will reset the sequencer position entirely.
                                 sound_driver_instrument_routine_channel0_duty:
0028da 91e0 2827                 	lds ZL, pulse1_duty_macro
0028dc 91f0 2828                 	lds ZH, pulse1_duty_macro+1
0028de 9630                      	adiw Z, 0
0028df f1b1                      	breq sound_driver_exit //if no duty macro is in use, go to the next macro routine
0028e0 0fee                      	lsl ZL //multiply by 2 to make z into a byte pointer for the macro's address
0028e1 1fff                      	rol ZH
0028e2 91a0 2829                 	lds r26, pulse1_duty_macro_offset
0028e4 0fea                      	add ZL, r26
0028e5 1df2                      	adc ZH, zero
                                 
0028e6 91b0 282b                 	lds r27, pulse1_duty_macro_release
0028e8 17ba                      	cp r27, r26
0028e9 f429                      	brne sound_driver_instrument_routine_channel0_duty_increment //if the current offset is not equal to the release index, increment the offset
0028ea 91a0 282a                 	lds r26, pulse1_duty_macro_loop
0028ec 17ab                      	cp r26, r27 //check if loop flag exists NOTE: a loop flag and a release flag can only co-exist if the loop is less than the release
0028ed f010                      	brlo sound_driver_instrument_routine_channel0_duty_increment+1 //if the current offset is equal to the release index and there is a loop, load the offset with the loop index, but also read the current index data
0028ee c027                      	rjmp sound_driver_exit //if the current offset is equal to the release index and there is no loop, then keep the offset unchanged and skip the rest of the routine
                                 
                                 sound_driver_instrument_routine_channel0_duty_increment:
0028ef 95a3                      	inc r26 //increment the macro offset
0028f0 93a0 2829                 	sts pulse1_duty_macro_offset, r26
                                 	
                                 sound_driver_instrument_routine_channel0_duty_read:
0028f2 91b4                      	lpm r27, Z //load pitch data into r27
0028f3 3fbf                      	cpi r27, 0xFF //check for macro end flag
0028f4 f471                      	brne sound_driver_instrument_routine_channel0_duty_load //if the data was not the macro end flag, load the new duty cycle
                                 
                                 
                                 
                                 sound_driver_instrument_routine_channel0_duty_macro_end_flag:
                                 sound_driver_instrument_routine_channel0_duty_macro_end_flag_check_release:
0028f5 50a1                      	subi r26, 1 //keep the macro offset at the end flag
0028f6 93a0 2829                 	sts pulse1_duty_macro_offset, r26
0028f8 91b0 282b                 	lds r27, pulse1_duty_macro_release
0028fa 3fbf                      	cpi r27, 0xFF
0028fb f4d1                      	brne sound_driver_exit //if there is a release flag, we don't need to loop. skip the rest of the routine.
                                 
                                 sound_driver_instrument_routine_channel0_duty_macro_end_flag_check_loop:
0028fc 91b0 282a                 	lds r27, pulse1_duty_macro_loop //load the loop index
0028fe 3fbf                      	cpi r27, 0xFF //check if there is a loop index
0028ff f0b1                      	breq sound_driver_exit //if there is no loop flag, we don't need to loop. skip the rest of the routine.
002900 93b0 2829                 	sts pulse1_duty_macro_offset, r27 //store the loop index into the offset
002902 cfd7                      	rjmp sound_driver_instrument_routine_channel0_duty //go back and re-read the duty data
                                 
                                 
                                 
                                 sound_driver_instrument_routine_channel0_duty_load:
002903 e5f3                      	ldi ZH, HIGH(sequences << 1) //point Z to sequence table
002904 e0e4                      	ldi ZL, LOW(sequences << 1)
002905 0feb                      	add ZL, r27 //offset the pointer by the duty macro data
002906 1df2                      	adc ZH, zero
                                 
002907 95b6                      	lsr r27 //move the duty cycle bits to the 2 MSB for pulse1_param (register $4000)
002908 95b7                      	ror r27
002909 95b7                      	ror r27
00290a 91a0 2800                 	lds r26, pulse1_param //load r26 with pulse1_param (register $4000)
00290c 2fca                      	mov r28, r26 //store a copy of pulse1_param into r28
00290d 7ca0                      	andi r26, 0b11000000 //mask the duty cycle bits
00290e 13ba                      	cpse r27, r26 //check if the previous duty cycle and the new duty cycle are equal
00290f c001                      	rjmp sound_driver_instrument_routine_channel0_duty_load_store
002910 c005                      	rjmp sound_driver_exit //if the previous and new duty cycle are the same, don't reload the sequence
                                 
                                 sound_driver_instrument_routine_channel0_duty_load_store:
002911 90d4                      	lpm pulse1_sequence, Z //store the sequence
                                 
002912 73cf                      	andi r28, 0b00111111 //mask out the duty cycle bits
002913 2bcb                      	or r28, r27 //store the new duty cycle bits into r27
002914 93c0 2800                 	sts pulse1_param, r28
                                 
                                 
                                 
                                 sound_driver_exit:
002916 91df                      	pop r29
002917 91cf                      	pop r28
002918 cd42                      	rjmp sequence_1_3 + 3 //+3 is to skip the stack instructions since we already pushed them
                                 
                                 //PULSE 1 ROUTINES
                                 pulse1_sequence_routine:
002919 b7bf                      	in r27, CPU_SREG
00291a 93bf                      	push r27
00291b 94f8                      	cli
                                 
00291c 0cdd                      	lsl pulse1_sequence //shifts sequence to the left
00291d 1cd2                      	adc pulse1_sequence, zero //if the shifted bit was a 1, it will be added to the LSB
                                 
00291e e0b1                      	ldi r27, TCB_CAPT_bm //clear OVF flag
00291f 93b0 0a86                 	sts TCB0_INTFLAGS, r27
002921 91bf                      	pop r27
002922 bfbf                      	out CPU_SREG, r27
002923 9518                      	reti
                                 
                                 pulse1_sweep_routine:
002924 2dbf                      	mov r27, pulse1_sweep
002925 70b7                      	andi r27, 0x07 //mask for period divider bits
002926 f4f9                      	brne pulse1_sweep_routine_decrement_divider //check if divider != 0
                                 
                                 pulse1_sweep_routine_action: //if the divider is == 0, update the pulse timer period
002927 93df                      	push r29
002928 2ddf                      	mov r29, pulse1_sweep
002929 95d2                      	swap r29
00292a 70d7                      	andi r29, 0x07 //mask for shift bits
00292b f409                      	brne PC+2 //check of shift == 0
00292c 91df                      	pop r29
00292d c019                      	rjmp pulse1_sweep_routine_check_reload //if the shift == 0, do nothing and return
                                 
00292e 91a0 0a8c                 	lds r26, TCB0_CCMPL
002930 91b0 0a8d                 	lds r27, TCB0_CCMPH
002932 95b6                      	lsr r27
002933 95a7                      	ror r26
002934 95da                      	dec r29
002935 f7e1                      	brne PC-3 //keep looping/shifting until shift count is 0
                                 
002936 fef7                      	sbrs pulse1_sweep, 7 //check the negate flag
002937 c002                      	rjmp PC+3 //if negate flag was clear, go straight to addition
                                 
002938 95a0                      	com r26 //pulse1 uses one's complement if the negate flag is set
002939 95b0                      	com r27
                                 
00293a 91d0 0a8c                 	lds r29, TCB0_CCMPL //perform addition to get new timer period
00293c 0fad                      	add r26, r29
00293d 91d0 0a8d                 	lds r29, TCB0_CCMPH
00293f 1fbd                      	adc r27, r29
                                 
002940 93a0 0a8c                 	sts TCB0_CCMPL, r26 //store the new LOW bits for timer
002942 93b0 0a8d                 	sts TCB0_CCMPH, r27 //store the new HIGH bits for timer
                                 
                                 	//sts pulse1_timerL, r26
                                 	//sts pulse1_timerH, r27
                                 
                                 /*	//Sweep Test
                                 	mov r29, pulse1_sweep //invert the negate bit
                                 	ldi r27, 0b10000000
                                 	eor r29, r27
                                 	ori r29, 0b01111111
                                 
                                 	lds r27, pulse1_sweep_param //reload the pulse sweep divider params
                                 	swap r27
                                 	ori r27, 0b10000000
                                 	and r27, r29
                                 	mov pulse1_sweep, r27
                                 	sbr channel_flags, 0b10000000*/
                                 	
002944 91df                      	pop r29
002945 c001                      	rjmp pulse1_sweep_routine_check_reload
                                 
                                 pulse1_sweep_routine_decrement_divider:
002946 94fa                      	dec pulse1_sweep //if the divider != 0, decrement the divider
                                 
                                 pulse1_sweep_routine_check_reload:
002947 ff97                      	sbrs channel_flags, 7 //if the reload flag is set, reload the sweep divider
002948 9508                      	ret
                                 
                                 pulse1_sweep_reload:
002949 90f0 2801                 	lds pulse1_sweep, pulse1_sweep_param //NOTE: since the reload flag is kept in bit 6, we clear the reload flag indirectly
00294b 94f2                      	swap pulse1_sweep //bring data from high byte to low byte
00294c 779f                      	cbr channel_flags, 0b10000000 //clear ready flag
00294d 9508                      	ret
                                 
                                 pulse1_envelope_routine:
00294e fd96                      	sbrc channel_flags, 6 //check if start flag is cleared
00294f c010                      	rjmp pulse1_envelope_routine_clear_start
                                 
002950 3000                      	cpi pulse1_volume_divider, 0x00 //check if the divider is 0
002951 f011                      	breq PC+3 //if the divider == 0, check loop flag
002952 950a                      	dec pulse1_volume_divider //if the divider != 0, decrement and return
002953 9508                      	ret
                                 
002954 9100 2800                 	lds pulse1_volume_divider, pulse1_param //if the divider == 0, reset the divider period
002956 700f                      	andi pulse1_volume_divider, 0x0F //mask for VVVV bits
002957 ff95                      	sbrs channel_flags, 5 //check if the loop flag is set
002958 c002                      	rjmp pulse1_envelope_routine_decrement_decay //if the loop flag is not set, check the decay
002959 e01f                      	ldi pulse1_volume_decay, 0x0F //if the loop flag is set, reset decay and return
00295a 9508                      	ret
                                 
                                 pulse1_envelope_routine_decrement_decay:
00295b 3010                      	cpi pulse1_volume_decay, 0x00 //check if the decay is 0
00295c f409                      	brne PC+2 //if decay != 0, go decrement
00295d 9508                      	ret //if decay == 0 && loop flag == 0, do nothing and return
00295e 951a                      	dec pulse1_volume_decay
00295f 9508                      	ret
                                 
                                 pulse1_envelope_routine_clear_start:
002960 7b9f                      	cbr channel_flags, 0b01000000 //if the start flag is set, clear it
002961 9100 2800                 	lds pulse1_volume_divider, pulse1_param //if the start flag is set, reset the divider period
002963 700f                      	andi pulse1_volume_divider, 0x0F //mask for VVVV bits
002964 e01f                      	ldi pulse1_volume_decay, 0x0F //if the start flag is set, reset decay
002965 9508                      	ret
                                 
                                 //CONVERTERS (TABLES)
                                 //converts and loads 5 bit length to corresponding 8 bit length value into r29
                                 length_converter:
002966 e5f2                      	ldi ZH, HIGH(length << 1)
002967 ede8                      	ldi ZL, LOW(length << 1)
002968 0fed                      	add ZL, r29
002969 1df2                      	adc ZH, zero
00296a 91d4                      	lpm r29, Z
00296b 9508                      	ret
                                 
00296c 7f05
00296d 010a
00296e 0214
00296f 0328
002970 0450
002971 051e
002972 0607
002973 070d
002974 0806
002975 090c
002976 0a18
002977 0b30
002978 0c60
002979 0d24
00297a 0e08
00297b 0f10                      length: .db $05, $7F, $0A, $01, $14, $02, $28, $03, $50, $04, $1E, $05, $07, $06, $0D, $07, $06, $08, $0C, $09, $18, $0A, $30, $0B, $60, $0C, $24, $0D, $08, $0E, $10, $0F
                                 
                                 //loads pulse sequence into r29
                                 duty_cycle_sequences:
00297c e5f3                      	ldi ZH, HIGH(sequences << 1)
00297d e0e4                      	ldi ZL, LOW(sequences << 1)
00297e 0fed                      	add ZL, r29
00297f 1df2                      	adc ZH, zero
002980 91d4                      	lpm r29, Z
002981 9508                      	ret
                                 
                                 //pulse sequences: 12.5%, 25%, 50%, 75%
002982 0301
002983 fc0f                      sequences: .db 0b00000001, 0b00000011, 0b00001111, 0b11111100
                                 
                                 //famitracker volumes table: http://famitracker.com/wiki/index.php?title=Volume
                                 volumes:
002984 0000
002985 0000
002986 0000
002987 0000
002988 0000
002989 0000
00298a 0000
00298b 0000                      	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00298c 0100
00298d 0101
00298e 0101
00298f 0101
002990 0101
002991 0101
002992 0101
002993 0101                      	.db 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01
002994 0100
002995 0101
002996 0101
002997 0101
002998 0101
002999 0101
00299a 0101
00299b 0201                      	.db 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02
00299c 0100
00299d 0101
00299e 0101
00299f 0101
0029a0 0101
0029a1 0202
0029a2 0202
0029a3 0302                      	.db 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03
0029a4 0100
0029a5 0101
0029a6 0101
0029a7 0101
0029a8 0202
0029a9 0202
0029aa 0303
0029ab 0403                      	.db 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x03, 0x03, 0x03, 0x04
0029ac 0100
0029ad 0101
0029ae 0101
0029af 0202
0029b0 0302
0029b1 0303
0029b2 0404
0029b3 0504                      	.db 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x03, 0x03, 0x03, 0x04, 0x04, 0x04, 0x05
0029b4 0100
0029b5 0101
0029b6 0201
0029b7 0202
0029b8 0303
0029b9 0404
0029ba 0504
0029bb 0605                      	.db 0x00, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x03, 0x03, 0x04, 0x04, 0x04, 0x05, 0x05, 0x06
0029bc 0100
0029bd 0101
0029be 0201
0029bf 0302
0029c0 0403
0029c1 0504
0029c2 0605
0029c3 0706                      	.db 0x00, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x03, 0x03, 0x04, 0x04, 0x05, 0x05, 0x06, 0x06, 0x07
0029c4 0100
0029c5 0101
0029c6 0202
0029c7 0303
0029c8 0404
0029c9 0505
0029ca 0606
0029cb 0807                      	.db 0x00, 0x01, 0x01, 0x01, 0x02, 0x02, 0x03, 0x03, 0x04, 0x04, 0x05, 0x05, 0x06, 0x06, 0x07, 0x08
0029cc 0100
0029cd 0101
0029ce 0302
0029cf 0403
0029d0 0504
0029d1 0606
0029d2 0707
0029d3 0908                      	.db 0x00, 0x01, 0x01, 0x01, 0x02, 0x03, 0x03, 0x04, 0x04, 0x05, 0x06, 0x06, 0x07, 0x07, 0x08, 0x09
0029d4 0100
0029d5 0201
0029d6 0302
0029d7 0404
0029d8 0605
0029d9 0706
0029da 0808
0029db 0a09                      	.db 0x00, 0x01, 0x01, 0x02, 0x02, 0x03, 0x04, 0x04, 0x05, 0x06, 0x06, 0x07, 0x08, 0x08, 0x09, 0x0A
0029dc 0100
0029dd 0201
0029de 0302
0029df 0504
0029e0 0605
0029e1 0807
0029e2 0908
0029e3 0b0a                      	.db 0x00, 0x01, 0x01, 0x02, 0x02, 0x03, 0x04, 0x05, 0x05, 0x06, 0x07, 0x08, 0x08, 0x09, 0x0A, 0x0B
0029e4 0100
0029e5 0201
0029e6 0403
0029e7 0504
0029e8 0706
0029e9 0808
0029ea 0a09
0029eb 0c0b                      	.db 0x00, 0x01, 0x01, 0x02, 0x03, 0x04, 0x04, 0x05, 0x06, 0x07, 0x08, 0x08, 0x09, 0x0A, 0x0B, 0x0C
0029ec 0100
0029ed 0201
0029ee 0403
0029ef 0605
0029f0 0706
0029f1 0908
0029f2 0b0a
0029f3 0d0c                      	.db 0x00, 0x01, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D
0029f4 0100
0029f5 0201
0029f6 0403
0029f7 0605
0029f8 0807
0029f9 0a09
0029fa 0c0b
0029fb 0e0d                      	.db 0x00, 0x01, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E
0029fc 0100
0029fd 0302
0029fe 0504
0029ff 0706
002a00 0908
002a01 0b0a
002a02 0d0c


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega4809" register use summary:
x  :   0 y  :   0 z  :  36 r0 :   6 r1 :   8 r2 :  62 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   5 r14:   4 r15:   9 r16:   7 r17:   6 r18:   0 r19:   0 r20:   0 
r21:   0 r22:   8 r23:   8 r24:   0 r25:  11 r26: 119 r27: 249 r28:  26 
r29:  45 r30:  49 r31:  49 
Registers used: 18 out of 35 (51.4%)

"ATmega4809" instruction use summary:
.lds  :   0 .sts  :   0 adc   :  19 add   :  22 adiw  :  10 and   :   0 
andi  :  12 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   1 break :   0 breq  :  21 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :  11 brlt  :   0 brmi  :   0 
brne  :  26 brpl  :   0 brsh  :   4 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   0 cbr   :   2 
clc   :   0 clh   :   0 cli   :   4 cln   :   0 clr   :   1 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   2 cp    :  11 cpc   :   0 
cpi   :  41 cpse  :   3 dec   :   7 des   :   0 eor   :   0 fmul  :   0 
fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   4 inc   :  10 
jmp   :   6 ld    :   0 ldd   :   0 ldi   :  56 lds   :  89 lpm   :  45 
lsl   :  14 lsr   :   7 mov   :  14 movw  :   0 mul   :   0 muls  :   0 
mulsu :   2 neg   :   0 nop   :   0 or    :   3 ori   :   0 out   :   6 
pop   :  15 push  :  15 rcall :  15 ret   :  13 reti  :   3 rjmp  :  64 
rol   :  13 ror   :   7 sbc   :   0 sbci  :   0 sbi   :   0 sbic  :   0 
sbis  :   0 sbiw  :   0 sbr   :   3 sbrc  :   7 sbrs  :   5 sec   :   0 
seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 
sts   : 166 sub   :   0 subi  :   8 swap  :   4 tst   :   0 wdr   :   0 

Instructions used: 44 out of 114 (38.6%)

"ATmega4809" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x005408   2070  19414  21484   49152  43.7%
[.dseg] 0x002800 0x002830      0     48     48    6144   0.8%
[.eseg] 0x000000 0x000000      0      0      0     256   0.0%

Assembly complete, 0 errors, 172 warnings
