
AVRASM ver. 2.2.8  C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm Tue Jan 05 00:08:45 2021

C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(9): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m4809def.inc'
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): Including file 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm'
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(9): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m4809def.inc'
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): Including file 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm'
                                 
                                 
                                 ; NES_APU_2a03.asm
                                 ;
                                 ; Created: 11/29/2020 1:44:10 AM
                                 ; Author : Tennyson Cheng
                                 ;
                                 
                                 .list
                                 
                                 .dseg
002800                           pulse1_param: .byte 1 //$4000 DDlc.vvvv = Duty cycle, Length counter halt/Loop flag, Constant volume flag, Volume
002801                           pulse1_sweep_param: .byte 1 //$4001 EPPP.NSSS = Enable, Period, Negate, Shift
                                 //NOTE: In order to account for multiplier, we use 16 instead of 11 bits for the timer
002802                           pulse1_timerL: .byte 1 //$4002 LLLL.LLLL = Low 8 bits for timer
002803                           pulse1_timerH: .byte 1 //$4002 HHHH.HHHH = High 8 bits for timer
002804                           pulse1_length: .byte 1 //$4002 000l.llll = Length counter load
002805                           pulse1_fractional_volume: .byte 1 //used with the Axy effect to calculate volume. represents the VVVV bits in $4000, but with fractional data in bits 0 to 3.
002806                           pulse1_output_volume: .byte 1 //this is the final output volume of pulse 1
002807                           pulse1_note: .byte 1 //the current note index in the note table
                                 
002808                           song_frames: .byte 2
00280a                           song_frame_offset: .byte 2
                                 
                                 
                                 
00280c                           pulse1_pattern: .byte 2
00280e                           pulse1_pattern_delay: .byte 1
00280f                           pulse1_pattern_offset: .byte 2
                                 
002811                           pulse1_volume_macro: .byte 2
002813                           pulse1_volume_macro_offset: .byte 1
002814                           pulse1_volume_macro_loop: .byte 1
002815                           pulse1_volume_macro_release: .byte 1
                                 
002816                           pulse1_arpeggio_macro: .byte 2
002818                           pulse1_arpeggio_macro_offset: .byte 1
002819                           pulse1_arpeggio_macro_loop: .byte 1
00281a                           pulse1_arpeggio_macro_release: .byte 1
00281b                           pulse1_arpeggio_macro_mode: .byte 1
                                 
00281c                           pulse1_total_pitch_offset: .byte 1 //used to reference the overall change in pitch for the pitch macro
00281d                           pulse1_pitch_macro: .byte 2
00281f                           pulse1_pitch_macro_offset: .byte 1
002820                           pulse1_pitch_macro_loop: .byte 1
002821                           pulse1_pitch_macro_release: .byte 1
                                 
002822                           pulse1_total_hi_pitch_offset: .byte 1 //used to reference the overall change in pitch for the hi pitch macro
002823                           pulse1_hi_pitch_macro: .byte 2
002825                           pulse1_hi_pitch_macro_offset: .byte 1
002826                           pulse1_hi_pitch_macro_loop: .byte 1
002827                           pulse1_hi_pitch_macro_release: .byte 1
                                 
002828                           pulse1_duty_macro: .byte 2
00282a                           pulse1_duty_macro_offset: .byte 1
00282b                           pulse1_duty_macro_loop: .byte 1
00282c                           pulse1_duty_macro_release: .byte 1
                                 
00282d                           pulse1_fx_Pxx: .byte 1 //refers to the fine pitch offset set by the Pxx effect
00282e                           pulse1_fx_Axy: .byte 1 //refers to the decay/addition in volume set by the Axy effect NOTE: this value is a signed fractional byte, with the decimal between bits 3 and 4.
00282f                           pulse1_fx_Qxy_target: .byte 2 //target note period
002831                           pulse1_fx_Qxy_speed: .byte 2 //the amount to offset by to get to the target
002833                           pulse1_fx_Rxy_target: .byte 2 //target note period
002835                           pulse1_fx_Rxy_speed: .byte 2 //the amount to offset by to get to the target
                                 
002837                           pulse2_pattern_delay: .byte 1
002838                           triangle_pattern_delay: .byte 1
002839                           noise_pattern_delay: .byte 1
00283a                           dcpm_pattern_delay: .byte 1
                                 
                                 .cseg
                                 
                                 //NOTE: zero is defined in order to use the cp instruction without the need to load 0x00 into a register beforehand
                                 .def zero = r2
                                 .def channel_flags = r25 //[pulse1.pulse2] RSlc.0000 = Reload, Start, Length halt/Loop, Constant volume
                                 .def pulse1_sequence = r13
                                 .def pulse1_length_counter = r14
                                 .def pulse1_sweep = r15 //NSSS.EPPP = Negate sweep flag, Shift, Enable sweep flag, Period divider
                                 .def pulse1_volume_divider = r16 //0000.PPPP = Period divider
                                 .def pulse1_volume_decay = r17 //0000.dddd = Decay
                                 
                                 reset:
000000 940c 2573                 	jmp init
                                 
                                 .org TCA0_OVF_vect
00000e 940c 267e                 	jmp sound_driver
                                 
                                 .org TCA0_CMP0_vect
000012 940c 2664                 	jmp sequence_0_2
                                 
                                 .org TCA0_CMP1_vect
000014 940c 266e                 	jmp sequence_1_3
                                 
                                 .org TCA0_CMP2_vect
000016 940c 2664                 	jmp sequence_0_2
                                 
                                 .org TCB0_INT_vect
000018 940c 2a6c                 	jmp pulse1_sequence_routine
                                 
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(142): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(143): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(144): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(145): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(148): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(150): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(151): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(154): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(156): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(159): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(162): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(163): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(166): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(167): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(170): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(171): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(172): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(179): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(181): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(183): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(184): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(185): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(187): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(188): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(189): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(190): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(195): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(197): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(198): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(200): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(211): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(213): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(215): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(217): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(218): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(223): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(225): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(231): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(232): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(234): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(237): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(239): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(241): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(242): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(244): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(245): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(246): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(249): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(250): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(252): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(254): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(265): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(266): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(268): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(271): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(274): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(275): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(278): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(279): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(282): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(283): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(284): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(300): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(312): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(315): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(317): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(319): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(321): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(325): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(327): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(329): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(333): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(338): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(340): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(342): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(353): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(358): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(372): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(373): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(380): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(383): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(384): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(388): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(391): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(393): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(394): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(395): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(396): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(397): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(398): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(405): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(413): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(414): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(415): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(418): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(421): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(423): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(424): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(431): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(434): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(436): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(437): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(440): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(441): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(443): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(444): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(445): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(446): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(448): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(450): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(451): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(453): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(455): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(461): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(468): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(475): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(477): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(481): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(483): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(485): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(486): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(487): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(489): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(490): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(492): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(493): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(494): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(495): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(500): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(506): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(514): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(517): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(524): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(525): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(526): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(529): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(531): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(532): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(533): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(534): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(536): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(537): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(540): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(542): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(543): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(544): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(546): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(547): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(548): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(551): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(552): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(554): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(555): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(556): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(558): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(559): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(560): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(562): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(563): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(564): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(569): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(573): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(576): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(577): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(584): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(588): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(592): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(596): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(597): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(598): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(600): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm(604): warning: .cseg .db misalignment - padding zero byte
C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\main.asm(102): 'C:\Users\creat\Documents\NES_APU_2a03 - Timers\NES_APU_2a03\song_data.asm' included form here
                                 .list
                                 
                                 init:
                                 	//MAIN CLOCK
002573 edb8                      	ldi r27, CPU_CCP_IOREG_gc //protected write
002574 93b0 0034                 	sts CPU_CCP, r27
002576 e0b0                      	ldi r27, 0 << CLKCTRL_PEN_bp //disable prescaler for 20 MHz on main clock
002577 93b0 0061                 	sts CLKCTRL_MCLKCTRLB, r27
                                 
                                 /*	//TEST FOR C4, 1 SECOND, 50% DD
                                 	ldi r26, 0x97
                                 	ldi r27, 0x12
                                 	ldi r26, 0x15
                                 	ldi r27, 0x09
                                 	sts pulse1_timerL, r26
                                 	sts pulse1_timerH, r27
                                 	ldi r27, 0b10111111
                                 	sts pulse1_param, r27
                                 	ldi r27, 0x01
                                 	sts pulse1_length, r27
                                 	//TEST FOR SWEEP UP
                                 	ldi r27, 0b11111111
                                 	sts pulse1_sweep_param, r27*/
                                 
                                 	//ZERO
002579 2422                      	clr zero
                                 
                                 	//MEMORY
00257a e3b0                      	ldi r27, 0b00110000
00257b 93b0 2800                 	sts pulse1_param, r27
00257d e8b0                      	ldi r27, 0b10000000
00257e 93b0 2801                 	sts pulse1_sweep_param, r27
002580 efbf                      	ldi r27, 0xFF
002581 93b0 2802                 	sts pulse1_timerL, r27
002583 93b0 2803                 	sts pulse1_timerH, r27
002585 93b0 2804                 	sts pulse1_length, r27
                                 
002587 e0b0                      	ldi r27, 0x00
002588 93b0 280a                 	sts song_frame_offset, r27
00258a 93b0 280b                 	sts song_frame_offset+1, r27
00258c eee2                      	ldi ZL, LOW(song0_frames << 1)
00258d e0f0                      	ldi ZH, HIGH(song0_frames << 1)
00258e 93e0 2808                 	sts song_frames, ZL
002590 93f0 2809                 	sts song_frames+1, ZH
                                 
                                 	//CHANNEL 0 TEST
002592 e0b0                      	ldi r27, 0x00
002593 0feb                      	add ZL, r27
002594 1df2                      	adc ZH, zero
002595 91a5                      	lpm r26, Z+
002596 91b4                      	lpm r27, Z
002597 0faa                      	lsl r26
002598 1fbb                      	rol r27
002599 93a0 280c                 	sts pulse1_pattern, r26
00259b 93b0 280d                 	sts pulse1_pattern+1, r27
00259d e0b0                      	ldi r27, 0x00
00259e 9220 280e                 	sts pulse1_pattern_delay, zero
0025a0 9220 280f                 	sts pulse1_pattern_offset, zero
0025a2 9220 2810                 	sts pulse1_pattern_offset+1, zero
                                 
                                 	//channel 0 instrument macros
0025a4 efbf                      	ldi r27, 0xFF
0025a5 9220 2813                 	sts pulse1_volume_macro_offset, zero
0025a7 93b0 2814                 	sts pulse1_volume_macro_loop, r27
0025a9 93b0 2815                 	sts pulse1_volume_macro_release, r27
0025ab 9220 2818                 	sts pulse1_arpeggio_macro_offset, zero
0025ad 93b0 2819                 	sts pulse1_arpeggio_macro_loop, r27
0025af 93b0 281a                 	sts pulse1_arpeggio_macro_release, r27
0025b1 93b0 281b                 	sts pulse1_arpeggio_macro_mode, r27
0025b3 9220 281f                 	sts pulse1_pitch_macro_offset, zero
0025b5 93b0 2820                 	sts pulse1_pitch_macro_loop, r27
0025b7 93b0 2821                 	sts pulse1_pitch_macro_release, r27
0025b9 9220 2825                 	sts pulse1_hi_pitch_macro_offset, zero
0025bb 93b0 2826                 	sts pulse1_hi_pitch_macro_loop, r27
0025bd 93b0 2827                 	sts pulse1_hi_pitch_macro_release, r27
0025bf 9220 282a                 	sts pulse1_duty_macro_offset, zero
0025c1 93b0 282b                 	sts pulse1_duty_macro_loop, r27
0025c3 93b0 282c                 	sts pulse1_duty_macro_release, r27
                                 
0025c5 9220 2811                 	sts pulse1_volume_macro, zero
0025c7 9220 2812                 	sts pulse1_volume_macro+1, zero
0025c9 9220 2816                 	sts pulse1_arpeggio_macro, zero
0025cb 9220 2817                 	sts pulse1_arpeggio_macro+1, zero
0025cd 9220 281c                 	sts pulse1_total_pitch_offset, zero
0025cf 9220 281d                 	sts pulse1_pitch_macro, zero
0025d1 9220 281e                 	sts pulse1_pitch_macro+1, zero
0025d3 9220 2822                 	sts pulse1_total_hi_pitch_offset, zero
0025d5 9220 2823                 	sts pulse1_hi_pitch_macro, zero
0025d7 9220 2824                 	sts pulse1_hi_pitch_macro+1, zero
0025d9 9220 2828                 	sts pulse1_duty_macro, zero
0025db 9220 2829                 	sts pulse1_duty_macro+1, zero
                                 
0025dd 9220 2837                 	sts pulse2_pattern_delay, zero
0025df 9220 2838                 	sts triangle_pattern_delay, zero
0025e1 9220 2839                 	sts noise_pattern_delay, zero
0025e3 9220 283a                 	sts dcpm_pattern_delay, zero
                                 
                                 	//PINS
0025e5 efbf                      	ldi r27, 0xFF //set all pins in VPORTD to output
0025e6 b9b0                      	out VPORTA_DIR, r27
                                 
                                 	//ENVELOPE
0025e7 e00f                      	ldi pulse1_volume_divider, 0x0F
0025e8 9110 2800                 	lds pulse1_volume_decay, pulse1_param
0025ea 701f                      	andi pulse1_volume_decay, 0x0F //mask for VVVV bits
0025eb 9190 2800                 	lds channel_flags, pulse1_param
0025ed 7390                      	andi channel_flags, 0b00110000
0025ee 6490                      	sbr channel_flags, 0b01000000 //set start flag
0025ef 9220 2806                 	sts pulse1_output_volume, zero
0025f1 93b0 2805                 	sts pulse1_fractional_volume, r27 //initialize fractional volume to max value
                                 	
                                 	//LENGTH
0025f3 91d0 2804                 	lds r29, pulse1_length
0025f5 d4c3                      	rcall length_converter
0025f6 2eed                      	mov pulse1_length_counter, r29
                                 
                                 	//SEQUENCE
0025f7 91d0 2800                 	lds r29, pulse1_param //load param for sequence table
0025f9 0fdd                      	lsl r29 //shift duty cycle bits to LSB
0025fa 1fdd                      	rol r29
0025fb 1fdd                      	rol r29
0025fc 70d3                      	andi r29, 0b00000011 //mask duty cycle bits
0025fd d4d1                      	rcall duty_cycle_sequences
0025fe 2edd                      	mov pulse1_sequence, r29
                                 
                                 	//SWEEP
0025ff 90f0 2801                 	lds pulse1_sweep, pulse1_sweep_param
002601 94f2                      	swap pulse1_sweep //swap data from high byte and low byte
002602 6890                      	sbr channel_flags, 0b10000000 //set reload flag
                                 
                                 	//FX
002603 9220 282d                 	sts pulse1_fx_Pxx, zero
002605 9220 282e                 	sts pulse1_fx_Axy, zero
002607 9220 282f                 	sts pulse1_fx_Qxy_target, zero
002609 9220 2830                 	sts pulse1_fx_Qxy_target+1, zero
00260b 9220 2831                 	sts pulse1_fx_Qxy_speed, zero
00260d 9220 2832                 	sts pulse1_fx_Qxy_speed+1, zero
00260f 9220 2833                 	sts pulse1_fx_Rxy_target, zero
002611 9220 2834                 	sts pulse1_fx_Rxy_target+1, zero
002613 9220 2835                 	sts pulse1_fx_Rxy_speed, zero
002615 9220 2836                 	sts pulse1_fx_Rxy_speed+1, zero
                                 
                                 	//TIMERS
                                 	//Frame Counter
                                 	//NOTE:The frame counter will be defaulted to NTSC mode (60 Hz, 120 Hz, 240 Hz)
                                 	//Each interrupt will be setup to interrupt every 240 Hz clock
                                 	//CMP0 = sequence 0, CMP1 = sequence 1, CMP2 = sequence 2, OVF = sequence 3/sound driver
                                 	//Sequence 3 will clock the sound driver every 60Hz, in which new audio data is read and written to the registers
                                 	//Timer period Calculation: (0.00416666666 * 20000000/64)-1 = 1301.08333125 = 0x0515
                                 	//The ATmega4809 is cofigured to run at 20000000 Hz
                                 	//0.00416666666 seconds is the period for 240 Hz
                                 	//The /64 comes from the prescaler divider used
002617 e7b0                      	ldi r27, TCA_SINGLE_CMP0EN_bm | TCA_SINGLE_CMP1EN_bm | TCA_SINGLE_CMP2EN_bm | TCA_SINGLE_WGMODE_NORMAL_gc //interrupt mode
002618 93b0 0a01                 	sts TCA0_SINGLE_CTRLB, r27
00261a e7b1                      	ldi r27, TCA_SINGLE_CMP0_bm | TCA_SINGLE_CMP1_bm | TCA_SINGLE_CMP2_bm | TCA_SINGLE_OVF_bm //enable overflow and compare interrupts
00261b 93b0 0a0a                 	sts TCA0_SINGLE_INTCTRL, r27
00261d e1b5                      	ldi r27, 0x15 //set the period for CMP0
00261e 93b0 0a28                 	sts TCA0_SINGLE_CMP0, r27
002620 e0b5                      	ldi r27, 0x05
002621 93b0 0a29                 	sts TCA0_SINGLE_CMP0 + 1, r27
002623 e2bb                      	ldi r27, 0x2B //set the period for CMP1
002624 93b0 0a2a                 	sts TCA0_SINGLE_CMP1, r27
002626 e0ba                      	ldi r27, 0x0A
002627 93b0 0a2b                 	sts TCA0_SINGLE_CMP1 + 1, r27
002629 e4b1                      	ldi r27, 0x41 //set the period for CMP2
00262a 93b0 0a2c                 	sts TCA0_SINGLE_CMP2, r27
00262c e0bf                      	ldi r27, 0x0F
00262d 93b0 0a2d                 	sts TCA0_SINGLE_CMP2 + 1, r27
00262f e5b7                      	ldi r27, 0x57 //set the period for OVF
002630 93b0 0a26                 	sts TCA0_SINGLE_PER, r27
002632 e1b4                      	ldi r27, 0x14
002633 93b0 0a27                 	sts TCA0_SINGLE_PER + 1, r27
002635 e0bb                      	ldi r27, TCA_SINGLE_CLKSEL_DIV64_gc | TCA_SINGLE_ENABLE_bm //use prescale divider of 64 and enable timer
002636 93b0 0a00                 	sts TCA0_SINGLE_CTRLA, r27
                                 
                                 	//NOTE: Channel Timers are clocked (20/2)/(0.8948865) = 11.1746014718 times faster than the NES APU
                                 	//Because of this, we multiply all the NES timer values by 11.1746014718 beforehand
                                 	//Since we rotate the sequence when the timer goes from t-(t-1) to 0, instead of 0 to t like the NES, we add 1 to the NES timers before multiplying
                                 	//The ATmega4809 is configured to run at 20 MHz
                                 	//The /2 comes from the prescaler divider used
                                 	//0.8948865 MHz is the speed of the NTSC NES APU
                                 	//NOTE: This means that any offset to the pitch for the NES timers would be multiplied by 11.1746014718 aswell.
                                 	//Pulse 1
002638 e0b0                      	ldi r27, TCB_CNTMODE_INT_gc //interrupt mode
002639 93b0 0a81                 	sts TCB0_CTRLB, r27
00263b e0b1                      	ldi r27, TCB_CAPT_bm //enable interrupts
00263c 93b0 0a85                 	sts TCB0_INTCTRL, r27
00263e 91b0 2802                 	lds r27, pulse1_timerL //load the LOW bits for timer
002640 93b0 0a8c                 	sts TCB0_CCMPL, r27
002642 91b0 2803                 	lds r27, pulse1_timerH //load the HIGH bits for timer
002644 93b0 0a8d                 	sts TCB0_CCMPH, r27
002646 e0b3                      	ldi r27, TCB_CLKSEL_CLKDIV2_gc | TCB_ENABLE_bm //use prescaler divider of 2 and enable timer
002647 93b0 0a80                 	sts TCB0_CTRLA, r27
002649 9478                      	sei //global interrupt enable
                                 
                                 pulse1:
00264a fed0                      	sbrs pulse1_sequence, 0 //if the sequence output is zero, return
00264b c012                      	rjmp pulse1_off
                                 
00264c 14e2                      	cp pulse1_length_counter, zero //if length is zero, return
00264d f081                      	breq pulse1_off
                                 
                                 	//NOTE: We will just mute the pulse when the current period is < $0008
                                 	//This is done in order to account for the sweep unit muting the channel when the period is < $0008,
                                 	//Due to the 11.1746014718 timer multiplier being applied to the timer periods, $0008 becomes $0059
                                 pulse1_check_timer_08:
00264e 91c0 0a8c                 	lds r28, TCB0_CCMPL
002650 91d0 0a8d                 	lds r29, TCB0_CCMPH
                                 pulse1_check_timer_08_HIGH:
002652 30d1                      	cpi r29, 0x01 //check timer HIGH period
002653 f008                      	brlo pulse1_check_timer_08_LOW //if the timer HIGH period is $00, check the LOW period
002654 c002                      	rjmp pulse1_check_timer_7FF_HIGH //if the timer HIGH period is > $01, check > $07FF condition
                                 pulse1_check_timer_08_LOW:
002655 35c9                      	cpi r28, 0x59 //check timer LOW period
002656 f038                      	brlo pulse1_off //if the HIGH period == $00 && LOW period <= $59, pulse off
                                 
                                 	//NOTE: Since it'd be too taxing to calculate a target period for every APU clock in the sweep unit,
                                 	//we will be muting the channel if it's period ever reaches $07FF, aka the target period was == $07FF
                                 	//Doing this does not account for the real NES "feature" of muting the pulse even if the sweep unit was disabled.
                                 	//Due to the 11.1746014718 timer multiplier being applied to the timer periods, $07FF becomes $5965
                                 pulse1_check_timer_7FF_HIGH:
002657 35d9                      	cpi r29, 0x59 //check timer HIGH period
002658 f038                      	brlo pulse1_on //if the HIGH period is < $59, then all conditions have passed and pulse is not muted
002659 f009                      	breq pulse1_check_timer_7FF_LOW //if the HIGH period is == $59, we go check if the LOW period is < $65
00265a c003                      	rjmp pulse1_off //pulse off if HIGH period is > $59
                                 pulse1_check_timer_7FF_LOW:
00265b 36c5                      	cpi r28, 0x65 //check timer LOW period
00265c f408                      	brsh pulse1_off //if the HIGH period == $59 && LOW period >= $65, pulse off
00265d c002                      	rjmp pulse1_on //if the HIGH period == $59 && LOW period < $65, pulse on
                                 
                                 pulse1_off:
00265e b821                      	out VPORTA_OUT, zero
00265f cfea                      	rjmp pulse1
                                 
                                 pulse1_on:
002660 91d0 2806                 	lds r29, pulse1_output_volume
                                 /*	cpse r29, zero
                                 	rjmp pulse1_off //if VVVV bits are 0, then there is no volume (channel off)*/
                                 
002662 b9d1                      	out VPORTA_OUT, r29
002663 cfe6                      	rjmp pulse1
                                 
                                 //FRAME COUNTER/AUDIO SAMPLE ISR
                                 sequence_0_2:
002664 b7bf                      	in r27, CPU_SREG
002665 93bf                      	push r27
002666 94f8                      	cli
                                 
                                 	//ENVELOPE
002667 d439                      	rcall pulse1_envelope_routine
                                 
002668 e5b0                      	ldi r27, TCA_SINGLE_CMP0_bm | TCA_SINGLE_CMP2_bm //clear OVF flag
002669 93b0 0a0b                 	sts TCA0_SINGLE_INTFLAGS, r27
00266b 91bf                      	pop r27
00266c bfbf                      	out CPU_SREG, r27
00266d 9518                      	reti
                                 
                                 sequence_1_3:
00266e b7bf                      	in r27, CPU_SREG
00266f 93bf                      	push r27
002670 94f8                      	cli
                                 
                                 	//ENVELOPE
002671 d42f                      	rcall pulse1_envelope_routine
                                 
                                 	//SWEEP
002672 fcf3                      	sbrc pulse1_sweep, 3 //check if the sweep enable bit is cleared
002673 d403                      	rcall pulse1_sweep_routine
                                 
                                 	//LENGTH
                                 	//NOTE: The length routine is relatively simple, so we will not be using clocks to rjmp and ret to a seperate lable
002674 fd95                      	sbrc channel_flags, 5 //check if the length counter halt bit is cleared
002675 c002                      	rjmp sequence_1_3_exit
002676 10e2                      	cpse pulse1_length_counter, zero //if length counter is already 0, don't decrement
002677 94ea                      	dec pulse1_length_counter
                                 
                                 sequence_1_3_exit:
002678 e2b1                      	ldi r27, TCA_SINGLE_CMP1_bm | TCA_SINGLE_OVF_bm //clear OVF flag
002679 93b0 0a0b                 	sts TCA0_SINGLE_INTFLAGS, r27
00267b 91bf                      	pop r27
00267c bfbf                      	out CPU_SREG, r27
00267d 9518                      	reti
                                 
                                 sound_driver:
00267e b7bf                      	in r27, CPU_SREG
00267f 93bf                      	push r27
002680 94f8                      	cli
002681 93cf                      	push r28
002682 93df                      	push r29
                                 
                                 	//SOUND DRIVER
002683 91b0 280e                 	lds r27, pulse1_pattern_delay
002685 11b2                      	cpse r27, zero //if the pattern delay is 0, proceed with sound driver procedures
002686 c202                      	rjmp sound_driver_decrement_frame_delay //if the pattern delay is not 0, decrement the delay
                                 
                                 
                                 
                                 sound_driver_channel0:
002687 91e0 280c                 	lds ZL, pulse1_pattern //current pattern for pulse 1
002689 91f0 280d                 	lds ZH, pulse1_pattern+1
00268b 91a0 280f                 	lds r26, pulse1_pattern_offset //current offset in the pattern for pulse 1
00268d 91b0 2810                 	lds r27, pulse1_pattern_offset+1
00268f 0fea                      	add ZL, r26 //offset the current pattern pointer to point to new byte data
002690 1ffb                      	adc ZH, r27
002691 91b4                      	lpm r27, Z //load the byte data from the current pattern
                                 
                                 sound_driver_channel0_check_if_note: //check if data is a note (0x00 - 0x56)
002692 35b7                      	cpi r27, 0x57
002693 f408                      	brsh sound_driver_channel0_check_if_volume
002694 c0ca                      	rjmp sound_driver_channel0_note
                                 sound_driver_channel0_check_if_volume: //check if data is volume (0x57-0x66)
002695 36b7                      	cpi r27, 0x67
002696 f408                      	brsh sound_driver_channel0_check_if_delay
002697 c0e3                      	rjmp sound_driver_channel0_volume
                                 sound_driver_channel0_check_if_delay: //check if data is a delay (0x67 - 0xE2)
002698 3eb3                      	cpi r27, 0xE3
002699 f408                      	brsh sound_driver_channel0_check_if_instrument
00269a c0ea                      	rjmp sound_driver_channel0_delay
                                 sound_driver_channel0_check_if_instrument: //check for instrument flag (0xE3)
00269b f409                      	brne sound_driver_channel0_check_if_release
00269c c0ed                      	rjmp sound_driver_channel0_instrument_change 
                                 sound_driver_channel0_check_if_release: //check for note release flag (0xE4)
00269d 3eb4                      	cpi r27, 0xE4
00269e f409                      	brne sound_driver_channel0_check_if_end
00269f c194                      	rjmp sound_driver_channel0_release
                                 sound_driver_channel0_check_if_end:
0026a0 3fbf                      	cpi r27, 0xFF
0026a1 f409                      	brne sound_driver_channel0_check_if_fx
0026a2 c1b6                      	rjmp sound_driver_channel0_next_pattern
                                 
                                 
                                 
                                 sound_driver_channel0_check_if_fx: //fx flags (0xE5 - 0xFE)
0026a3 9631                      	adiw Z, 1 //point Z to the byte next to the flag
0026a4 91a4                      	lpm r26, Z //load the fx data into r26
0026a5 d1d9                      	rcall sound_driver_channel0_increment_offset_twice
                                 
0026a6 5eb5                      	subi r27, 0xE5 //prepare offset to perform table lookup
0026a7 eaee                      	ldi ZL, LOW(fx << 1) //load in note table
0026a8 e5f5                      	ldi ZH, HIGH(fx << 1)
0026a9 0fbb                      	lsl r27 //double the offset for the table because we are getting byte data
0026aa 0feb                      	add ZL, r27 //add offset
0026ab 1df2                      	adc ZH, zero
0026ac 91c5                      	lpm r28, Z+ //load address bytes
0026ad 91d4                      	lpm r29, Z
0026ae 2fec                      	mov ZL, r28 //move address bytes back into Z for an indirect jump
0026af 2ffd                      	mov ZH, r29
0026b0 9409                      	ijmp
                                 
                                 
                                 
                                 sound_driver_channel0_fx_0xy: //arpeggio
0026b1 cfd5                      	rjmp sound_driver_channel0
                                 sound_driver_channel0_fx_1xx: //pitch slide up
0026b2 cfd4                      	rjmp sound_driver_channel0
                                 sound_driver_channel0_fx_2xx: //pitch slide down
0026b3 cfd3                      	rjmp sound_driver_channel0
                                 sound_driver_channel0_fx_3xx: //automatic portamento
0026b4 cfd2                      	rjmp sound_driver_channel0
                                 sound_driver_channel0_fx_4xy: //vibrato
0026b5 cfd1                      	rjmp sound_driver_channel0
                                 sound_driver_channel0_fx_7xy: //tremelo effect
0026b6 cfd0                      	rjmp sound_driver_channel0
                                 
                                 //VOLUME SLIDE
                                 sound_driver_channel0_fx_Axy:
0026b7 93a0 282e                 	sts pulse1_fx_Axy, r26
0026b9 cfcd                      	rjmp sound_driver_channel0
                                 
                                 sound_driver_channel0_fx_Bxx: //pattern jump
0026ba cfcc                      	rjmp sound_driver_channel0
                                 sound_driver_channel0_fx_Cxx: //halt
0026bb cfcb                      	rjmp sound_driver_channel0
                                 sound_driver_channel0_fx_Dxx: //frame skip
0026bc cfca                      	rjmp sound_driver_channel0
                                 sound_driver_channel0_fx_Exx: //volume
0026bd cfc9                      	rjmp sound_driver_channel0
                                 sound_driver_channel0_fx_Fxx: //speed and tempo
0026be cfc8                      	rjmp sound_driver_channel0
                                 sound_driver_channel0_fx_Gxx: //note delay
0026bf cfc7                      	rjmp sound_driver_channel0
                                 sound_driver_channel0_fx_Hxy: //hardware sweep up
0026c0 cfc6                      	rjmp sound_driver_channel0
                                 sound_driver_channel0_fx_lxy: //hardware sweep down
0026c1 cfc5                      	rjmp sound_driver_channel0
                                 sound_driver_channel0_fx_Hxx: //FDS modulation depth
0026c2 cfc4                      	rjmp sound_driver_channel0
                                 sound_driver_channel0_fx_Ixx: //FDS modulation speed
0026c3 cfc3                      	rjmp sound_driver_channel0
                                 
                                 //FINE PITCH
                                 sound_driver_channel0_fx_Pxx:
0026c4 93a0 282d                 	sts pulse1_fx_Pxx, r26
0026c6 cfc0                      	rjmp sound_driver_channel0
                                 
                                 //NOTE SLIDE UP
                                 sound_driver_channel0_fx_Qxy:
                                 sound_driver_channel0_fx_Qxy_check_arpeggio_macro:
0026c7 91e0 2816                 	lds ZL, pulse1_arpeggio_macro
0026c9 91f0 2817                 	lds ZH, pulse1_arpeggio_macro+1
0026cb 9630                      	adiw Z, 0
0026cc f009                      	breq sound_driver_channel0_fx_Qxy_check_pitch_macro
0026cd cfb9                      	rjmp sound_driver_channel0 //if there is an arpeggio macro, don't enable the effect
                                 
                                 sound_driver_channel0_fx_Qxy_check_pitch_macro:
0026ce 91e0 281d                 	lds ZL, pulse1_pitch_macro
0026d0 91f0 281e                 	lds ZH, pulse1_pitch_macro+1
0026d2 9630                      	adiw Z, 0
0026d3 f009                      	breq sound_driver_channel0_fx_Qxy_check_hi_pitch_macro
0026d4 cfb2                      	rjmp sound_driver_channel0 //if there is a pitch macro, don't enable the effect
                                 
                                 sound_driver_channel0_fx_Qxy_check_hi_pitch_macro:
0026d5 91e0 2823                 	lds ZL, pulse1_hi_pitch_macro
0026d7 91f0 2824                 	lds ZH, pulse1_hi_pitch_macro+1
0026d9 9630                      	adiw Z, 0
0026da f009                      	breq sound_driver_channel0_fx_Qxy_process
0026db cfab                      	rjmp sound_driver_channel0 //if there is a pitch macro, don't enable the effect
                                 
                                 sound_driver_channel0_fx_Qxy_process:
0026dc 2fba                      	mov r27, r26 //copy fx parameters into r27
0026dd 70bf                      	andi r27, 0x0F //mask note index offset
0026de 91c0 2807                 	lds r28, pulse1_note //load current note index
0026e0 0fbc                      	add r27, r28
0026e1 35b7                      	cpi r27, 0x57 //largest possible note index is 0x56
0026e2 f008                      	brlo sound_driver_channel0_fx_Qxy_process_continue
0026e3 e5b6                      	ldi r27, 0x56 //if the target note was larger than the highest possible note index, keep the target at 0x56
                                 
                                 sound_driver_channel0_fx_Qxy_process_continue:
0026e4 e3e4                      	ldi ZL, LOW(note_table << 1) //load in note table
0026e5 e0f0                      	ldi ZH, HIGH(note_table << 1)
0026e6 0fbb                      	lsl r27 //double the offset for the note table because we are getting byte data
0026e7 0feb                      	add ZL, r27 //add offset
0026e8 1df2                      	adc ZH, zero
0026e9 91c5                      	lpm r28, Z+ //load bytes
0026ea 91d4                      	lpm r29, Z
0026eb 93c0 282f                 	sts pulse1_fx_Qxy_target, r28 //load the LOW bits for the target period
0026ed 93d0 2830                 	sts pulse1_fx_Qxy_target+1, r29 //load the HIGH bits for the target period
                                 
0026ef 95a2                      	swap r26
0026f0 70af                      	andi r26, 0x0F //mask effect speed
0026f1 0faa                      	lsl r26 //multiply the speed by 2 NOTE: formula for the speed is 2x+1
0026f2 95a3                      	inc r26 //increment the speed by 1
                                 
0026f3 936f                      	push r22 //only registers r16 - r23 can be used with mulsu
0026f4 937f                      	push r23
0026f5 2f6a                      	mov r22, r26 //store the speed data into r27
0026f6 eb72                      	ldi r23, 0b10110010 //store r23 with 11.125 note: this is the closest approximation to the 11.1746014718 multiplier we can get with 8 bits
0026f7 9f67                      	mul r22, r23
0026f8 917f                      	pop r23
0026f9 916f                      	pop r22
                                 
0026fa 9416                      	lsr r1 //shift out the fractional bits
0026fb 9407                      	ror r0
0026fc 9416                      	lsr r1
0026fd 9407                      	ror r0
0026fe 9416                      	lsr r1
0026ff 9407                      	ror r0
002700 9416                      	lsr r1
002701 9407                      	ror r0
                                 
002702 9200 2831                 	sts pulse1_fx_Qxy_speed, r0 //store the effect speed
002704 9210 2832                 	sts pulse1_fx_Qxy_speed+1, r1
002706 cf80                      	rjmp sound_driver_channel0
                                 
                                 //NOTE SLIDE DOWN
                                 sound_driver_channel0_fx_Rxy:
                                 sound_driver_channel0_fx_Rxy_check_arpeggio_macro:
002707 91e0 2816                 	lds ZL, pulse1_arpeggio_macro
002709 91f0 2817                 	lds ZH, pulse1_arpeggio_macro+1
00270b 9630                      	adiw Z, 0
00270c f009                      	breq sound_driver_channel0_fx_Rxy_check_pitch_macro
00270d cf79                      	rjmp sound_driver_channel0 //if there is an arpeggio macro, don't enable the effect
                                 
                                 sound_driver_channel0_fx_Rxy_check_pitch_macro:
00270e 91e0 281d                 	lds ZL, pulse1_pitch_macro
002710 91f0 281e                 	lds ZH, pulse1_pitch_macro+1
002712 9630                      	adiw Z, 0
002713 f009                      	breq sound_driver_channel0_fx_Rxy_check_hi_pitch_macro
002714 cf72                      	rjmp sound_driver_channel0 //if there is a pitch macro, don't enable the effect
                                 
                                 sound_driver_channel0_fx_Rxy_check_hi_pitch_macro:
002715 91e0 2823                 	lds ZL, pulse1_hi_pitch_macro
002717 91f0 2824                 	lds ZH, pulse1_hi_pitch_macro+1
002719 9630                      	adiw Z, 0
00271a f009                      	breq sound_driver_channel0_fx_Rxy_process
00271b cf6b                      	rjmp sound_driver_channel0 //if there is a pitch macro, don't enable the effect
                                 
                                 sound_driver_channel0_fx_Rxy_process:
00271c 2fba                      	mov r27, r26 //copy fx parameters into r27
00271d 70bf                      	andi r27, 0x0F //mask note index offset
00271e 91c0 2807                 	lds r28, pulse1_note //load current note index
002720 1bcb                      	sub r28, r27
002721 f008                      	brcs sound_driver_channel0_fx_Rxy_process_continue
002722 e0c0                      	ldi r28, 0x00
                                 
                                 sound_driver_channel0_fx_Rxy_process_continue:
002723 e3e4                      	ldi ZL, LOW(note_table << 1) //load in note table
002724 e0f0                      	ldi ZH, HIGH(note_table << 1)
002725 0fcc                      	lsl r28 //double the offset for the note table because we are getting byte data
002726 0fec                      	add ZL, r28 //add offset
002727 1df2                      	adc ZH, zero
002728 91c5                      	lpm r28, Z+ //load bytes
002729 91d4                      	lpm r29, Z
00272a 93c0 2833                 	sts pulse1_fx_Rxy_target, r28 //load the LOW bits for the target period
00272c 93d0 2834                 	sts pulse1_fx_Rxy_target+1, r29 //load the HIGH bits for the target period
                                 
00272e 95a2                      	swap r26
00272f 70af                      	andi r26, 0x0F //mask effect speed
002730 0faa                      	lsl r26 //multiply the speed by 2 NOTE: formula for the speed is 2x+1
002731 95a3                      	inc r26 //increment the speed by 1
                                 
002732 936f                      	push r22 //only registers r16 - r23 can be used with mulsu
002733 937f                      	push r23
002734 2f6a                      	mov r22, r26 //store the speed data into r27
002735 eb72                      	ldi r23, 0b10110010 //store r23 with 11.125 note: this is the closest approximation to the 11.1746014718 multiplier we can get with 8 bits
002736 9f67                      	mul r22, r23
002737 917f                      	pop r23
002738 916f                      	pop r22
                                 
002739 9416                      	lsr r1 //shift out the fractional bits
00273a 9407                      	ror r0
00273b 9416                      	lsr r1
00273c 9407                      	ror r0
00273d 9416                      	lsr r1
00273e 9407                      	ror r0
00273f 9416                      	lsr r1
002740 9407                      	ror r0
                                 
002741 9200 2835                 	sts pulse1_fx_Rxy_speed, r0 //store the effect speed
002743 9210 2836                 	sts pulse1_fx_Rxy_speed+1, r1
002745 cf41                      	rjmp sound_driver_channel0
                                 
                                 sound_driver_channel0_fx_Sxx: //mute delay
002746 cf40                      	rjmp sound_driver_channel0
                                 
                                 //DUTY
                                 sound_driver_channel0_fx_Vxx:
002747 e5f5                      	ldi ZH, HIGH(sequences << 1) //point Z to sequence table
002748 eaea                      	ldi ZL, LOW(sequences << 1)
002749 0fea                      	add ZL, r26 //offset the pointer
00274a 1df2                      	adc ZH, zero
                                 
00274b 95a6                      	lsr r26 //move the duty cycle bits to the 2 MSB for pulse1_param (register $4000)
00274c 95a7                      	ror r26
00274d 95a7                      	ror r26
00274e 91b0 2800                 	lds r27, pulse1_param //load r27 with pulse1_param (register $4000)
002750 2fcb                      	mov r28, r27 //store a copy of pulse1_param into r28
002751 7cb0                      	andi r27, 0b11000000 //mask the duty cycle bits
002752 13ab                      	cpse r26, r27 //check if the previous duty cycle and the new duty cycle are equal
002753 c001                      	rjmp sound_driver_channel0_fx_Vxx_store
002754 cf32                      	rjmp sound_driver_channel0 //if the previous and new duty cycle are the same, don't reload the sequence
                                 
                                 sound_driver_channel0_fx_Vxx_store:
002755 90d4                      	lpm pulse1_sequence, Z //store the sequence
                                 
002756 73cf                      	andi r28, 0b00111111 //mask out the duty cycle bits
002757 2bcb                      	or r28, r27 //store the new duty cycle bits into r27
002758 93c0 2800                 	sts pulse1_param, r28
00275a cf2c                      	rjmp sound_driver_channel0
                                 
                                 sound_driver_channel0_fx_Wxx: //DPCM sample speed
00275b cf2b                      	rjmp sound_driver_channel0
                                 sound_driver_channel0_fx_Xxx: //DPCM sample retrigger
00275c cf2a                      	rjmp sound_driver_channel0
                                 sound_driver_channel0_fx_Yxx: //DPCM sample offset
00275d cf29                      	rjmp sound_driver_channel0
                                 sound_driver_channel0_fx_Zxx: //DPCM sample delta counter
00275e cf28                      	rjmp sound_driver_channel0
                                 
                                 
                                 sound_driver_channel0_note:
00275f 93b0 2807                 	sts pulse1_note, r27 //store the note index
002761 e0a3                      	ldi r26, 0x03
002762 e0b2                      	ldi r27, 0x02
002763 93b0 2813                 	sts pulse1_volume_macro_offset, r27 //reset all macro offsets
002765 93a0 2818                 	sts pulse1_arpeggio_macro_offset, r26
002767 93b0 281f                 	sts pulse1_pitch_macro_offset, r27
002769 93b0 2825                 	sts pulse1_hi_pitch_macro_offset, r27
00276b 93b0 282a                 	sts pulse1_duty_macro_offset, r27
00276d 9220 281c                 	sts pulse1_total_pitch_offset, zero //reset the pitch and hi pitch offset
00276f 9220 2822                 	sts pulse1_total_hi_pitch_offset, zero
002771 9220 282f                 	sts pulse1_fx_Qxy_target, zero //reset the Qxy, Rxy effects
002773 9220 2830                 	sts pulse1_fx_Qxy_target+1, zero
002775 9220 2833                 	sts pulse1_fx_Rxy_target, zero
002777 9220 2834                 	sts pulse1_fx_Rxy_target+1, zero
002779 d0fb                      	rcall sound_driver_channel0_increment_offset
00277a cf0c                      	rjmp sound_driver_channel0
                                 
                                 
                                 
                                 sound_driver_channel0_volume:
00277b 55b7                      	subi r27, 0x57 //NOTE: the delay values are offset by the highest volume value, which is 0x56
00277c 91a0 2800                 	lds r26, pulse1_param
00277e 7fa0                      	andi r26, 0xF0 //clear previous VVVV volume bits
00277f 2bab                      	or r26, r27 //move new VVVV bits into pulse1_param
002780 93a0 2800                 	sts pulse1_param, r26
002782 6096                      	sbr channel_flags, 6
002783 d0f1                      	rcall sound_driver_channel0_increment_offset
002784 cf02                      	rjmp sound_driver_channel0
                                 
                                 
                                 
                                 sound_driver_channel0_delay:
002785 56b7                      	subi r27, 0x67 //NOTE: the delay values are offset by the highest volume value, which is 0x66
002786 93b0 280e                 	sts pulse1_pattern_delay, r27
002788 d0ec                      	rcall sound_driver_channel0_increment_offset
002789 c102                      	rjmp sound_driver_instrument_routine
                                 
                                 
                                 
                                 sound_driver_channel0_instrument_change:
00278a 9220 2811                 	sts pulse1_volume_macro, zero //reset all macro addresses
00278c 9220 2812                 	sts pulse1_volume_macro+1, zero
00278e 9220 2816                 	sts pulse1_arpeggio_macro, zero
002790 9220 2817                 	sts pulse1_arpeggio_macro+1, zero
002792 9220 281d                 	sts pulse1_pitch_macro, zero
002794 9220 281e                 	sts pulse1_pitch_macro+1, zero
002796 9220 2823                 	sts pulse1_hi_pitch_macro, zero
002798 9220 2824                 	sts pulse1_hi_pitch_macro+1, zero
00279a 9220 2828                 	sts pulse1_duty_macro, zero
00279c 9220 2829                 	sts pulse1_duty_macro+1, zero
00279e 9220 281c                 	sts pulse1_total_pitch_offset, zero //reset the pitch offset
0027a0 9220 2822                 	sts pulse1_total_hi_pitch_offset, zero //reset the hi pitch offset
                                 
0027a2 9631                      	adiw Z, 1 //point to the byte next to the flag
0027a3 91b4                      	lpm r27, Z //store the instrument offset into r27
0027a4 e7e1                      	ldi ZL, LOW(instruments) //point Z to instruments table
0027a5 e2f5                      	ldi ZH, HIGH(instruments)
0027a6 0feb                      	add ZL, r27 //point Z to offsetted instrument
0027a7 1df2                      	adc ZH, zero
0027a8 0fee                      	lsl ZL //multiply by 2 to make Z into a byte pointer for the instrument's address
0027a9 1fff                      	rol ZH
0027aa 91a5                      	lpm r26, Z+ //r26:r27 now points to the instrument
0027ab 91b4                      	lpm r27, Z
                                 
0027ac 0faa                      	lsl r26 //multiply by 2 to make r26:r27 into a byte pointer for the instrument's data
0027ad 1fbb                      	rol r27
0027ae 2fea                      	mov ZL, r26
0027af 2ffb                      	mov ZH, r27
0027b0 91b4                      	lpm r27, Z //get macro header byte. NOTE: Each macro type for each intrument is represented by a bit in this byte. 1 indicates that the instrument uses a macro of it's corresponding type.
0027b1 9632                      	adiw Z, 2 //point Z to the address of the macro
0027b2 e0a6                      	ldi r26, 6 //(6-1) = 5 for the 5 different macro types. NOTE: bit 0 = volume, bit 1 = arpeggio, bit 2 = pitch, bit 3 = hi pitch, bit 4 = duty
                                 sound_driver_channel0_instrument_change_macro_loop:
0027b3 95aa                      	dec r26
0027b4 f019                      	breq sound_driver_channel0_instrument_change_exit
0027b5 95b6                      	lsr r27
0027b6 f078                      	brcs sound_driver_channel0_instrument_change_load_macro
0027b7 cffb                      	rjmp sound_driver_channel0_instrument_change_macro_loop
                                 
                                 
                                 
                                 sound_driver_channel0_instrument_change_exit:
0027b8 e0a3                      	ldi r26, 0x03
0027b9 e0b2                      	ldi r27, 0x02
0027ba 93b0 2813                 	sts pulse1_volume_macro_offset, r27 //reset all macro offsets
0027bc 93a0 2818                 	sts pulse1_arpeggio_macro_offset, r26
0027be 93b0 281f                 	sts pulse1_pitch_macro_offset, r27
0027c0 93b0 2825                 	sts pulse1_hi_pitch_macro_offset, r27
0027c2 93b0 282a                 	sts pulse1_duty_macro_offset, r27
0027c4 d0ba                      	rcall sound_driver_channel0_increment_offset_twice
0027c5 cec1                      	rjmp sound_driver_channel0
                                 
                                 
                                 
                                 sound_driver_channel0_instrument_change_load_macro:
0027c6 91c5                      	lpm r28, Z+ //r28:r29 now point to the macro
0027c7 91d5                      	lpm r29, Z+
                                 
0027c8 30a5                      	cpi r26, 5
0027c9 f039                      	breq sound_driver_channel0_instrument_change_load_macro_volume
0027ca 30a4                      	cpi r26, 4
0027cb f079                      	breq sound_driver_channel0_instrument_change_load_macro_arpeggio
0027cc 30a3                      	cpi r26, 3
0027cd f0d9                      	breq sound_driver_channel0_instrument_change_load_macro_pitch
0027ce 30a2                      	cpi r26, 2
0027cf f159                      	breq sound_driver_channel0_instrument_change_load_macro_hi_pitch
0027d0 c03c                      	rjmp sound_driver_channel0_instrument_change_load_macro_duty
                                 
                                 sound_driver_channel0_instrument_change_load_macro_volume:
0027d1 93c0 2811                 	sts pulse1_volume_macro, r28
0027d3 93d0 2812                 	sts pulse1_volume_macro+1, r29
0027d5 d041                      	rcall sound_driver_channel0_instrument_change_read_header
0027d6 93c0 2815                 	sts pulse1_volume_macro_release, r28
0027d8 93d0 2814                 	sts pulse1_volume_macro_loop, r29
0027da cfd8                      	rjmp sound_driver_channel0_instrument_change_macro_loop
                                 	
                                 sound_driver_channel0_instrument_change_load_macro_arpeggio:
0027db 93c0 2816                 	sts pulse1_arpeggio_macro, r28
0027dd 93d0 2817                 	sts pulse1_arpeggio_macro+1, r29
0027df 9220 282f                 	sts pulse1_fx_Qxy_target, zero //reset the Qxy, Rxy effects
0027e1 9220 2830                 	sts pulse1_fx_Qxy_target+1, zero
0027e3 9220 2833                 	sts pulse1_fx_Rxy_target, zero
0027e5 9220 2834                 	sts pulse1_fx_Rxy_target+1, zero
0027e7 d03a                      	rcall sound_driver_channel0_instrument_change_read_header_arpeggio
0027e8 cfca                      	rjmp sound_driver_channel0_instrument_change_macro_loop
                                 
                                 sound_driver_channel0_instrument_change_load_macro_pitch:
0027e9 93c0 281d                 	sts pulse1_pitch_macro, r28
0027eb 93d0 281e                 	sts pulse1_pitch_macro+1, r29
0027ed 9220 282f                 	sts pulse1_fx_Qxy_target, zero //reset the Qxy, Rxy effects
0027ef 9220 2830                 	sts pulse1_fx_Qxy_target+1, zero
0027f1 9220 2833                 	sts pulse1_fx_Rxy_target, zero
0027f3 9220 2834                 	sts pulse1_fx_Rxy_target+1, zero
0027f5 d021                      	rcall sound_driver_channel0_instrument_change_read_header
0027f6 93c0 2821                 	sts pulse1_pitch_macro_release, r28
0027f8 93d0 2820                 	sts pulse1_pitch_macro_loop, r29
0027fa cfb8                      	rjmp sound_driver_channel0_instrument_change_macro_loop
                                 
                                 sound_driver_channel0_instrument_change_load_macro_hi_pitch:
0027fb 93c0 2823                 	sts pulse1_hi_pitch_macro, r28
0027fd 93d0 2824                 	sts pulse1_hi_pitch_macro+1, r29
0027ff 9220 282f                 	sts pulse1_fx_Qxy_target, zero //reset the Qxy, Rxy effects
002801 9220 2830                 	sts pulse1_fx_Qxy_target+1, zero
002803 9220 2833                 	sts pulse1_fx_Rxy_target, zero
002805 9220 2834                 	sts pulse1_fx_Rxy_target+1, zero
002807 d00f                      	rcall sound_driver_channel0_instrument_change_read_header
002808 93c0 2827                 	sts pulse1_hi_pitch_macro_release, r28
00280a 93d0 2826                 	sts pulse1_hi_pitch_macro_loop, r29
00280c cfa6                      	rjmp sound_driver_channel0_instrument_change_macro_loop
                                 
                                 sound_driver_channel0_instrument_change_load_macro_duty:
00280d 93c0 2828                 	sts pulse1_duty_macro, r28
00280f 93d0 2829                 	sts pulse1_duty_macro+1, r29
002811 d005                      	rcall sound_driver_channel0_instrument_change_read_header
002812 93c0 282c                 	sts pulse1_duty_macro_release, r28
002814 93d0 282b                 	sts pulse1_duty_macro_loop, r29
002816 cf9c                      	rjmp sound_driver_channel0_instrument_change_macro_loop
                                 
                                 
                                 
                                 sound_driver_channel0_instrument_change_read_header:
002817 93ef                      	push ZL
002818 93ff                      	push ZH
002819 2fec                      	mov ZL, r28
00281a 2ffd                      	mov ZH, r29
00281b 0fee                      	lsl ZL
00281c 1fff                      	rol ZH
00281d 91c5                      	lpm r28, Z+
00281e 91d4                      	lpm r29, Z
00281f 91ff                      	pop ZH
002820 91ef                      	pop ZL
002821 9508                      	ret
                                 
                                 sound_driver_channel0_instrument_change_read_header_arpeggio:
002822 93ef                      	push ZL
002823 93ff                      	push ZH
002824 2fec                      	mov ZL, r28
002825 2ffd                      	mov ZH, r29
002826 0fee                      	lsl ZL
002827 1fff                      	rol ZH
002828 91c5                      	lpm r28, Z+
002829 91d5                      	lpm r29, Z+
00282a 93c0 281a                 	sts pulse1_arpeggio_macro_release, r28
00282c 93d0 2819                 	sts pulse1_arpeggio_macro_loop, r29
00282e 91c4                      	lpm r28, Z
00282f 93c0 281b                 	sts pulse1_arpeggio_macro_mode, r28
002831 91ff                      	pop ZH
002832 91ef                      	pop ZL
002833 9508                      	ret
                                 
                                 
                                 
                                 sound_driver_channel0_release:
                                 sound_driver_channel0_release_volume:
002834 91b0 2815                 	lds r27, pulse1_volume_macro_release
002836 3fbf                      	cpi r27, 0xFF //check if volume macro has a release flag
002837 f019                      	breq sound_driver_channel0_release_arpeggio //if the macro has no release flag, check the next macro
002838 95b3                      	inc r27
002839 93b0 2813                 	sts pulse1_volume_macro_offset, r27 //adjust offset so that it starts after the release flag index
                                 sound_driver_channel0_release_arpeggio:
00283b 91b0 281a                 	lds r27, pulse1_arpeggio_macro_release
00283d 3fbf                      	cpi r27, 0xFF //check if arpeggio macro has a release flag
00283e f019                      	breq sound_driver_channel0_release_pitch
00283f 95b3                      	inc r27
002840 93b0 2818                 	sts pulse1_arpeggio_macro_offset, r27
                                 sound_driver_channel0_release_pitch:
002842 91b0 2821                 	lds r27, pulse1_pitch_macro_release
002844 3fbf                      	cpi r27, 0xFF //check if pitch macro has a release flag
002845 f019                      	breq sound_driver_channel0_release_hi_pitch
002846 95b3                      	inc r27
002847 93b0 281f                 	sts pulse1_pitch_macro_offset, r27
                                 sound_driver_channel0_release_hi_pitch:
002849 91b0 2827                 	lds r27, pulse1_hi_pitch_macro_release
00284b 3fbf                      	cpi r27, 0xFF //check if hi_pitch macro has a release flag
00284c f019                      	breq sound_driver_channel0_release_duty
00284d 95b3                      	inc r27
00284e 93b0 2825                 	sts pulse1_hi_pitch_macro_offset, r27
                                 sound_driver_channel0_release_duty:
002850 91b0 282c                 	lds r27, pulse1_duty_macro_release
002852 3fbf                      	cpi r27, 0xFF //check if duty macro has a release flag
002853 f019                      	breq sound_driver_channel0_release_exit
002854 95b3                      	inc r27
002855 93b0 282a                 	sts pulse1_duty_macro_offset, r27
                                 sound_driver_channel0_release_exit:
002857 d01d                      	rcall sound_driver_channel0_increment_offset
002858 ce2e                      	rjmp sound_driver_channel0
                                 
                                 
                                 
                                 sound_driver_channel0_next_pattern:
002859 91e0 2808                 	lds ZL, song_frames
00285b 91f0 2809                 	lds ZH, song_frames+1
00285d 91a0 280a                 	lds r26, song_frame_offset //we must offset to the appropriate channel
00285f 91b0 280b                 	lds r27, song_frame_offset+1
002861 961a                      	adiw r27:r26, 10 //increment the frame offset by (5*2 = 10) since there are 5 channel patterns per frame. We *2 because we are getting byte values from the table
002862 93a0 280a                 	sts song_frame_offset, r26
002864 93b0 280b                 	sts song_frame_offset+1, r27
                                 	//adiw r27:r26, 2 //offset for channel 1 (test)
002866 0fea                      	add ZL, r26
002867 1ffb                      	adc ZH, r27
                                 
002868 91a5                      	lpm r26, Z+ //load the address of the next pattern
002869 91b4                      	lpm r27, Z
00286a 0faa                      	lsl r26
00286b 1fbb                      	rol r27
00286c 93a0 280c                 	sts pulse1_pattern, r26
00286e 93b0 280d                 	sts pulse1_pattern+1, r27
                                 
002870 9220 280f                 	sts pulse1_pattern_offset, zero //restart the pattern offset back to 0 because we are reading from a new pattern now
002872 9220 2810                 	sts pulse1_pattern_offset+1, zero
002874 ce12                      	rjmp sound_driver_channel0
                                 
                                 
                                 
                                 sound_driver_channel0_increment_offset:
002875 91e0 280f                 	lds ZL, pulse1_pattern_offset //current offset in the pattern for pulse 1
002877 91f0 2810                 	lds ZH, pulse1_pattern_offset+1
002879 9631                      	adiw Z, 1
00287a 93e0 280f                 	sts pulse1_pattern_offset, ZL
00287c 93f0 2810                 	sts pulse1_pattern_offset+1, ZH
00287e 9508                      	ret
                                 
                                 sound_driver_channel0_increment_offset_twice: //used for data that takes up 2 bytes worth of space
00287f 91e0 280f                 	lds ZL, pulse1_pattern_offset //current offset in the pattern for pulse 1
002881 91f0 2810                 	lds ZH, pulse1_pattern_offset+1
002883 9632                      	adiw Z, 2 //increment the pointer twice
002884 93e0 280f                 	sts pulse1_pattern_offset, ZL
002886 93f0 2810                 	sts pulse1_pattern_offset+1, ZH
002888 9508                      	ret
                                 
                                 
                                 
                                 sound_driver_decrement_frame_delay:
002889 95ba                      	dec r27
00288a 93b0 280e                 	sts pulse1_pattern_delay, r27
                                 
                                 
                                 
                                 sound_driver_instrument_routine:
                                 sound_driver_instrument_routine_channel0_volume:
00288c 91e0 2811                 	lds ZL, pulse1_volume_macro
00288e 91f0 2812                 	lds ZH, pulse1_volume_macro+1
002890 9630                      	adiw Z, 0
002891 f181                      	breq sound_driver_instrument_routine_channel0_volume_default //if no volume macro is in use, use default multiplier of F
002892 0fee                      	lsl ZL //multiply by 2 to make Z into a byte pointer for the macro's address
002893 1fff                      	rol ZH
002894 91a0 2813                 	lds r26, pulse1_volume_macro_offset
002896 0fea                      	add ZL, r26
002897 1df2                      	adc ZH, zero
                                 
002898 91b0 2815                 	lds r27, pulse1_volume_macro_release
00289a 17ba                      	cp r27, r26
00289b f429                      	brne sound_driver_instrument_routine_channel0_volume_increment //if the current offset is not equal to the release index, increment the offset
00289c 91a0 2814                 	lds r26, pulse1_volume_macro_loop
00289e 17ab                      	cp r26, r27 //check if loop flag exists NOTE: a loop flag and a release flag can only co-exist if the loop is less than the release
00289f f010                      	brlo sound_driver_instrument_routine_channel0_volume_increment+1 //if the current offset is equal to the release index and there is a loop, load the offset with the loop index, but also read the current index data
0028a0 c003                      	rjmp sound_driver_instrument_routine_channel0_volume_read //if the current offset is equal to the release index and there is no loop, then keep the offset unchanged
                                 
                                 sound_driver_instrument_routine_channel0_volume_increment:
0028a1 95a3                      	inc r26 //increment the macro offset
0028a2 93a0 2813                 	sts pulse1_volume_macro_offset, r26
                                 	
                                 sound_driver_instrument_routine_channel0_volume_read:
0028a4 91b4                      	lpm r27, Z //load volume data into r27
0028a5 3fbf                      	cpi r27, 0xFF //check for macro end flag
0028a6 f469                      	brne sound_driver_instrument_routine_channel0_volume_calculate //if the data was not the macro end flag, calculate the volume
                                 
                                 
                                 
                                 sound_driver_instrument_routine_channel0_volume_macro_end_flag:
                                 sound_driver_instrument_routine_channel0_volume_macro_end_flag_check_release:
0028a7 91b0 2815                 	lds r27, pulse1_volume_macro_release
0028a9 3fbf                      	cpi r27, 0xFF
0028aa f429                      	brne sound_driver_instrument_routine_channel0_volume_macro_end_flag_last_index //if there is a release flag, we don't need to loop. stay at the last valid index
                                 
                                 sound_driver_instrument_routine_channel0_volume_macro_end_flag_check_loop:
0028ab 91b0 2814                 	lds r27, pulse1_volume_macro_loop //load the loop index
0028ad 93b0 2813                 	sts pulse1_volume_macro_offset, r27 //store the loop index into the offset
0028af cfdc                      	rjmp sound_driver_instrument_routine_channel0_volume //go back and re-read the volume data
                                 
                                 sound_driver_instrument_routine_channel0_volume_macro_end_flag_last_index:
0028b0 50a2                      	subi r26, 2 //go back to last valid index NOTE: Since we increment the offset everytime we read data, we have to decrement twice. 1 to account for the increment and 1 for the end flag.
0028b1 93a0 2813                 	sts pulse1_volume_macro_offset, r26
0028b3 cfd8                      	rjmp sound_driver_instrument_routine_channel0_volume //go back and re-read the volume data
                                 
                                 
                                 
                                 sound_driver_instrument_routine_channel0_volume_calculate:
0028b4 eee2                      	ldi ZL, LOW(volumes << 1) //point Z to volume table
0028b5 e5f5                      	ldi ZH, HIGH(volumes << 1)
0028b6 95b2                      	swap r27 //multiply the offset by 16 to move to the correct row in the volume table
0028b7 0feb                      	add ZL, r27 //add offset to the table
0028b8 1df2                      	adc ZH, zero
                                 
                                 sound_driver_instrument_routine_channel0_volume_load:
0028b9 91b0 2800                 	lds r27, pulse1_param //load main volume
0028bb 70bf                      	andi r27, 0x0F //mask for VVVV volume bits
0028bc 0feb                      	add ZL, r27 //offset the volume table by the main volume
0028bd 1df2                      	adc ZH, zero
0028be 91b4                      	lpm r27, Z
0028bf 93b0 2806                 	sts pulse1_output_volume, r27 //store the new output volume
0028c1 c005                      	rjmp sound_driver_instrument_routine_channel0_arpeggio
                                 
                                 sound_driver_instrument_routine_channel0_volume_default:
0028c2 91b0 2800                 	lds r27, pulse1_param //a multiplier of F means in no change to the main volume, so we just copy the value into the output
0028c4 70bf                      	andi r27, 0x0F //mask for VVVV volume bits
0028c5 93b0 2806                 	sts pulse1_output_volume, r27
                                 	
                                 
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio:
                                 	//NOTE: The arpeggio macro routine is also in charge of actually setting the timers using the note stored in SRAM. The default routine is responsible for that in the case no arpeggio macro is used.
0028c7 91e0 2816                 	lds ZL, pulse1_arpeggio_macro
0028c9 91f0 2817                 	lds ZH, pulse1_arpeggio_macro+1
0028cb 9630                      	adiw Z, 0
0028cc f1f9                      	breq sound_driver_instrument_routine_channel0_arpeggio_default //if no arpeggio macro is in use, go output the note without any offsets
0028cd 0fee                      	lsl ZL //multiply by 2 to make Z into a byte pointer for the macro's address
0028ce 1fff                      	rol ZH
0028cf 91a0 2818                 	lds r26, pulse1_arpeggio_macro_offset
0028d1 0fea                      	add ZL, r26
0028d2 1df2                      	adc ZH, zero
                                 
0028d3 91b0 281a                 	lds r27, pulse1_arpeggio_macro_release
0028d5 17ba                      	cp r27, r26
0028d6 f429                      	brne sound_driver_instrument_routine_channel0_arpeggio_increment //if the current offset is not equal to the release index, increment the offset
0028d7 91a0 2819                 	lds r26, pulse1_arpeggio_macro_loop
0028d9 17ab                      	cp r26, r27 //check if loop flag exists NOTE: a loop flag and a release flag can only co-exist if the loop is less than the release
0028da f010                      	brlo sound_driver_instrument_routine_channel0_arpeggio_increment+1 //if the current offset is equal to the release index and there is a loop, reload the loop index, but also read the current index data
0028db c003                      	rjmp sound_driver_instrument_routine_channel0_arpeggio_read //if the current offset is equal to the release index and there is no loop, then keep the offset unchanged
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_increment:
0028dc 95a3                      	inc r26 //increment the macro offset
0028dd 93a0 2818                 	sts pulse1_arpeggio_macro_offset, r26
                                 	
                                 sound_driver_instrument_routine_channel0_arpeggio_read:
0028df 91b4                      	lpm r27, Z //load arpeggio data into r27
0028e0 38b0                      	cpi r27, 0x80 //check for macro end flag
0028e1 f4f9                      	brne sound_driver_instrument_routine_channel0_arpeggio_process //if the data was not the macro end flag, calculate the volume
                                 
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_macro_end_flag:
                                 sound_driver_instrument_routine_channel0_arpeggio_macro_end_flag_check_mode:
0028e2 50a1                      	subi r26, 1 //keep the offset at the end flag
0028e3 93a0 2818                 	sts pulse1_arpeggio_macro_offset, r26
0028e5 91b0 281b                 	lds r27, pulse1_arpeggio_macro_mode //load the mode to check for fixed/relative mode NOTE: end behavior for fixed/relative mode is different in that once the macro ends, the true note is played
0028e7 30b1                      	cpi r27, 0x01
0028e8 f048                      	brlo sound_driver_instrument_routine_channel0_arpeggio_macro_end_flag_absolute
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_macro_end_flag_fixed_relative_check_release:
0028e9 91b0 281a                 	lds r27, pulse1_arpeggio_macro_release
0028eb 3fbf                      	cpi r27, 0xFF
0028ec f4f9                      	brne sound_driver_instrument_routine_channel0_arpeggio_default //if there is a release flag, we don't need to loop. just play the true note
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_macro_end_flag_fixed_relative_check_loop:
0028ed 91b0 2819                 	lds r27, pulse1_arpeggio_macro_loop
0028ef 3fbf                      	cpi r27, 0xFF
0028f0 f469                      	brne sound_driver_instrument_routine_channel0_arpeggio_macro_end_flag_reload //if there is no release flag, but there is a loop, load the offset with the loop index
0028f1 c01a                      	rjmp sound_driver_instrument_routine_channel0_arpeggio_default //if there is no release flag and no loop, then play the true note
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_macro_end_flag_absolute:
0028f2 91b0 281a                 	lds r27, pulse1_arpeggio_macro_release
0028f4 3fbf                      	cpi r27, 0xFF
0028f5 f421                      	brne sound_driver_instrument_routine_channel0_arpeggio_macro_end_flag_absolute_no_loop //if there is a release flag, react as if there was no loop.
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_macro_end_flag_absolute_check_loop:
0028f6 91b0 2819                 	lds r27, pulse1_arpeggio_macro_loop //load the loop index
0028f8 3fbf                      	cpi r27, 0xFF //check if loop flag exists
0028f9 f421                      	brne sound_driver_instrument_routine_channel0_arpeggio_macro_end_flag_reload //if a loop flag exists, then load the loop value
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_macro_end_flag_absolute_no_loop:
0028fa 50a1                      	subi r26, 1 //if a loop flag does not exist and fixed mode is not used, use the last valid index
0028fb 93a0 2818                 	sts pulse1_arpeggio_macro_offset, r26 //store the last valid index into the offset
0028fd cfc9                      	rjmp sound_driver_instrument_routine_channel0_arpeggio
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_macro_end_flag_reload:
0028fe 93b0 2818                 	sts pulse1_arpeggio_macro_offset, r27 //store the loop index into the offset
002900 cfc6                      	rjmp sound_driver_instrument_routine_channel0_arpeggio //go back and re-read the volume data
                                 
                                 
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_process:
002901 9220 281c                 	sts pulse1_total_pitch_offset, zero //the pitch offsets must be reset when a new note is to be calculated from an arpeggio macro
002903 9220 2822                 	sts pulse1_total_hi_pitch_offset, zero
002905 91a0 281b                 	lds r26, pulse1_arpeggio_macro_mode
002907 30a0                      	cpi r26, 0x00 //absolute mode
002908 f031                      	breq sound_driver_instrument_routine_channel0_arpeggio_process_absolute
002909 30a1                      	cpi r26, 0x01 //fixed mode
00290a f081                      	breq sound_driver_instrument_routine_channel0_arpeggio_process_fixed
00290b c011                      	rjmp sound_driver_instrument_routine_channel0_arpeggio_process_relative //relative mode
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_default:
                                 	//NOTE: the pitch offset does not need to be reset here because there is no new note being calculated
00290c 91a0 2807                 	lds r26, pulse1_note //load the current note index
00290e c01f                      	rjmp sound_driver_instrument_routine_channel0_arpeggio_process_load
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_process_absolute:
00290f 91a0 2807                 	lds r26, pulse1_note //load the current note index
002911 0fab                      	add r26, r27 //offset the note with the arpeggio data
002912 fdb7                      	sbrc r27, 7 //check sign bit to check if we are subtracting from the note index
002913 c004                      	rjmp sound_driver_instrument_routine_channel0_arpeggio_process_absolute_subtract
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_process_absolute_add:
002914 35a7                      	cpi r26, 0x57 //check if the result is larger than the size of the note table (0x56 is the highest possible index)
002915 f0c0                      	brlo sound_driver_instrument_routine_channel0_arpeggio_process_load //if the result is valid, go load the new note
002916 e5a6                      	ldi r26, 0x56 //if the result was too large, just set the result to the highest possible note index
002917 c016                      	rjmp sound_driver_instrument_routine_channel0_arpeggio_process_load
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_process_absolute_subtract:
002918 fda7                      	sbrc r26, 7 //check if result is negative
002919 e0a0                      	ldi r26, 0x00 //if the result was negative, reset it to the 0th index
00291a c013                      	rjmp sound_driver_instrument_routine_channel0_arpeggio_process_load
                                 
                                 
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_process_fixed:
00291b 2fab                      	mov r26, r27 //move the arpeggio data into r26
00291c c011                      	rjmp sound_driver_instrument_routine_channel0_arpeggio_process_load
                                 
                                 
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_process_relative:
00291d 91a0 2807                 	lds r26, pulse1_note //load the current note index
00291f 0fab                      	add r26, r27 //offset the note with the arpeggio data
002920 fdb7                      	sbrc r27, 7 //check sign bit to check if we are subtracting from the note index
002921 c008                      	rjmp sound_driver_instrument_routine_channel0_arpeggio_process_relative_subtract
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_process_relative_add:
002922 93a0 2807                 	sts pulse1_note, r26 //NOTE: relative mode modifies the original note index
002924 35a7                      	cpi r26, 0x57 //check if the result is larger than the size of the note table (0x56 is the highest possible index)
002925 f040                      	brlo sound_driver_instrument_routine_channel0_arpeggio_process_load //if the result is valid, go load the new note
002926 e5a6                      	ldi r26, 0x56 //if the result was too large, just set the result to the highest possible note index
002927 93a0 2807                 	sts pulse1_note, r26
002929 c004                      	rjmp sound_driver_instrument_routine_channel0_arpeggio_process_load
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_process_relative_subtract:
00292a fda7                      	sbrc r26, 7 //check if result is negative
00292b e0a0                      	ldi r26, 0x00 //if the result was negative, reset it to the 0th index
00292c 93a0 2807                 	sts pulse1_note, r26
                                 
                                 
                                 
                                 sound_driver_instrument_routine_channel0_arpeggio_process_load:
00292e e3e4                      	ldi ZL, LOW(note_table << 1) //load in note table
00292f e0f0                      	ldi ZH, HIGH(note_table << 1)
002930 0faa                      	lsl r26 //double the offset for the note table because we are getting byte data
002931 0fea                      	add ZL, r26 //add offset
002932 1df2                      	adc ZH, zero
002933 91a5                      	lpm r26, Z+ //load bytes
002934 91b4                      	lpm r27, Z
002935 93a0 0a8c                 	sts TCB0_CCMPL, r26 //load the LOW bits for timer
002937 93b0 0a8d                 	sts TCB0_CCMPH, r27 //load the HIGH bits for timer
002939 c000                      	rjmp sound_driver_instrument_routine_channel0_pitch
                                 
                                 
                                 
                                 //NOTE: There is a limitation with the pitch routines in that the total pitch can not be offset by 127 in both,
                                 //the positive and negative direction, from the original note pitch. This shouldn't be too much of a problem as
                                 //most songs that use instruments with the pitch macro, do not stray that far from the original note pitch.
                                 //In the case of hi pitch, the total pitch can not be offset by 127*16 from the original pitch. This is also
                                 //not a big deal as you can easily reach the entire note range with an offset of up to 127*16.
                                 sound_driver_instrument_routine_channel0_pitch:
00293a 91e0 281d                 	lds ZL, pulse1_pitch_macro
00293c 91f0 281e                 	lds ZH, pulse1_pitch_macro+1
00293e 9630                      	adiw Z, 0
00293f f409                      	brne sound_driver_instrument_routine_channel0_pitch_continue
002940 c023                      	rjmp sound_driver_instrument_routine_channel0_pitch_default //if no pitch macro is in use, process the current total pitch macro offset
                                 sound_driver_instrument_routine_channel0_pitch_continue:
002941 0fee                      	lsl ZL //multiply by 2 to make z into a byte pointer for the macro's address
002942 1fff                      	rol ZH
002943 91a0 281f                 	lds r26, pulse1_pitch_macro_offset
002945 0fea                      	add ZL, r26
002946 1df2                      	adc ZH, zero
                                 
002947 91b0 2821                 	lds r27, pulse1_pitch_macro_release
002949 17ba                      	cp r27, r26
00294a f429                      	brne sound_driver_instrument_routine_channel0_pitch_increment //if the current offset is not equal to the release index, increment the offset
00294b 91a0 2820                 	lds r26, pulse1_pitch_macro_loop
00294d 17ab                      	cp r26, r27 //check if loop flag exists NOTE: a loop flag and a release flag can only co-exist if the loop is less than the release
00294e f010                      	brlo sound_driver_instrument_routine_channel0_pitch_increment+1 //if the current offset is equal to the release index and there is a loop, load the offset with the loop index, but also read the current index data
00294f c003                      	rjmp sound_driver_instrument_routine_channel0_pitch_read //if the current offset is equal to the release index and there is no loop, then keep the offset unchanged
                                 
                                 sound_driver_instrument_routine_channel0_pitch_increment:
002950 95a3                      	inc r26 //increment the macro offset
002951 93a0 281f                 	sts pulse1_pitch_macro_offset, r26
                                 	
                                 sound_driver_instrument_routine_channel0_pitch_read:
002953 91b4                      	lpm r27, Z //load pitch data into r27
002954 38b0                      	cpi r27, 0x80 //check for macro end flag
002955 f489                      	brne sound_driver_instrument_routine_channel0_pitch_calculate //if the data was not the macro end flag, calculate the pitch offset
                                 
                                 
                                 
                                 sound_driver_instrument_routine_channel0_pitch_macro_end_flag:
                                 sound_driver_instrument_routine_channel0_pitch_macro_end_flag_check_release:
002956 50a1                      	subi r26, 1 //keep the macro offset at the end flag
002957 93a0 281f                 	sts pulse1_pitch_macro_offset, r26
002959 91b0 2821                 	lds r27, pulse1_pitch_macro_release
00295b 3fbf                      	cpi r27, 0xFF
00295c f439                      	brne sound_driver_instrument_routine_channel0_pitch_default //if there is a release flag, we don't need to loop. offset the pitch by the final total pitch
                                 
                                 sound_driver_instrument_routine_channel0_pitch_macro_end_flag_check_loop:
00295d 91b0 2820                 	lds r27, pulse1_pitch_macro_loop //load the loop index
00295f 3fbf                      	cpi r27, 0xFF //check if there is a loop index
002960 f019                      	breq sound_driver_instrument_routine_channel0_pitch_default //if there is no loop flag, we don't need to loop. offset the pitch by the final total pitch
002961 93b0 281f                 	sts pulse1_pitch_macro_offset, r27 //store the loop index into the offset
002963 cfd6                      	rjmp sound_driver_instrument_routine_channel0_pitch //go back and re-read the pitch data
                                 
                                 
                                 
                                 sound_driver_instrument_routine_channel0_pitch_default:
002964 91b0 281c                 	lds r27, pulse1_total_pitch_offset
002966 c005                      	rjmp sound_driver_instrument_routine_channel0_pitch_calculate_multiply
                                 
                                 sound_driver_instrument_routine_channel0_pitch_calculate:
002967 91a0 281c                 	lds r26, pulse1_total_pitch_offset //load the total pitch offset to change
002969 0fba                      	add r27, r26
00296a 93b0 281c                 	sts pulse1_total_pitch_offset, r27
                                 
                                 sound_driver_instrument_routine_channel0_pitch_calculate_multiply:
                                 	//NOTE: The Pxx effect is processed with the pitch instrument macro because the calculations are the same
00296c 91a0 282d                 	lds r26, pulse1_fx_Pxx
00296e 0fba                      	add r27, r26
                                 
00296f 936f                      	push r22 //only registers r16 - r23 can be used with mulsu
002970 937f                      	push r23
002971 2f6b                      	mov r22, r27 //store the signed pitch offset data into r22
002972 eb72                      	ldi r23, 0b10110010 //store r23 with 11.125 note: this is the closest approximation to the 11.1746014718 multiplier we can get with 8 bits
002973 0367                      	mulsu r22, r23
002974 917f                      	pop r23
002975 916f                      	pop r22
                                 
002976 9416                      	lsr r1 //shift out the fractional bits
002977 9407                      	ror r0
002978 9416                      	lsr r1
002979 9407                      	ror r0
00297a 9416                      	lsr r1
00297b 9407                      	ror r0
00297c 9416                      	lsr r1
00297d 9407                      	ror r0
00297e fe13                      	sbrs r1, 3 //check if result was a negative number
00297f c002                      	rjmp sound_driver_instrument_routine_channel0_pitch_calculate_offset //if the result was positive, don't fill with 1s
                                 
                                 sound_driver_instrument_routine_channel0_pitch_calculate_negative:
002980 efb0                      	ldi r27, 0xF0
002981 2a1b                      	or r1, r27 //when right shifting a two's complement number, must use 1s instead of 0s to fill
                                 
                                 sound_driver_instrument_routine_channel0_pitch_calculate_offset:
002982 91a0 0a8c                 	lds r26, TCB0_CCMPL //load the low bits for timer
002984 91b0 0a8d                 	lds r27, TCB0_CCMPH //load the high bits for timer
002986 0da0                      	add r26, r0 //offset the timer values
002987 1db1                      	adc r27, r1
002988 93a0 0a8c                 	sts TCB0_CCMPL, r26 //store the new low bits for timer
00298a 93b0 0a8d                 	sts TCB0_CCMPH, r27 //store the new high bits for timer
                                 	
                                 
                                 
                                 //NOTE: The hi pitch macro routine does not account for overflowing from the offset. In famitracker, if the offset
                                 //goes beyond the note range, there will be no more offset calculations. In this routine, it is possible that
                                 //the pitch goes from B-7 and back around to C-0. I don't believe there will ever be a song in which this will be a problem.
                                 sound_driver_instrument_routine_channel0_hi_pitch:
00298c 91e0 2823                 	lds ZL, pulse1_hi_pitch_macro
00298e 91f0 2824                 	lds ZH, pulse1_hi_pitch_macro+1
002990 9630                      	adiw Z, 0
002991 f409                      	brne sound_driver_instrument_routine_channel0_hi_pitch_continue
002992 c03c                      	rjmp sound_driver_instrument_routine_channel0_duty //if no hi pitch macro is in use, go to the next macro routine
                                 sound_driver_instrument_routine_channel0_hi_pitch_continue:
002993 0fee                      	lsl ZL //multiply by 2 to make z into a byte pointer for the macro's address
002994 1fff                      	rol ZH
002995 91a0 2825                 	lds r26, pulse1_hi_pitch_macro_offset
002997 0fea                      	add ZL, r26
002998 1df2                      	adc ZH, zero
                                 
002999 91b0 2827                 	lds r27, pulse1_hi_pitch_macro_release
00299b 17ba                      	cp r27, r26
00299c f429                      	brne sound_driver_instrument_routine_channel0_hi_pitch_increment //if the current offset is not equal to the release index, increment the offset
00299d 91a0 2826                 	lds r26, pulse1_hi_pitch_macro_loop
00299f 17ab                      	cp r26, r27 //check if loop flag exists NOTE: a loop flag and a release flag can only co-exist if the loop is less than the release
0029a0 f010                      	brlo sound_driver_instrument_routine_channel0_hi_pitch_increment+1 //if the current offset is equal to the release index and there is a loop, load the offset with the loop index, but also read the current index data
0029a1 c003                      	rjmp sound_driver_instrument_routine_channel0_hi_pitch_read //if the current offset is equal to the release index and there is no loop, then keep the offset unchanged
                                 
                                 sound_driver_instrument_routine_channel0_hi_pitch_increment:
0029a2 95a3                      	inc r26 //increment the macro offset
0029a3 93a0 2825                 	sts pulse1_hi_pitch_macro_offset, r26
                                 	
                                 sound_driver_instrument_routine_channel0_hi_pitch_read:
0029a5 91b4                      	lpm r27, Z //load hi pitch data into r27
0029a6 38b0                      	cpi r27, 0x80 //check for macro end flag
0029a7 f489                      	brne sound_driver_instrument_routine_channel0_hi_pitch_calculate //if the data was not the macro end flag, calculate the hi pitch offset
                                 
                                 
                                 
                                 sound_driver_instrument_routine_channel0_hi_pitch_macro_end_flag:
                                 sound_driver_instrument_routine_channel0_hi_pitch_macro_end_flag_check_release:
0029a8 50a1                      	subi r26, 1 //keep the macro offset at the end flag
0029a9 93a0 2825                 	sts pulse1_hi_pitch_macro_offset, r26
0029ab 91b0 2827                 	lds r27, pulse1_hi_pitch_macro_release
0029ad 3fbf                      	cpi r27, 0xFF
0029ae f439                      	brne sound_driver_instrument_routine_channel0_hi_pitch_default //if there is a release flag, we don't need to loop. offset the hi pitch by the final total hi pitch
                                 
                                 sound_driver_instrument_routine_channel0_hi_pitch_macro_end_flag_check_loop:
0029af 91b0 2826                 	lds r27, pulse1_hi_pitch_macro_loop //load the loop index
0029b1 3fbf                      	cpi r27, 0xFF //check if there is a loop index
0029b2 f019                      	breq sound_driver_instrument_routine_channel0_hi_pitch_default //if there is no loop flag, we don't need to loop. offset the pitch by the final total hi pitch
0029b3 93b0 2825                 	sts pulse1_hi_pitch_macro_offset, r27 //store the loop index into the offset
0029b5 cfd6                      	rjmp sound_driver_instrument_routine_channel0_hi_pitch //go back and re-read the hi pitch data
                                 
                                 
                                 
                                 sound_driver_instrument_routine_channel0_hi_pitch_default:
0029b6 91b0 2822                 	lds r27, pulse1_total_hi_pitch_offset
0029b8 c005                      	rjmp sound_driver_instrument_routine_channel0_hi_pitch_calculate_multiply
                                 
                                 sound_driver_instrument_routine_channel0_hi_pitch_calculate:
0029b9 91a0 2822                 	lds r26, pulse1_total_hi_pitch_offset //load the total hi pitch offset to change
0029bb 0fba                      	add r27, r26
0029bc 93b0 2822                 	sts pulse1_total_hi_pitch_offset, r27
                                 
                                 sound_driver_instrument_routine_channel0_hi_pitch_calculate_multiply:
0029be 936f                      	push r22 //only registers r16 - r23 can be used with mulsu
0029bf 937f                      	push r23
0029c0 2f6b                      	mov r22, r27 //store the signed hi pitch offset data into r22
0029c1 eb72                      	ldi r23, 0b10110010 //store r23 with 11.125 note: this is the closest approximation to the 11.1746014718 multiplier we can get with 8 bits
0029c2 0367                      	mulsu r22, r23
0029c3 917f                      	pop r23
0029c4 916f                      	pop r22
                                 
                                 	//NOTE: fractional bits do not need to be shifted out because hi pitch offsets are multiplied by 16. shifting right 4 times for the fraction and left 4 times for the 16x is the same as no shift.
                                 sound_driver_instrument_routine_channel0_hi_pitch_calculate_offset:
0029c5 91a0 0a8c                 	lds r26, TCB0_CCMPL //load the low bits for timer
0029c7 91b0 0a8d                 	lds r27, TCB0_CCMPH //load the high bits for timer
0029c9 0da0                      	add r26, r0 //offset the timer values
0029ca 1db1                      	adc r27, r1
0029cb 93a0 0a8c                 	sts TCB0_CCMPL, r26 //store the new low bits for timer
0029cd 93b0 0a8d                 	sts TCB0_CCMPH, r27 //store the new high bits for timer
                                 
                                 
                                 
                                 //NOTE: Unlike the original NES, changing the duty cycle will reset the sequencer position entirely.
                                 sound_driver_instrument_routine_channel0_duty:
0029cf 91e0 2828                 	lds ZL, pulse1_duty_macro
0029d1 91f0 2829                 	lds ZH, pulse1_duty_macro+1
0029d3 9630                      	adiw Z, 0
0029d4 f1b1                      	breq sound_driver_channel0_fx_routines //if no duty macro is in use, go to the next routine
0029d5 0fee                      	lsl ZL //multiply by 2 to make z into a byte pointer for the macro's address
0029d6 1fff                      	rol ZH
0029d7 91a0 282a                 	lds r26, pulse1_duty_macro_offset
0029d9 0fea                      	add ZL, r26
0029da 1df2                      	adc ZH, zero
                                 
0029db 91b0 282c                 	lds r27, pulse1_duty_macro_release
0029dd 17ba                      	cp r27, r26
0029de f429                      	brne sound_driver_instrument_routine_channel0_duty_increment //if the current offset is not equal to the release index, increment the offset
0029df 91a0 282b                 	lds r26, pulse1_duty_macro_loop
0029e1 17ab                      	cp r26, r27 //check if loop flag exists NOTE: a loop flag and a release flag can only co-exist if the loop is less than the release
0029e2 f010                      	brlo sound_driver_instrument_routine_channel0_duty_increment+1 //if the current offset is equal to the release index and there is a loop, load the offset with the loop index, but also read the current index data
0029e3 c027                      	rjmp sound_driver_channel0_fx_routines //if the current offset is equal to the release index and there is no loop, then keep the offset unchanged and skip the rest of the routine
                                 
                                 sound_driver_instrument_routine_channel0_duty_increment:
0029e4 95a3                      	inc r26 //increment the macro offset
0029e5 93a0 282a                 	sts pulse1_duty_macro_offset, r26
                                 	
                                 sound_driver_instrument_routine_channel0_duty_read:
0029e7 91b4                      	lpm r27, Z //load pitch data into r27
0029e8 3fbf                      	cpi r27, 0xFF //check for macro end flag
0029e9 f471                      	brne sound_driver_instrument_routine_channel0_duty_load //if the data was not the macro end flag, load the new duty cycle
                                 
                                 
                                 
                                 sound_driver_instrument_routine_channel0_duty_macro_end_flag:
                                 sound_driver_instrument_routine_channel0_duty_macro_end_flag_check_release:
0029ea 50a1                      	subi r26, 1 //keep the macro offset at the end flag
0029eb 93a0 282a                 	sts pulse1_duty_macro_offset, r26
0029ed 91b0 282c                 	lds r27, pulse1_duty_macro_release
0029ef 3fbf                      	cpi r27, 0xFF
0029f0 f4d1                      	brne sound_driver_channel0_fx_routines //if there is a release flag, we don't need to loop. skip the rest of the routine.
                                 
                                 sound_driver_instrument_routine_channel0_duty_macro_end_flag_check_loop:
0029f1 91b0 282b                 	lds r27, pulse1_duty_macro_loop //load the loop index
0029f3 3fbf                      	cpi r27, 0xFF //check if there is a loop index
0029f4 f0b1                      	breq sound_driver_channel0_fx_routines //if there is no loop flag, we don't need to loop. skip the rest of the routine.
0029f5 93b0 282a                 	sts pulse1_duty_macro_offset, r27 //store the loop index into the offset
0029f7 cfd7                      	rjmp sound_driver_instrument_routine_channel0_duty //go back and re-read the duty data
                                 
                                 
                                 
                                 sound_driver_instrument_routine_channel0_duty_load:
0029f8 e5f5                      	ldi ZH, HIGH(sequences << 1) //point Z to sequence table
0029f9 eaea                      	ldi ZL, LOW(sequences << 1)
0029fa 0feb                      	add ZL, r27 //offset the pointer by the duty macro data
0029fb 1df2                      	adc ZH, zero
                                 
0029fc 95b6                      	lsr r27 //move the duty cycle bits to the 2 MSB for pulse1_param (register $4000)
0029fd 95b7                      	ror r27
0029fe 95b7                      	ror r27
0029ff 91a0 2800                 	lds r26, pulse1_param //load r26 with pulse1_param (register $4000)
002a01 2fca                      	mov r28, r26 //store a copy of pulse1_param into r28
002a02 7ca0                      	andi r26, 0b11000000 //mask the duty cycle bits
002a03 13ba                      	cpse r27, r26 //check if the previous duty cycle and the new duty cycle are equal
002a04 c001                      	rjmp sound_driver_instrument_routine_channel0_duty_load_store
002a05 c005                      	rjmp sound_driver_channel0_fx_routines //if the previous and new duty cycle are the same, don't reload the sequence
                                 
                                 sound_driver_instrument_routine_channel0_duty_load_store:
002a06 90d4                      	lpm pulse1_sequence, Z //store the sequence
                                 
002a07 73cf                      	andi r28, 0b00111111 //mask out the duty cycle bits
002a08 2bcb                      	or r28, r27 //store the new duty cycle bits into r27
002a09 93c0 2800                 	sts pulse1_param, r28
                                 
                                 
                                 
                                 sound_driver_channel0_fx_routines:
                                 sound_driver_channel0_fx_Axy_routine:
002a0b 91b0 282e                 	lds r27, pulse1_fx_Axy
002a0d 15b2                      	cp r27, zero
002a0e f0e9                      	breq sound_driver_channel0_fx_Qxy_routine //0 means that the effect is not in use
                                 	
002a0f 91a0 2805                 	lds r26, pulse1_fractional_volume //load fractional volume representation of the channel
002a11 91c0 2800                 	lds r28, pulse1_param //load the integer volume representation of the channel
002a13 2fda                      	mov r29, r26 //copy fractional volume into r29
002a14 2fec                      	mov r30, r28 //copy the pulse1_param into r30
002a15 95e2                      	swap r30
002a16 7fd0                      	andi r29, 0xF0 //mask for integer volume bits from the fractional volume
002a17 7fe0                      	andi r30, 0xF0 //mask for VVVV volume bits
                                 
002a18 17ed                      	cp r30, r29 //compare the fractional and integer volumes
002a19 f009                      	breq sound_driver_channel0_fx_Axy_routine_calculate
                                 
                                 sound_driver_channel0_fx_Axy_routine_reload:
002a1a 2fae                      	mov r26, r30 //overwrite the fractional volume with the integer volume
                                 
                                 sound_driver_channel0_fx_Axy_routine_calculate:
002a1b fdb7                      	sbrc r27, 7 //check for negative sign bit in Axy offset value
002a1c c004                      	rjmp sound_driver_channel0_fx_Axy_routine_calculate_subtraction
                                 
                                 sound_driver_channel0_fx_Axy_routine_calculate_addition:
002a1d 0fab                      	add r26, r27 //add the fractional volume with the offset specified by the Axy effect
002a1e f428                      	brcc sound_driver_channel0_fx_Axy_routine_calculate_store //if the fractional volume did not overflow, go store the new volume
002a1f efa0                      	ldi r26, 0xF0 //if the fractional volume did overflow, reset it back to the highest integer volume possible (0xF)
002a20 c003                      	rjmp sound_driver_channel0_fx_Axy_routine_calculate_store
                                 
                                 sound_driver_channel0_fx_Axy_routine_calculate_subtraction:
002a21 0fab                      	add r26, r27 //add the fractional volume with the offset specified by the Axy effect
002a22 f008                      	brcs sound_driver_channel0_fx_Axy_routine_calculate_store //if the fractional volume did not overflow, go store the new volume
002a23 e0a0                      	ldi r26, 0x00 //if the fractional volume did overflow, reset it back to the lowest integer volume possible (0x0)
                                 
                                 sound_driver_channel0_fx_Axy_routine_calculate_store:
002a24 93a0 2805                 	sts pulse1_fractional_volume, r26 //store the new fractional volume
002a26 7fa0                      	andi r26, 0xF0 //mask for integer volume bits from the fractional volume
002a27 95a2                      	swap r26
002a28 7fc0                      	andi r28, 0xF0 //mask out the old VVVV volume bits
002a29 2bca                      	or r28, r26 //store the new volume back into pulse1_param
002a2a 93c0 2800                 	sts pulse1_param, r28
                                 
                                 
                                 
                                 sound_driver_channel0_fx_Qxy_routine:
002a2c 91e0 282f                 	lds ZL, pulse1_fx_Qxy_target
002a2e 91f0 2830                 	lds ZH, pulse1_fx_Qxy_target+1
002a30 9630                      	adiw Z, 0
002a31 f0c9                      	breq sound_driver_channel0_fx_Rxy_routine //if the effect is not enabled, skip the routine
                                 
002a32 91a0 2831                 	lds r26, pulse1_fx_Qxy_speed
002a34 91b0 2832                 	lds r27, pulse1_fx_Qxy_speed+1
002a36 91c0 0a8c                 	lds r28, TCB0_CCMPL
002a38 91d0 0a8d                 	lds r29, TCB0_CCMPH
                                 
002a3a 1bca                      	sub r28, r26 //subtract the timer period by the speed
002a3b 0bdb                      	sbc r29, r27
                                 
002a3c 17ce                      	cp r28, ZL //compare the new timer period with the target
002a3d 07df                      	cpc r29, ZH
002a3e f010                      	brlo sound_driver_channel0_fx_Qxy_routine_disable //if the target has been reached (or passed)
002a3f f009                      	breq sound_driver_channel0_fx_Qxy_routine_disable
002a40 f430                      	brsh sound_driver_channel0_fx_Qxy_routine_store
                                 
                                 sound_driver_channel0_fx_Qxy_routine_disable:
002a41 2fce                      	mov r28, ZL //in case the target was exceeded, reset the timer to the target
002a42 2fdf                      	mov r29, ZH
002a43 9220 282f                 	sts pulse1_fx_Qxy_target, zero //loading the target with 0 effectively disables this effect
002a45 9220 2830                 	sts pulse1_fx_Qxy_target+1, zero
                                 
                                 sound_driver_channel0_fx_Qxy_routine_store:
002a47 93c0 0a8c                 	sts TCB0_CCMPL, r28 //store the new timer periods
002a49 93d0 0a8d                 	sts TCB0_CCMPH, r29
                                 
                                 
                                 
                                 sound_driver_channel0_fx_Rxy_routine:
002a4b 91e0 2833                 	lds ZL, pulse1_fx_Rxy_target
002a4d 91f0 2834                 	lds ZH, pulse1_fx_Rxy_target+1
002a4f 9630                      	adiw Z, 0
002a50 f0c1                      	breq sound_driver_channel0_fx_xy_routine //if the effect is not enabled, skip the routine
                                 
002a51 91a0 2835                 	lds r26, pulse1_fx_Rxy_speed
002a53 91b0 2836                 	lds r27, pulse1_fx_Rxy_speed+1
002a55 91c0 0a8c                 	lds r28, TCB0_CCMPL
002a57 91d0 0a8d                 	lds r29, TCB0_CCMPH
                                 
002a59 0fca                      	add r28, r26 //add the timer period with the speed
002a5a 1fdb                      	adc r29, r27
                                 
002a5b 17ce                      	cp r28, ZL //compare the new timer period with the target
002a5c 07df                      	cpc r29, ZH
002a5d f408                      	brsh sound_driver_channel0_fx_Rxy_routine_disable //if the target has been reached (or passed)
002a5e f030                      	brlo sound_driver_channel0_fx_Rxy_routine_store
                                 
                                 sound_driver_channel0_fx_Rxy_routine_disable:
002a5f 2fce                      	mov r28, ZL //in case the target was exceeded, reset the timer to the target
002a60 2fdf                      	mov r29, ZH
002a61 9220 2833                 	sts pulse1_fx_Rxy_target, zero //loading the target with 0 effectively disables this effect
002a63 9220 2834                 	sts pulse1_fx_Rxy_target+1, zero
                                 
                                 sound_driver_channel0_fx_Rxy_routine_store:
002a65 93c0 0a8c                 	sts TCB0_CCMPL, r28 //store the new timer periods
002a67 93d0 0a8d                 	sts TCB0_CCMPH, r29
                                 
                                 
                                 sound_driver_channel0_fx_xy_routine:
                                 
                                 sound_driver_exit:
002a69 91df                      	pop r29
002a6a 91cf                      	pop r28
002a6b cc05                      	rjmp sequence_1_3 + 3 //+3 is to skip the stack instructions since we already pushed them
                                 
                                 //PULSE 1 ROUTINES
                                 pulse1_sequence_routine:
002a6c b7bf                      	in r27, CPU_SREG
002a6d 93bf                      	push r27
002a6e 94f8                      	cli
                                 
002a6f 0cdd                      	lsl pulse1_sequence //shifts sequence to the left
002a70 1cd2                      	adc pulse1_sequence, zero //if the shifted bit was a 1, it will be added to the LSB
                                 
002a71 e0b1                      	ldi r27, TCB_CAPT_bm //clear OVF flag
002a72 93b0 0a86                 	sts TCB0_INTFLAGS, r27
002a74 91bf                      	pop r27
002a75 bfbf                      	out CPU_SREG, r27
002a76 9518                      	reti
                                 
                                 pulse1_sweep_routine:
002a77 2dbf                      	mov r27, pulse1_sweep
002a78 70b7                      	andi r27, 0x07 //mask for period divider bits
002a79 f4f9                      	brne pulse1_sweep_routine_decrement_divider //check if divider != 0
                                 
                                 pulse1_sweep_routine_action: //if the divider is == 0, update the pulse timer period
002a7a 93df                      	push r29
002a7b 2ddf                      	mov r29, pulse1_sweep
002a7c 95d2                      	swap r29
002a7d 70d7                      	andi r29, 0x07 //mask for shift bits
002a7e f409                      	brne PC+2 //check of shift == 0
002a7f 91df                      	pop r29
002a80 c019                      	rjmp pulse1_sweep_routine_check_reload //if the shift == 0, do nothing and return
                                 
002a81 91a0 0a8c                 	lds r26, TCB0_CCMPL
002a83 91b0 0a8d                 	lds r27, TCB0_CCMPH
002a85 95b6                      	lsr r27
002a86 95a7                      	ror r26
002a87 95da                      	dec r29
002a88 f7e1                      	brne PC-3 //keep looping/shifting until shift count is 0
                                 
002a89 fef7                      	sbrs pulse1_sweep, 7 //check the negate flag
002a8a c002                      	rjmp PC+3 //if negate flag was clear, go straight to addition
                                 
002a8b 95a0                      	com r26 //pulse1 uses one's complement if the negate flag is set
002a8c 95b0                      	com r27
                                 
002a8d 91d0 0a8c                 	lds r29, TCB0_CCMPL //perform addition to get new timer period
002a8f 0fad                      	add r26, r29
002a90 91d0 0a8d                 	lds r29, TCB0_CCMPH
002a92 1fbd                      	adc r27, r29
                                 
002a93 93a0 0a8c                 	sts TCB0_CCMPL, r26 //store the new LOW bits for timer
002a95 93b0 0a8d                 	sts TCB0_CCMPH, r27 //store the new HIGH bits for timer
                                 
                                 	//sts pulse1_timerL, r26
                                 	//sts pulse1_timerH, r27
                                 
                                 /*	//Sweep Test
                                 	mov r29, pulse1_sweep //invert the negate bit
                                 	ldi r27, 0b10000000
                                 	eor r29, r27
                                 	ori r29, 0b01111111
                                 
                                 	lds r27, pulse1_sweep_param //reload the pulse sweep divider params
                                 	swap r27
                                 	ori r27, 0b10000000
                                 	and r27, r29
                                 	mov pulse1_sweep, r27
                                 	sbr channel_flags, 0b10000000*/
                                 	
002a97 91df                      	pop r29
002a98 c001                      	rjmp pulse1_sweep_routine_check_reload
                                 
                                 pulse1_sweep_routine_decrement_divider:
002a99 94fa                      	dec pulse1_sweep //if the divider != 0, decrement the divider
                                 
                                 pulse1_sweep_routine_check_reload:
002a9a ff97                      	sbrs channel_flags, 7 //if the reload flag is set, reload the sweep divider
002a9b 9508                      	ret
                                 
                                 pulse1_sweep_reload:
002a9c 90f0 2801                 	lds pulse1_sweep, pulse1_sweep_param //NOTE: since the reload flag is kept in bit 6, we clear the reload flag indirectly
002a9e 94f2                      	swap pulse1_sweep //bring data from high byte to low byte
002a9f 779f                      	cbr channel_flags, 0b10000000 //clear ready flag
002aa0 9508                      	ret
                                 
                                 pulse1_envelope_routine:
002aa1 fd96                      	sbrc channel_flags, 6 //check if start flag is cleared
002aa2 c010                      	rjmp pulse1_envelope_routine_clear_start
                                 
002aa3 3000                      	cpi pulse1_volume_divider, 0x00 //check if the divider is 0
002aa4 f011                      	breq PC+3 //if the divider == 0, check loop flag
002aa5 950a                      	dec pulse1_volume_divider //if the divider != 0, decrement and return
002aa6 9508                      	ret
                                 
002aa7 9100 2800                 	lds pulse1_volume_divider, pulse1_param //if the divider == 0, reset the divider period
002aa9 700f                      	andi pulse1_volume_divider, 0x0F //mask for VVVV bits
002aaa ff95                      	sbrs channel_flags, 5 //check if the loop flag is set
002aab c002                      	rjmp pulse1_envelope_routine_decrement_decay //if the loop flag is not set, check the decay
002aac e01f                      	ldi pulse1_volume_decay, 0x0F //if the loop flag is set, reset decay and return
002aad 9508                      	ret
                                 
                                 pulse1_envelope_routine_decrement_decay:
002aae 3010                      	cpi pulse1_volume_decay, 0x00 //check if the decay is 0
002aaf f409                      	brne PC+2 //if decay != 0, go decrement
002ab0 9508                      	ret //if decay == 0 && loop flag == 0, do nothing and return
002ab1 951a                      	dec pulse1_volume_decay
002ab2 9508                      	ret
                                 
                                 pulse1_envelope_routine_clear_start:
002ab3 7b9f                      	cbr channel_flags, 0b01000000 //if the start flag is set, clear it
002ab4 9100 2800                 	lds pulse1_volume_divider, pulse1_param //if the start flag is set, reset the divider period
002ab6 700f                      	andi pulse1_volume_divider, 0x0F //mask for VVVV bits
002ab7 e01f                      	ldi pulse1_volume_decay, 0x0F //if the start flag is set, reset decay
002ab8 9508                      	ret
                                 
                                 //CONVERTERS (TABLES)
                                 //converts and loads 5 bit length to corresponding 8 bit length value into r29
                                 length_converter:
002ab9 e5f5                      	ldi ZH, HIGH(length << 1)
002aba e7ee                      	ldi ZL, LOW(length << 1)
002abb 0fed                      	add ZL, r29
002abc 1df2                      	adc ZH, zero
002abd 91d4                      	lpm r29, Z
002abe 9508                      	ret
                                 
002abf 7f05
002ac0 010a
002ac1 0214
002ac2 0328
002ac3 0450
002ac4 051e
002ac5 0607
002ac6 070d
002ac7 0806
002ac8 090c
002ac9 0a18
002aca 0b30
002acb 0c60
002acc 0d24
002acd 0e08
002ace 0f10                      length: .db $05, $7F, $0A, $01, $14, $02, $28, $03, $50, $04, $1E, $05, $07, $06, $0D, $07, $06, $08, $0C, $09, $18, $0A, $30, $0B, $60, $0C, $24, $0D, $08, $0E, $10, $0F
                                 
                                 //loads pulse sequence into r29
                                 duty_cycle_sequences:
002acf e5f5                      	ldi ZH, HIGH(sequences << 1)
002ad0 eaea                      	ldi ZL, LOW(sequences << 1)
002ad1 0fed                      	add ZL, r29
002ad2 1df2                      	adc ZH, zero
002ad3 91d4                      	lpm r29, Z
002ad4 9508                      	ret
                                 
                                 //pulse sequences: 12.5%, 25%, 50%, 75%
002ad5 0301
002ad6 fc0f                      sequences: .db 0b00000001, 0b00000011, 0b00001111, 0b11111100
                                 
                                 //list of famitracker fx: http://famitracker.com/wiki/index.php?title=Effect_list
                                 fx:
002ad7 26b1
002ad8 26b2
002ad9 26b3
002ada 26b4
002adb 26b5                      	.dw sound_driver_channel0_fx_0xy, sound_driver_channel0_fx_1xx, sound_driver_channel0_fx_2xx, sound_driver_channel0_fx_3xx, sound_driver_channel0_fx_4xy
002adc 26b6
002add 26b7
002ade 26ba
002adf 26bb
002ae0 26bc                      	.dw sound_driver_channel0_fx_7xy, sound_driver_channel0_fx_Axy, sound_driver_channel0_fx_Bxx, sound_driver_channel0_fx_Cxx, sound_driver_channel0_fx_Dxx
002ae1 26bd
002ae2 26be
002ae3 26bf
002ae4 26c0
002ae5 26c1                      	.dw sound_driver_channel0_fx_Exx, sound_driver_channel0_fx_Fxx, sound_driver_channel0_fx_Gxx, sound_driver_channel0_fx_Hxy, sound_driver_channel0_fx_lxy
002ae6 26c2
002ae7 26c3
002ae8 26c4
002ae9 26c7
002aea 2707                      	.dw sound_driver_channel0_fx_Hxx, sound_driver_channel0_fx_Ixx, sound_driver_channel0_fx_Pxx, sound_driver_channel0_fx_Qxy, sound_driver_channel0_fx_Rxy
002aeb 2746
002aec 2747
002aed 275b
002aee 275c
002aef 275d                      	.dw sound_driver_channel0_fx_Sxx, sound_driver_channel0_fx_Vxx, sound_driver_channel0_fx_Wxx, sound_driver_channel0_fx_Xxx, sound_driver_channel0_fx_Yxx
002af0 275e                      	.dw sound_driver_channel0_fx_Zxx
                                 
                                 //famitracker volumes table: http://famitracker.com/wiki/index.php?title=Volume
                                 volumes:
002af1 0000
002af2 0000
002af3 0000
002af4 0000
002af5 0000
002af6 0000
002af7 0000
002af8 0000                      	.db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
002af9 0100
002afa 0101
002afb 0101
002afc 0101
002afd 0101
002afe 0101
002aff 0101
002b00 0101                      	.db 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01
002b01 0100
002b02 0101
002b03 0101
002b04 0101
002b05 0101
002b06 0101
002b07 0101
002b08 0201                      	.db 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02
002b09 0100
002b0a 0101
002b0b 0101
002b0c 0101
002b0d 0101
002b0e 0202
002b0f 0202
002b10 0302                      	.db 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x03
002b11 0100
002b12 0101
002b13 0101
002b14 0101
002b15 0202
002b16 0202
002b17 0303
002b18 0403                      	.db 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x03, 0x03, 0x03, 0x04
002b19 0100
002b1a 0101
002b1b 0101
002b1c 0202
002b1d 0302
002b1e 0303
002b1f 0404
002b20 0504                      	.db 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x03, 0x03, 0x03, 0x04, 0x04, 0x04, 0x05
002b21 0100
002b22 0101
002b23 0201
002b24 0202
002b25 0303
002b26 0404
002b27 0504
002b28 0605                      	.db 0x00, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x02, 0x03, 0x03, 0x04, 0x04, 0x04, 0x05, 0x05, 0x06
002b29 0100
002b2a 0101
002b2b 0201
002b2c 0302
002b2d 0403
002b2e 0504
002b2f 0605
002b30 0706                      	.db 0x00, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 0x03, 0x03, 0x04, 0x04, 0x05, 0x05, 0x06, 0x06, 0x07
002b31 0100
002b32 0101
002b33 0202
002b34 0303
002b35 0404
002b36 0505
002b37 0606
002b38 0807                      	.db 0x00, 0x01, 0x01, 0x01, 0x02, 0x02, 0x03, 0x03, 0x04, 0x04, 0x05, 0x05, 0x06, 0x06, 0x07, 0x08
002b39 0100
002b3a 0101
002b3b 0302
002b3c 0403
002b3d 0504
002b3e 0606
002b3f 0707
002b40 0908                      	.db 0x00, 0x01, 0x01, 0x01, 0x02, 0x03, 0x03, 0x04, 0x04, 0x05, 0x06, 0x06, 0x07, 0x07, 0x08, 0x09
002b41 0100
002b42 0201
002b43 0302
002b44 0404
002b45 0605
002b46 0706
002b47 0808
002b48 0a09                      	.db 0x00, 0x01, 0x01, 0x02, 0x02, 0x03, 0x04, 0x04, 0x05, 0x06, 0x06, 0x07, 0x08, 0x08, 0x09, 0x0A
002b49 0100
002b4a 0201
002b4b 0302
002b4c 0504
002b4d 0605
002b4e 0807
002b4f 0908
002b50 0b0a                      	.db 0x00, 0x01, 0x01, 0x02, 0x02, 0x03, 0x04, 0x05, 0x05, 0x06, 0x07, 0x08, 0x08, 0x09, 0x0A, 0x0B
002b51 0100
002b52 0201
002b53 0403
002b54 0504
002b55 0706
002b56 0808
002b57 0a09
002b58 0c0b                      	.db 0x00, 0x01, 0x01, 0x02, 0x03, 0x04, 0x04, 0x05, 0x06, 0x07, 0x08, 0x08, 0x09, 0x0A, 0x0B, 0x0C
002b59 0100
002b5a 0201
002b5b 0403
002b5c 0605
002b5d 0706
002b5e 0908
002b5f 0b0a
002b60 0d0c                      	.db 0x00, 0x01, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D
002b61 0100
002b62 0201
002b63 0403
002b64 0605
002b65 0807
002b66 0a09
002b67 0c0b
002b68 0e0d                      	.db 0x00, 0x01, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E
002b69 0100
002b6a 0302
002b6b 0504
002b6c 0706
002b6d 0908
002b6e 0b0a
002b6f 0d0c


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega4809" register use summary:
x  :   0 y  :   0 z  :  53 r0 :  16 r1 :  18 r2 :  97 r3 :   0 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   6 r14:   4 r15:   9 r16:   7 r17:   6 r18:   0 r19:   0 r20:   0 
r21:   0 r22:  16 r23:  16 r24:   0 r25:  11 r26: 156 r27: 278 r28:  58 
r29:  64 r30:  75 r31:  70 
Registers used: 18 out of 35 (51.4%)

"ATmega4809" instruction use summary:
.lds  :   0 .sts  :   0 adc   :  24 add   :  31 adiw  :  19 and   :   0 
andi  :  22 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   1 brcs  :   3 break :   0 breq  :  32 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :  14 brlt  :   0 brmi  :   0 
brne  :  27 brpl  :   0 brsh  :   6 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   0 call  :   0 cbi   :   0 cbr   :   2 
clc   :   0 clh   :   0 cli   :   4 cln   :   0 clr   :   1 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   2 cp    :  15 cpc   :   2 
cpi   :  42 cpse  :   4 dec   :   7 des   :   0 eor   :   0 fmul  :   0 
fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   1 in    :   4 inc   :  12 
jmp   :   6 ld    :   0 ldd   :   0 ldi   :  70 lds   : 120 lpm   :  58 
lsl   :  19 lsr   :  16 mov   :  28 movw  :   0 mul   :   2 muls  :   0 
mulsu :   2 neg   :   0 nop   :   0 or    :   5 ori   :   0 out   :   6 
pop   :  19 push  :  19 rcall :  16 ret   :  13 reti  :   3 rjmp  :  99 
rol   :  13 ror   :  17 sbc   :   1 sbci  :   0 sbi   :   0 sbic  :   0 
sbis  :   0 sbiw  :   0 sbr   :   3 sbrc  :   8 sbrs  :   5 sec   :   0 
seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :   0 std   :   0 
sts   : 214 sub   :   2 subi  :   9 swap  :   8 tst   :   0 wdr   :   0 

Instructions used: 50 out of 114 (43.9%)

"ATmega4809" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0056e2   2748  19466  22214   49152  45.2%
[.dseg] 0x002800 0x00283b      0     59     59    6144   1.0%
[.eseg] 0x000000 0x000000      0      0      0     256   0.0%

Assembly complete, 0 errors, 172 warnings
